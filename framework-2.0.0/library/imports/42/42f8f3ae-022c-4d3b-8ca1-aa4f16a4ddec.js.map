{"version":3,"sources":["assets\\script\\MainGameScript\\Controller\\SlotController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {Effect} from '../../Framework/Audio/AudioManager'\r\nimport LoadResManager from '../../Framework/LoadResources/LoadResManager'\r\nimport {GameState} from '../../Framework/Process/Enum/GameState'\r\nimport SlotGameManager from '../../Framework/Process/SlotGameManager'\r\nimport SlotStyleManager from '../../Framework/Slot/SlotStyleManager'\r\nimport NoLineSlot from '../../Framework/Slot/SlotType/NoLineSlot'\r\nimport ASlotInitializeTemplate from '../../Framework/Template/Slot/ASlotInitializeTemplate'\r\nimport {ResponseType} from \"../../Framework/WebResponse/Enum/ResponseType\";\r\nimport NoLineFreeResult from \"../../Framework/WebResponse/SeverDataModel/FreeResult/NoLineFreeResult\";\r\nimport NoLineResult from \"../../Framework/WebResponse/SeverDataModel/NormalResult/NoLineResult\";\r\nimport NoLineTableInfo from \"../../Framework/WebResponse/SeverDataModel/TableInfo/NoLineTableInfo\";\r\nimport {WebResponseManager} from '../../Framework/WebResponse/WebResponseManager'\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SlotController extends ASlotInitializeTemplate {\r\n\r\n    @property(cc.Node)\r\n    protected slotRow: cc.Node[] = [];\r\n    @property(cc.AnimationClip)\r\n    private gridAnimation: cc.AnimationClip[] = [];\r\n    protected gridNodeToMap: Map<number, Array<cc.Node>>;\r\n    protected girdSpriteToMap: Map<number, Array<cc.Sprite>>;\r\n    protected normalResult: NoLineResult;\r\n    protected freeResult: NoLineFreeResult;\r\n    private tableInfo: NoLineTableInfo;\r\n    public static instance: SlotController;\r\n\r\n    protected onCreate() {\r\n        SlotController.instance = this;\r\n        this.normalResult =\r\n            WebResponseManager\r\n                .instance<NoLineResult>()\r\n                .getResult(ResponseType.NORMAL);\r\n        this.freeResult =\r\n            WebResponseManager\r\n                .instance<NoLineFreeResult>()\r\n                .getResult(ResponseType.FREE);\r\n        this.tableInfo =\r\n            WebResponseManager\r\n                .instance<NoLineTableInfo>()\r\n                .getResult(ResponseType.TABLE_INFO);\r\n        this.gridNodeToMap = this.getAllGridNode();\r\n        this.girdSpriteToMap = this.getAllGridSprite();\r\n    }\r\n\r\n    /**\r\n     * SlotStyle 初設定,如無符合的功能樣式 可繼承抽象類 ASlot 自定義使用\r\n     */\r\n    protected slotStyleSetting() {\r\n        SlotStyleManager.instance\r\n            .setSlotTemplate(NoLineSlot)                                 //執行的class\r\n            .setSlotGirdSpeed(0.08)                                      //遊戲一般速度\r\n            .setSlotGridHeight(170)                                      //老虎機格子高度\r\n            .setSlotRowGridCount(3)                                      //老虎機每列格子數\r\n            .setSlotTurnCount(2)                                         //一般停止最少轉動次數\r\n            .setSpeedUpMultiple(2)                                       //加速倍率\r\n            .slotColumnToTween(this.slotRow)                        //執行老虎機動畫的列\r\n            .setGridNodeToMap(this.gridNodeToMap)                        //執行動畫的所有格子\r\n            .setGirdSpriteToMap(this.girdSpriteToMap)                    //更換圖片的所有格子\r\n            .setGridImg(LoadResManager.instance.imgRes.get(\"gridImg\"))   //遊戲中grid的所有格子\r\n            .build();                                                    //實例化setSlotTemplate參數內的Class\r\n    }\r\n\r\n    /**\r\n     * 更新所有grid 隨機圖片\r\n     * 如果每列的3~5格格子需要顯示 TableInfo 回傳回來的初始grid答案\r\n     * @private\r\n     */\r\n    protected slotInitialize() {\r\n        let arrayToSprites: IterableIterator<Array<cc.Sprite>> = this.girdSpriteToMap.values();\r\n        let imgLength = LoadResManager.instance.imgRes.get(\"gridImg\").size;\r\n        let gridIndex;\r\n        let answerIndex = 0;\r\n        for (let sprites of arrayToSprites) {\r\n            gridIndex = 0;\r\n            for (let sprite of sprites) {\r\n                let random: number = Math.floor(Math.random() * imgLength);\r\n                //如果該格子是用來顯示初始答案的,將不更新隨機圖片\r\n                if (gridIndex >= 3 && gridIndex <= 5) {\r\n                    this.updateAnswerGrid(gridIndex, answerIndex);\r\n                    answerIndex++;\r\n                } else {\r\n                    sprite.spriteFrame =\r\n                        LoadResManager.instance.imgRes.get(\"gridImg\").get(String(random));\r\n                }\r\n                gridIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新 TableInfo 回傳回來的初始grid答案\r\n     * @param {number} gridIndex\r\n     * @param {number} answerIndex\r\n     * @private\r\n     */\r\n    private updateAnswerGrid(gridIndex: number, answerIndex: number) {\r\n        let rowIndex = Math.floor(answerIndex / 3);\r\n        let answer: number = this.tableInfo.Grid[answerIndex];\r\n        this.girdSpriteToMap\r\n            .get(rowIndex)[gridIndex]\r\n            .spriteFrame = LoadResManager.instance.imgRes.get(\"gridImg\").get(String(answer));\r\n    }\r\n\r\n    /**\r\n     * 拿取要跑grid輪播的Node\r\n     * return Map<number , Array<cc.Node>>\r\n     */\r\n    protected getAllGridNode(): Map<number, Array<cc.Node>> {\r\n        let grids: Map<number, Array<cc.Node>> = new Map<number, Array<cc.Node>>();\r\n        for (let i = 0; i < this.slotRow.length; i++) {\r\n            let nodes: Array<cc.Node> = this.slotRow[i].children;\r\n            let nodeToArray: Array<cc.Node> = new Array<cc.Node>();\r\n            for (let j = nodes.length - 1; j >= 0; j--) {\r\n                nodeToArray.push(nodes[j]);\r\n            }\r\n            grids.set(i, nodeToArray);\r\n        }\r\n        return grids;\r\n    }\r\n\r\n    /**\r\n     * 拿取所有要更改圖片的Grid\r\n     */\r\n    protected getAllGridSprite(): Map<number, Array<cc.Sprite>> {\r\n        let sprites: Map<number, Array<cc.Sprite>> = new Map<number, Array<cc.Sprite>>();\r\n        for (let i = 0; i < this.slotRow.length; i++) {\r\n            let nodes = this.slotRow[i].children;\r\n            let spriteToArray = new Array<cc.Sprite>();\r\n            for (let j = nodes.length - 1; j >= 0; j--) {\r\n                spriteToArray.push(nodes[j].children[0].getComponent(cc.Sprite));\r\n            }\r\n            sprites.set(i, spriteToArray);\r\n        }\r\n        return sprites;\r\n    }\r\n\r\n    private winGrid: Array<number>;\r\n    private timer: number;\r\n    private answerToArray: Array<number>;\r\n    public showWinGrid(winGrid: Array<number>) {\r\n        if (this.timer) clearInterval(this.timer);\r\n        if (SlotGameManager.instance.gameState == GameState.FREEING) {\r\n            this.answerToArray = this.freeResult.Grid;\r\n        } else {\r\n            this.answerToArray = this.normalResult.Grid;\r\n        }\r\n        this.winGrid = winGrid;\r\n        this.playGridAnimation(this.answerToArray);\r\n        this.timer = window.setInterval(() => {\r\n            this.playGridAnimation(this.answerToArray);\r\n        }, 1500);\r\n    }\r\n\r\n    @Effect(\"WinSingleLine\")\r\n    private playGridAnimation(answerToArray) {\r\n        let columnIndex = 0;\r\n        let gridIndex = 3;\r\n        for (let i = 0; i < this.winGrid.length; i++) {\r\n            if (gridIndex > 5) gridIndex = 3;\r\n            columnIndex = Math.floor(i / 3);\r\n            if (this.winGrid[i] == 1) {\r\n                let anima = this.girdSpriteToMap\r\n                    .get(columnIndex)[gridIndex].getComponent(cc.Animation);\r\n                let answer = answerToArray[i];\r\n                anima.addClip(this.gridAnimation[answer], `${answer}`);\r\n                anima.play(String(answer));\r\n            }\r\n            gridIndex++;\r\n        }\r\n    }\r\n\r\n    public closeWinGrid() {\r\n        if (!this.winGrid && !this.timer) return;\r\n        clearInterval(this.timer);\r\n        let columnIndex = 0;\r\n        let gridIndex = 3;\r\n        for (let i = 0; i < this.winGrid.length; i++) {\r\n            if (gridIndex > 5) gridIndex = 3;\r\n            columnIndex = Math.floor(i / 3);\r\n            if (this.winGrid[i] == 1) {\r\n                let answer = this.answerToArray[i];\r\n                let anima = this.girdSpriteToMap\r\n                    .get(columnIndex)[gridIndex].getComponent(cc.Animation);\r\n                anima.removeClip(this.gridAnimation[answer], true);\r\n                this.girdSpriteToMap.get(columnIndex)[gridIndex].spriteFrame =\r\n                    LoadResManager.instance.imgRes.get(\"gridImg\").get(String(answer))\r\n            }\r\n            gridIndex++;\r\n        }\r\n        this.winGrid = null;\r\n        this.timer = null;\r\n    }\r\n}\r\n"]}