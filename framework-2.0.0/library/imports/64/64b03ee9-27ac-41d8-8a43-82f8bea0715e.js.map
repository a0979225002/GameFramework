{"version":3,"sources":["assets\\script\\Framework\\GlobalMethod\\ButtonMethod.ts"],"names":[],"mappings":";;;;;;AAAA;IAAA;IA6DA,CAAC;IA3DG;;;;;;OAMG;IACI,2BAAc,GAArB,UAAsB,UAAqB,EAAE,UAAkB,EAAE,IAAS,EAAE,eAAqB;QAC7F,UAAU;QACV,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QACzB,IAAI,UAAU,GAAG,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,WAAW,GAAG,IAAI,EAAE,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,QAAQ;QAC3D,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,uBAAuB;QACtD,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,YAAY;QAChD,WAAW,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC,qBAAqB;QACvD,IAAI,eAAe,IAAI,eAAe,IAAI,CAAC,EAAE;YACzC,WAAW,CAAC,eAAe,GAAG,eAAe,CAAC,CAAC,QAAQ;SAC1D;QACD,qDAAqD;QACrD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU;IACxD,CAAC;IAED;;;OAGG;IACI,0BAAa,GAApB,UAAqB,MAAiB;QAClC,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,yBAAY,GAAnB,UAAoB,MAAiB;QACjC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACI,+BAAkB,GAAzB,UAA0B,IAAa,EAAE,MAAgB,EAAE,MAAW,EAAE,UAAoB;QACxF,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;OAMG;IACI,+BAAkB,GAAzB,UAA0B,IAAa,EAAE,MAAgB,EAAE,MAAW,EAAE,UAAoB;QACxF,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IACxE,CAAC;IACL,mBAAC;AAAD,CA7DA,AA6DC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class ButtonMethod {\r\n\r\n    /**\r\n     * 對該button添加監聽事件\r\n     * @param {cc.Button} buttonNode : 按鈕組件\r\n     * @param {string} methodName : 事件方法名稱\r\n     * @param self{this} : 在哪裡開啟監聽的\r\n     * @param customEventData{any} : 回傳值\r\n     */\r\n    static addButtonEvent(buttonNode: cc.Button, methodName: string, self: any, customEventData?: any) {\r\n        //手動添加監聽事件\r\n        let thisNode = self.node;\r\n        let scriptName = cc.js.getClassName(self);\r\n        let click_event = new cc.Component.EventHandler(); //給予一個事件\r\n        click_event.target = thisNode; //父類節點,注意父類size不能為(0,0)\r\n        click_event.component = scriptName; //該父類的script\r\n        click_event.handler = methodName; //對事件添加function,名稱是字串\r\n        if (customEventData || customEventData == 0) {\r\n            click_event.customEventData = customEventData; //添加回調參數\r\n        }\r\n        // this.node.clickEvents = [click_event];//一次添加多個監聽事件\r\n        buttonNode.clickEvents.push(click_event); //當點擊後觸發事件\r\n    }\r\n\r\n    /**\r\n     * //TITLE:禁用button\r\n     * @param {cc.Button}button\r\n     */\r\n    static disableButton(button: cc.Button) {\r\n        button.interactable = false;\r\n    }\r\n\r\n    /**\r\n     * //TITLE:啟用button\r\n     * @param {cc.Button}button\r\n     */\r\n    static enableButton(button: cc.Button) {\r\n        button.interactable = true;\r\n    }\r\n\r\n    /**\r\n     * 對該node 添加 on 事件\r\n     * @param {cc.Node} node\r\n     * @param {function} method\r\n     * @param {this} thisJs\r\n     * @param {boolean} useCapture : \"可關閉多點觸控更能\"\r\n     */\r\n    static addTouchStartEvent(node: cc.Node, method: Function, thisJs: any, useCapture?: boolean) {\r\n        node.on(cc.Node.EventType.TOUCH_START, method, thisJs, useCapture);\r\n    }\r\n\r\n    /**\r\n     * 對該node 關閉 off 事件\r\n     * @param {cc.Node} node\r\n     * @param {Function} method\r\n     * @param {this} thisJs\r\n     * @param {boolean} useCapture : \"可關閉多點觸控更能\"\r\n     */\r\n    static offTouchStartEvent(node: cc.Node, method: Function, thisJs: any, useCapture?: boolean) {\r\n        node.off(cc.Node.EventType.TOUCH_START, method, thisJs, useCapture);\r\n    }\r\n}"]}