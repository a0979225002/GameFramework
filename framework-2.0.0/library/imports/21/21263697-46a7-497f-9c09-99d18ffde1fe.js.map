{"version":3,"sources":["assets\\script\\Framework\\Slot\\SlotType\\NoLineSlot.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAmD;AACnD,0DAAsD;AACtD,iEAA2D;AAC3D,oEAAiE;AAGjE,2EAAuE;AACvE,kCAA4B;AAC5B,iGAA4F;AAG5F;IAAwC,8BAAK;IAqEzC,oBAAY,SAAoB;QAAhC,YACI,kBAAM,SAAS,CAAC,SA0BnB;QAzBG,IAAI,CAAC,SAAS;yBAAS;QACvB,KAAI,CAAC,YAAY;YACb,uCAAkB;iBACb,QAAQ,EAAgB;iBACxB,SAAS,CAAC,2BAAY,CAAC,MAAM,CAAC,CAAC;QACxC,KAAI,CAAC,UAAU;YACX,uCAAkB;iBACb,QAAQ,EAAoB;iBAC5B,SAAS,CAAC,2BAAY,CAAC,IAAI,CAAC,CAAC;QACtC,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAClD,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAClD,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;QACxD,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC;QACpD,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,SAAS,CAAC,eAAe,CAAC;QACtD,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC;QAC1D,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC;QAClD,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,SAAS,CAAC,eAAe,CAAC;QACtD,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QACtC,QAAQ;QACR,IAAI,SAAS,GAAG,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,cAAc,CAAC;QAC5D,KAAI,CAAC,OAAO,GAAG,IAAI,KAAK,EAAU,CAAC;QACnC,4BAA4B;QAC5B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;QACpD,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,KAAI,CAAC,eAAe,EAAE,CAAC;;IAC3B,CAAC;IAEM,+BAAU,GAAjB;QAAA,iBAoBC;QAnBG,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QACjE,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO;;YAC7B,IAAI,KAAK,GAAG,CAAC,CAAC;;gBACd,KAAuB,IAAA,KAAA,SAAA,KAAI,CAAC,iBAAiB,CAAA,gBAAA,4BAAE;oBAA1C,IAAI,UAAU,WAAA;oBACf,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC;yBACf,KAAK,CAAC,IAAI,CAAC;yBACX,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,GAAG,GAAG,CAAC,EAAE,EAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,YAAY,EAAC,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,CAAC;yBACrF,EAAE,CAAC,KAAI,CAAC,aAAa,EAAE,EAAC,CAAC,EAAE,CAAC,YAAY,EAAC,CAAC;yBAC1C,IAAI,CAAC;wBACF,KAAK,EAAE,CAAC;wBACR,IAAI,KAAK,KAAK,KAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;4BACzC,OAAO,EAAE,CAAC;yBACb;oBACL,CAAC,CAAC;yBACD,KAAK,EAAE,CAAC;iBAChB;;;;;;;;;QACL,CAAC,CAAC,CAAA;IAEN,CAAC;IAEM,qCAAgB,GAAvB;QAAA,iBAkBC;QAhBG,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO;YAE7B,IAAI,YAAY,GAAG,KAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAEjD,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAE7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;gBAEnC,IAAI,CAAC,IAAI,YAAY,GAAG,CAAC,EAAE;oBACvB,KAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;oBACnC,OAAO;iBACV;gBACD,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;aAC7B;QAEL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;;;;OAMG;IACK,sCAAiB,GAAzB,UAA0B,KAAa,EAAE,OAAoB,EAAE,aAAyB;QAAxF,iBAiDC;QAjD8D,8BAAA,EAAA,iBAAyB;QAEpF,4CAA4C;QAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvE,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAEzC,SAAS;QACT,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;aACT,EAAE,CAAC,QAAQ,EAAE,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC;aAC3C,IAAI,CAAC;YACF,uBAAuB;YAEvB,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;YAE9D,wBAAwB;YACxB,IAAI,yBAAe,CAAC,QAAQ,CAAC,UAAU,EAAE;gBAErC,aAAa,EAAE,CAAC;gBAEhB,qBAAqB;gBACrB,IAAI,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC;oBAAE,OAAO;gBAE3C,yBAAyB;gBACzB,IAAI,KAAK,IAAI,CAAC,IAAI,aAAa,IAAI,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;oBAE/D,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACvB,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;iBAEhC;qBAAM,IACH,KAAK,IAAI,CAAC;oBACV,KAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;oBACzB,aAAa,IAAI,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EACjD;oBAEE,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;oBAChC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;oBAC7B,KAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;oBACxC,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;iBAEhD;qBAAM;oBACH,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;iBACzD;aACJ;iBAAM;gBACH,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;aACzD;QACL,CAAC,CAAC;aACD,KAAK,EAAE,CAAC;IAEjB,CAAC;IAEO,uCAAkB,GAA1B,UAA2B,KAAK;QAE5B,IAAI,KAAa,CAAC;QAElB,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;SAC9B;aAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAChC,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC;YACvC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC1C;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SACtC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,yCAAoB,GAApB,UAAqB,MAAe,EAAE,KAAa;QAC/C,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACtD,sCAA4B,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAC/D;IACL,CAAC;IAED;;OAEG;IACH,8BAAS,GAAT,UAAU,KAAa,EAAE,OAAmB;QAExC,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAExC,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACK,uCAAkB,GAA1B,UAA2B,QAAwB,EAAE,WAAmB;QAEpE,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QACpC,IAAI,MAAc,CAAC;QACnB,IAAI,UAAqB,CAAC;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE1B,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAElC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC;YAE9D,oCAAoC;YACpC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAE1D,sBAAsB;YACtB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC;YAE5C,QAAQ;YACR,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAEtD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW;gBAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAErC,0BAA0B;YAC1B,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;YAC5D,kCAAkC;YAClC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACtC,oBAAoB;YACpB,QAAQ,CAAC,GAAG,EAAE,CAAC;SAElB;IACL,CAAC;IAED;;;;OAIG;IACK,+BAAU,GAAlB,UAAmB,KAAa,EAAE,OAAQ;QAA1C,iBAeC;QAdG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC7B,4CAA4C;QAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QACjE,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAEzC,SAAS;QACT,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;aACT,EAAE,CAAC,QAAQ,EAAE,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC;aAC3C,IAAI,CAAC;YACF,uBAAuB;YACvB,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;YAC9D,KAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC;aACD,KAAK,EAAE,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACK,gCAAW,GAAnB,UAAoB,KAAa;QAE7B,IAAI,MAAqB,CAAC;QAC1B,IAAI,YAAqB,CAAC;QAE1B,IAAI,yBAAe,CAAC,QAAQ,CAAC,SAAS,KAAK,qBAAS,CAAC,OAAO,EAAE;YAC1D,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;SACnC;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;SACrC;QAED,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAE/B,OAAO,YAAY,CAAC;IAExB,CAAC;IAED;;;;OAIG;IACK,qCAAgB,GAAxB,UAAyB,KAAa,EAAE,OAAmB;QAA3D,iBAyBC;QAvBG,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,mBAAmB,CAAC;YAC5C,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YAE5C,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAChD;aAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACxB,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAChD;QAED,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QAClE,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACzC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;aACT,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,aAAa,EAAC,CAAC;aACrD,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,EAAC,CAAC,EAAE,CAAC,aAAa,EAAC,EAAE,EAAC,MAAM,EAAE,WAAW,EAAC,CAAC;aACtE,IAAI,CAAC;YAEF,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE1B,IAAI,KAAK,KAAK,KAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7C,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBAC7C,OAAO,EAAE,CAAC;aACb;QACL,CAAC,CAAC;aACD,KAAK,EAAE,CAAC;IACjB,CAAC;IAQD,kCAAa,GAAb,UAAc,KAAK;QAEf,IAAI,UAAyB,CAAC;QAE9B,IAAI,yBAAe,CAAC,QAAQ,CAAC,SAAS,KAAK,qBAAS,CAAC,OAAO,EAAE;YAC1D,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SACrC;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;SACvC;QAED,IAAI,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC;QAEpB,KAAK,KAAK,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;YAC9B,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;gBACzB,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,6BAA6B;gBAC7B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACjB,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAC5B,gBAAc,IAAI,CAAC,aAAe,CACrC,CAAC;iBACL;aACJ;SACJ;QACD,iCAAiC;QACjC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC;eACtC,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/C,sBAAY,CAAC,QAAQ,CAAC,UAAU,CAC5B,gBAAc,IAAI,CAAC,aAAe,CACrC,CAAC;SACL;IACL,CAAC;IAED;;;;;OAKG;IACK,qCAAgB,GAAxB,UAAyB,KAAa;QAElC,IAAI,UAAyB,CAAC;QAE9B,IAAI,yBAAe,CAAC,QAAQ,CAAC,SAAS,KAAK,qBAAS,CAAC,OAAO,EAAE;YAC1D,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SACrC;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;SACvC;QAED,IAAI,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC1C,IAAI,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACxC,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,KAAK,KAAK,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;YAE9B,IAAI,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAE/B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,WAAW;kBAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAEvC,SAAS,EAAE,CAAC;SACf;IACL,CAAC;IAED;;OAEG;IACI,oCAAe,GAAtB;QAEI,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QAEjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEhC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QAEvB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC9B;SACJ;aAAM;YACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aAC7B;SACJ;IACL,CAAC;IACL,iBAAC;AAAD,CAzbA,AAybC,CAzbuC,eAAK,GAyb5C","file":"","sourceRoot":"/","sourcesContent":["import AudioManager from '../../Audio/AudioManager'\r\nimport {GameState} from '../../Process/Enum/GameState'\r\nimport SlotGameManager from '../../Process/SlotGameManager'\r\nimport {ResponseType} from \"../../WebResponse/Enum/ResponseType\";\r\nimport NoLineFreeResult from \"../../WebResponse/SeverDataModel/FreeResult/NoLineFreeResult\";\r\nimport NoLineResult from \"../../WebResponse/SeverDataModel/NormalResult/NoLineResult\";\r\nimport {WebResponseManager} from '../../WebResponse/WebResponseManager'\r\nimport ASlot from '../ASlot'\r\nimport ScrollFocusStateNotification from \"../SlotNotifivation/ScrollFocusStateNotification\";\r\nimport {StyleData} from '../SlotStyleManager'\r\n\r\nexport default class NoLineSlot extends ASlot {\r\n\r\n    /**\r\n     * 一般停止最少轉動次數\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    private readonly slotTurnCount: number;\r\n\r\n    /**\r\n     * 遊戲一般速度\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    private readonly slotGirdSpeed: number;\r\n\r\n    /**\r\n     * 遊戲每列的格子數量\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    private readonly slotRowGridCount: number;\r\n\r\n    /**\r\n     * 老虎機格子高度\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    private readonly slotGridHeight: number;\r\n\r\n    /**\r\n     * 加速倍率\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    private readonly speedUpMultiple: number;\r\n\r\n    /**\r\n     * 執行老虎機動畫的列\r\n     * @type {Array<cc.Node>}\r\n     * @private\r\n     */\r\n    private readonly slotColumnToTween: Array<cc.Node>;\r\n\r\n    /**\r\n     * 跑遊戲更換位置的grid 節點\r\n     * @type {Map<number, Array<cc.Node>>}\r\n     * @private\r\n     */\r\n    private readonly gridNodeToMap: Map<number, Array<cc.Node>>;\r\n\r\n    /**\r\n     * 跑遊戲更換答案的grid 節點\r\n     * @type {Map<number, Array<cc.Sprite>>}\r\n     * @private\r\n     */\r\n    private readonly gridSpriteToMap: Map<number, Array<cc.Sprite>>;\r\n\r\n    /**\r\n     * 遊戲中所有靜態grid圖片\r\n     * @param {StyleData} styleData\r\n     */\r\n    private readonly gridImg: Map<string, cc.SpriteFrame>;\r\n    private readonly rowData: Array<number> // [\"當前要跑幾個格子\",\"當前要跑的高度\"]\r\n    private normalResult: NoLineResult;\r\n    private freeResult: NoLineFreeResult\r\n    //遊戲每列是否已經結束\r\n    private readonly isSlotEnd: Array<boolean>;\r\n\r\n    constructor(styleData: StyleData) {\r\n        super(styleData)\r\n        if (!styleData) return;\r\n        this.normalResult =\r\n            WebResponseManager\r\n                .instance<NoLineResult>()\r\n                .getResult(ResponseType.NORMAL);\r\n        this.freeResult =\r\n            WebResponseManager\r\n                .instance<NoLineFreeResult>()\r\n                .getResult(ResponseType.FREE);\r\n        this.slotTurnCount = this.styleData.slotTurnCount;\r\n        this.slotGirdSpeed = this.styleData.slotGirdSpeed;\r\n        this.slotRowGridCount = this.styleData.slotRowGridCount;\r\n        this.slotGridHeight = this.styleData.slotGridHeight;\r\n        this.speedUpMultiple = this.styleData.speedUpMultiple;\r\n        this.slotColumnToTween = this.styleData.slotColumnToTween;\r\n        this.gridNodeToMap = this.styleData.gridNodeToMap;\r\n        this.gridSpriteToMap = this.styleData.gridSpriteToMap;\r\n        this.gridImg = this.styleData.gridImg;\r\n        //計算每列高度\r\n        let rowHeight = this.slotRowGridCount * this.slotGridHeight;\r\n        this.rowData = new Array<number>();\r\n        //rowData (要往下的格子數量,要下拉的高度);\r\n        this.rowData.push(this.slotRowGridCount, rowHeight);\r\n        this.isSlotEnd = [];\r\n        this.initializeState();\r\n    }\r\n\r\n    public sineInSlot(): Promise<void> {\r\n        let time = 0;\r\n        let sineInHeight = Math.floor(this.styleData.slotGridHeight / 2);\r\n        return new Promise<void>((resolve) => {\r\n            let index = 0;\r\n            for (let columnNode of this.slotColumnToTween) {\r\n                cc.tween(columnNode)\r\n                    .delay(time)\r\n                    .to((this.slotGirdSpeed * 1.5), {y: columnNode.y + sineInHeight}, {easing: 'quadOut'})\r\n                    .by(this.slotGirdSpeed, {y: -sineInHeight})\r\n                    .call(() => {\r\n                        index++;\r\n                        if (index === this.slotColumnToTween.length) {\r\n                            resolve();\r\n                        }\r\n                    })\r\n                    .start();\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    public runSlotAnimation(): Promise<void> {\r\n\r\n        return new Promise<void>((resolve) => {\r\n\r\n            let columnLength = this.slotColumnToTween.length;\r\n\r\n            AudioManager.instance.effectPlay(\"SlotTrun\");\r\n\r\n            for (let i = 0; i < columnLength; i++) {\r\n\r\n                if (i == columnLength - 1) {\r\n                    this.makeSlotAnimation(i, resolve);\r\n                    return;\r\n                }\r\n                this.makeSlotAnimation(i);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 開始執行格子輪播動畫\r\n     * 如果server未回傳正確答案,將持續隨機圖片無限跑\r\n     * @param index{number} 當前跑的是哪一列\r\n     * @param resolve 當跑完時回傳Promise 讓Api執行下一段方法\r\n     * @param numberOfTimes 監聽當前跑了幾輪,sever回傳答案後才開始計算圈數\r\n     */\r\n    private makeSlotAnimation(index: number, resolve?: () => void, numberOfTimes: number = 0) {\r\n\r\n        //緩動時間 = 當前一個格子的跑速 * 有幾個格子 * 當前是否加速(無加速 = 1)\r\n        let duration = this.slotGirdSpeed * this.slotRowGridCount / this.speed;\r\n\r\n        let node = this.slotColumnToTween[index];\r\n\r\n        //跑老虎機的每列\r\n        cc.tween(node)\r\n            .to(duration, {y: node.y - this.rowData[1]})\r\n            .call(() => {\r\n                //更新被Mask的Grid,將之移動到原位子\r\n\r\n                this.updateGridPosition(this.gridNodeToMap.get(index), index);\r\n\r\n                //如果server有回傳答案,將可進入停軸判斷\r\n                if (SlotGameManager.instance.isResultOk) {\r\n\r\n                    numberOfTimes++;\r\n\r\n                    // 假如當前需要即停,將直接停止slot\r\n                    if (this.isCanStop(index, resolve)) return;\r\n\r\n                    //如果當前是第一列,將判斷是否已達到需轉動的次數\r\n                    if (index == 0 && numberOfTimes == this.checkSlotTurnCount(index)) {\r\n\r\n                        this.showAnswer(index);\r\n                        this.isSlotEnd[index] = true;\r\n\r\n                    } else if (\r\n                        index != 0 &&\r\n                        this.isSlotEnd[index - 1] &&\r\n                        numberOfTimes == this.checkSlotTurnCount(index)\r\n                    ) {\r\n\r\n                        this.showAnswer(index, resolve);\r\n                        this.isSlotEnd[index] = true;\r\n                        this.setLookAtEventNotify(false, index);\r\n                        AudioManager.instance.effectPlay(\"SlotStop\");\r\n\r\n                    } else {\r\n                        this.makeSlotAnimation(index, resolve, numberOfTimes);\r\n                    }\r\n                } else {\r\n                    this.makeSlotAnimation(index, resolve, numberOfTimes);\r\n                }\r\n            })\r\n            .start();\r\n\r\n    }\r\n\r\n    private checkSlotTurnCount(index): number {\r\n\r\n        let count: number;\r\n\r\n        if (this.isSpeedUp) {\r\n            count = this.slotTurnCount;\r\n        } else if (this.checkLookAt(index)) {\r\n            count = index * 4 + this.slotTurnCount;\r\n            this.setLookAtEventNotify(true, index);\r\n        } else {\r\n            count = this.slotTurnCount + index;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    setLookAtEventNotify(isShow: boolean, index: number) {\r\n        if (this.isSlotEnd[index - 1] && this.checkLookAt(index)) {\r\n            ScrollFocusStateNotification.instance.notify(index, isShow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 檢查是否可以即停\r\n     */\r\n    isCanStop(index: number, resolve: () => void): boolean {\r\n\r\n        if (this.isSlotImmediateStop) {\r\n            this.showAnswer(index, resolve);\r\n            this.isSlotEnd[index] = true;\r\n            this.setLookAtEventNotify(false, index);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 更新輪播格子位置\r\n     * @param rowNodes 哪一列的 node 需要更換圖片位置\r\n     * @param columnIndex 當前是第幾列\r\n     */\r\n    private updateGridPosition(rowNodes: Array<cc.Node>, columnIndex: number) {\r\n\r\n        let rowLength = rowNodes.length - 1;\r\n        let random: number;\r\n        let lastSprite: cc.Sprite;\r\n        let end = this.rowData[0];\r\n\r\n        for (let i = rowLength; i > end; i--) {\r\n\r\n            lastSprite = this.gridSpriteToMap.get(columnIndex)[rowLength];\r\n\r\n            //將該列的陣列中的最後一個sprite 節點 更新到該陣列的第一個位置\r\n            this.gridSpriteToMap.get(columnIndex).unshift(lastSprite);\r\n\r\n            //刪除陣列中的最後一個 sprite 節點\r\n            this.gridSpriteToMap.get(columnIndex).pop();\r\n\r\n            //隨機一個數字\r\n            random = Math.floor(Math.random() * this.gridImg.size)\r\n\r\n            this.gridSpriteToMap.get(columnIndex)[0].spriteFrame =\r\n                this.gridImg.get(String(random));\r\n\r\n            //重新給予最後一個陣列中的node 更新 y 位置\r\n            rowNodes[rowLength].y = rowNodes[0].y + this.slotGridHeight;\r\n            //將該列的陣列中的最後一個node 節點 更新到該陣列的第一個位置\r\n            rowNodes.unshift(rowNodes[rowLength]);\r\n            //刪除陣列中的最後一個 node 節點\r\n            rowNodes.pop();\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 對該列顯示結果的同時,並給予彈跳效果\r\n     * @param {number} index : 哪一列\r\n     * @param resolve\r\n     */\r\n    private showAnswer(index: number, resolve?) {\r\n        this.updateGridAnswer(index);\r\n        //緩動時間 = 當前一個格子的跑速 * 有幾個格子 * 當前是否加速(無加速 = 1)\r\n        let duration = this.slotGirdSpeed * this.rowData[0] / this.speed;\r\n        let node = this.slotColumnToTween[index];\r\n\r\n        //跑老虎機的每列\r\n        cc.tween(node)\r\n            .to(duration, {y: node.y - this.rowData[1]})\r\n            .call(() => {\r\n                //更新被Mask的Grid,將之移動到原位子\r\n                this.updateGridPosition(this.gridNodeToMap.get(index), index);\r\n                this.sineOutAnimation(index, resolve);\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 檢查是否需要瞇牌\r\n     * @param index{number}:檢查該列是否需要瞇牌\r\n     * @return {boolean} : 如果需要瞇牌,返回true\r\n     * @private\r\n     */\r\n    private checkLookAt(index: number): boolean {\r\n\r\n        let lookAt: Array<number>;\r\n        let isShowLookAt: boolean;\r\n\r\n        if (SlotGameManager.instance.gameState === GameState.FREEING) {\r\n            lookAt = this.freeResult.LookAt;\r\n        } else {\r\n            lookAt = this.normalResult.LookAt;\r\n        }\r\n\r\n        isShowLookAt = !!lookAt[index];\r\n\r\n        return isShowLookAt;\r\n\r\n    }\r\n\r\n    /**\r\n     * 在答案顯示後,馬上給予回彈效果\r\n     * @param index{number} : 哪一列已經顯示答案完畢\r\n     * @param resolve{()=>void} : 當所有列都顯示答案且回彈效果完畢時,通知可以進行下一步\r\n     */\r\n    private sineOutAnimation(index: number, resolve: () => void) {\r\n\r\n        if ((this.isSpeedUp || this.isSlotImmediateStop) &&\r\n            index == this.slotColumnToTween.length - 1) {\r\n\r\n            AudioManager.instance.effectPlay(\"SlotStop\");\r\n        } else if (!this.isSpeedUp) {\r\n            AudioManager.instance.effectPlay(\"SlotStop\");\r\n        }\r\n\r\n        let sineOutHeight = Math.floor(this.styleData.slotGridHeight / 2);\r\n        let node = this.slotColumnToTween[index];\r\n        cc.tween(node)\r\n            .to((this.slotGirdSpeed), {y: node.y - sineOutHeight})\r\n            .by(this.slotGirdSpeed * 6, {y: +sineOutHeight}, {easing: 'bounceOut'})\r\n            .call(() => {\r\n\r\n                this.checkFreeIcon(index);\r\n\r\n                if (index === this.slotColumnToTween.length - 1) {\r\n                    AudioManager.instance.effectStop(\"SlotTrun\");\r\n                    resolve();\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 確認該軸是否有 free 圖標\r\n     * @param index\r\n     */\r\n    private freeIconCount: number;\r\n\r\n    checkFreeIcon(index) {\r\n\r\n        let gridAnswer: Array<number>;\r\n\r\n        if (SlotGameManager.instance.gameState === GameState.FREEING) {\r\n            gridAnswer = this.freeResult.Grid;\r\n        } else {\r\n            gridAnswer = this.normalResult.Grid;\r\n        }\r\n\r\n        let start = index * 3;\r\n        let end = start + 3;\r\n\r\n        for (start; start < end; start++) {\r\n            if (gridAnswer[start] == 10) {\r\n                this.freeIconCount++;\r\n                //如果非加速模式,對個別列蝶家事撥放數量增加時的個別音樂\r\n                if (!this.isSpeedUp) {\r\n                    AudioManager.instance.effectPlay(\r\n                        `getFreeIcon${this.freeIconCount}`\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        //如果是加速模式,直接拿取該slot中Free總數量需播放的音樂\r\n        if (this.isSpeedUp && this.freeIconCount >= 1\r\n            && index == this.slotColumnToTween.length - 1) {\r\n            AudioManager.instance.effectPlay(\r\n                `getFreeIcon${this.freeIconCount}`\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新正確答案\r\n     * 答案更新再每列最上面位置,等待掉下來,顯示正確答案給USER\r\n     * @param {number} index : 要更新哪一列最上面三個grid 為正確答案\r\n     * @private\r\n     */\r\n    private updateGridAnswer(index: number) {\r\n\r\n        let gridAnswer: Array<number>;\r\n\r\n        if (SlotGameManager.instance.gameState === GameState.FREEING) {\r\n            gridAnswer = this.freeResult.Grid;\r\n        } else {\r\n            gridAnswer = this.normalResult.Grid;\r\n        }\r\n\r\n        let start = index * this.slotRowGridCount;\r\n        let end = start + this.slotRowGridCount;\r\n        let gridIndex = 0;\r\n\r\n        for (start; start < end; start++) {\r\n\r\n            let answer = gridAnswer[start];\r\n\r\n            this.gridSpriteToMap.get(index)[gridIndex].spriteFrame\r\n                = this.gridImg.get(String(answer));\r\n\r\n            gridIndex++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化該輪所有狀態\r\n     */\r\n    public initializeState() {\r\n\r\n        this.isSlotImmediateStop = false;\r\n\r\n        this.isSpeedUp = this.speed > 1;\r\n\r\n        this.freeIconCount = 0;\r\n\r\n        if (!this.isSlotEnd) {\r\n            for (let i = 0; i < this.slotColumnToTween.length; i++) {\r\n                this.isSlotEnd.push(false);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < this.slotColumnToTween.length; i++) {\r\n                this.isSlotEnd[i] = false;\r\n            }\r\n        }\r\n    }\r\n}"]}