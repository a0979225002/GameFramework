{"version":3,"sources":["assets\\script\\Framework\\Template\\OverrideComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * @Author XIAO-LI-PIN\r\n * @Description (Override)擴展計時器方法,讓該class保存當前被計時器綁定且尚未釋放的方法\r\n * @Date 2021-05-28 上午 10:11\r\n * @Version 1.0\r\n */\r\nexport default class OverrideComponent extends cc.Component {\r\n    /**\r\n     * 保存當前使用中的計時器方法,如果該計時器執行完,會自動清空該方法\r\n     * @type {Array<Function>}\r\n     * @private\r\n     */\r\n    private readonly scheduleTag: Array<Function>;\r\n    constructor() {\r\n        super();\r\n        this.scheduleTag = new Array<Function>();\r\n    }\r\n\r\n    /**\r\n     * 獲取當前使用中的計時器\r\n     * @returns {Array<Function>}\r\n     */\r\n    getScheduleTag(): Array<Function> {\r\n        return this.scheduleTag;\r\n    }\r\n\r\n    /**\r\n     * 獲取當前還尚未釋放的計時器數量\r\n     * @returns {number}\r\n     */\r\n    getScheduleAmount(): number {\r\n        return this.scheduleTag.length;\r\n    }\r\n\r\n    /**\r\n     * 可選循環次數計時器,額外新增增加保存使用中的計時器方法,與原版cocos使用上並無差別\r\n     * @param {Function} callback : 返回方法\r\n     * @param {number} interval : 間格時間\r\n     * @param {number} repeat : 重複次數\r\n     * @param {number} delay : 延遲時間\r\n     */\r\n    schedule(callback: Function, interval?: number, repeat?: number, delay?: number) {\r\n        super.schedule(this.checkScheduleRepeat(callback,repeat), interval, repeat, delay);\r\n        this.scheduleTag.push(callback);\r\n    }\r\n\r\n    /**\r\n     * 確認當前計時器是否有使用重複次數\r\n     * @protected\r\n     */\r\n    protected checkScheduleRepeat(callback, repeat):Function{\r\n        if(repeat>0){\r\n            callback.prototype = ()=>{\r\n                repeat--;\r\n                if(repeat<0)this.unschedule(callback);\r\n                callback.apply(this);\r\n            }\r\n        }else {\r\n            return callback;\r\n        }\r\n        return callback.prototype;\r\n    }\r\n\r\n    /**\r\n     * 單次計時器,額外新增增加保存使用中的計時器方法,與原版cocos使用上並無差別\r\n     * @param {Function} callback : 返回方法\r\n     * @param {number} delay : 延遲時間\r\n     */\r\n    scheduleOnce(callback: Function, delay?: number) {\r\n        callback.prototype = ()=>{\r\n            this.unschedule(callback.prototype);\r\n            callback.apply(this);\r\n        }\r\n        this.schedule(callback.prototype, 0, 0, delay);\r\n    }\r\n\r\n    /**\r\n     * 清除單個計時器方法,額外新增刪除使用中的計時器紀錄,與原版cocos使用上並無差別\r\n     * @param {Function} callback\r\n     */\r\n    unschedule(callback: Function) {\r\n        super.unschedule(this.checkScheduleTag(callback));\r\n        let index = this.checkScheduleCallFunIndex(callback);\r\n        if(index>-1){\r\n            this.scheduleTag.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判斷當前方法是否正在等待計時器callback中\r\n     * @param {Function} callback :以綁定計時器的方法\r\n     * @returns {number} : 返回當前this.getScheduleTag[]執行中的index位置,如果該陣列內無該方法,返回-1\r\n     * @protected\r\n     */\r\n    protected checkScheduleCallFunIndex(callback:Function):number{\r\n        let index :number;\r\n        if(this.getScheduleTag().indexOf(callback)!=-1){\r\n            index = this.scheduleTag.indexOf(callback);\r\n        }else if(this.getScheduleTag().indexOf(callback.prototype)!=-1){\r\n            index = this.scheduleTag.indexOf(callback.prototype);\r\n        }else {\r\n            return -1;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 確認當前該方法以甚麼形式執行的,原型練 or 基礎方法\r\n     * @param {Function} callback\r\n     * @returns {Function} : 返回當前this.getScheduleTag[]內的該方法,如果該陣列內無該方法,返回undefined\r\n     * @protected\r\n     */\r\n    protected checkScheduleTag(callback:Function):Function{\r\n        let fun:Function = undefined;\r\n        let index = this.checkScheduleCallFunIndex(callback);\r\n        if(index>-1){\r\n            fun = this.scheduleTag[index];\r\n        }\r\n        return fun;\r\n    }\r\n\r\n    /**\r\n     * 清除當前所有使用中的計時器,額外新增清空計時器數量方法,與原版cocos使用上並無差別\r\n     */\r\n    unscheduleAllCallbacks() {\r\n        super.unscheduleAllCallbacks();\r\n        this.scheduleTag.length = 0;\r\n    }\r\n}"]}