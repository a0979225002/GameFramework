(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fcc,__read=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(n=i.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a},__spreadArray=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e},__awaiter=this&&this.__awaiter||function(e,a,s,c){return new(s=s||Promise)(function(r,t){function n(e){try{i(c.next(e))}catch(e){t(e)}}function o(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(n,o)}i((c=c.apply(e,a||[])).next())})},__generator=this&&this.__generator||function(r,n){var o,i,a,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(a=2&t[0]?i.return:t[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,t[1])).done)return a;switch(i=0,(t=a?[2&t[0],a.value]:t)[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=n.call(r,s)}catch(e){t=[6,e],i=0}finally{o=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},__extends=this&&this.__extends||function(){var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),__values=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return{value:(e=e&&n>=e.length?void 0:e)&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};!function(e){(e=(e=e.type||(e.type={})).ErrorType||(e.ErrorType={})).TYPE_FW="傳入的Type 錯誤 ,請檢察該Type是否非FarmWork內的Type",e.IS_RUNNING_FW="遊戲正在執行中,請勿重複呼叫",e.UNDEFINED_FW="變數為undefined,流程無法繼續",e.LOAD_FW="加載的資源有問題",e.ANIMATION_FW="Animation 類中方法有錯誤 : ",e.WEB_REQUEST_FW="WebRequest 類有錯誤 : ",e.WEB_RESPONSE_FW="WebResponse 類有錯誤 : ",e.AUDIO_FW="AUDIO 類有錯誤 :",e.SCENE_FW="Scene 類有錯誤 :",e.PROCESS_FW="process 類有錯誤 :",e.LISTENER_FW="Event 類有錯誤 :",e.SLOT_STYLE_FW="SlotStyleFW類有錯誤 :",e.TEMPLATE_FW="模板類有錯誤 :"}(fcc=fcc||{}),function(e){var t=(r.prototype.checkErrorType=function(e,t){throw new Error("例外錯誤 : "+e)},r);function r(e){this.configManager=e}e.UnknownError=t}(fcc=fcc||{}),function(r){var e=(t.prototype.checkErrorType=function(e,t){if(this.configManager.isFrameworkDebug)switch(e){case r.type.ErrorType.IS_RUNNING_FW:throw new Error(r.type.ErrorType.IS_RUNNING_FW+" "+t);case r.type.ErrorType.UNDEFINED_FW:throw new Error(r.type.ErrorType.UNDEFINED_FW+" "+t);case r.type.ErrorType.TYPE_FW:throw new Error(r.type.ErrorType.TYPE_FW+" "+t);case r.type.ErrorType.ANIMATION_FW:throw new Error(r.type.ErrorType.ANIMATION_FW+" "+t);case r.type.ErrorType.LOAD_FW:throw new Error(r.type.ErrorType.LOAD_FW+" "+t);case r.type.ErrorType.WEB_REQUEST_FW:throw new Error(r.type.ErrorType.WEB_REQUEST_FW+" "+t);case r.type.ErrorType.AUDIO_FW:cc.warn(r.type.ErrorType.AUDIO_FW+" "+t);break;case r.type.ErrorType.WEB_RESPONSE_FW:throw new Error(r.type.ErrorType.WEB_RESPONSE_FW+" "+t);case r.type.ErrorType.SCENE_FW:throw new Error(r.type.ErrorType.SCENE_FW+" "+t);case r.type.ErrorType.PROCESS_FW:throw new Error(r.type.ErrorType.PROCESS_FW+" "+t);case r.type.ErrorType.LISTENER_FW:throw new Error(r.type.ErrorType.LISTENER_FW+" "+t);case r.type.ErrorType.SLOT_STYLE_FW:throw new Error(r.type.ErrorType.SLOT_STYLE_FW+" "+t);case r.type.ErrorType.TEMPLATE_FW:throw new Error(r.type.ErrorType.TEMPLATE_FW+" "+t);default:this.unknownError.checkErrorType(e)}else console.log("有例外錯誤,但你未開啟框架Debug,無法查看")},t);function t(e){this.unknownError=new r.UnknownError(e),this.configManager=e}r.FrameWorkError=e}(fcc=fcc||{}),function(t){var e=(r.prototype.checkErrorType=function(e,t){if("string"==typeof e)this.frameWorkError.checkErrorType(e,t);else if(null===e)return this.checkObjectType(t)},r.prototype.checkObjectType=function(e){if(e&&0!=e)return typeof e;throw new Error("該物件為null")},r);function r(e){this.frameWorkError=new t.FrameWorkError(e)}t.ObjectError=e}(fcc=fcc||{}),function(i){var e=(t.prototype.showError=function(e,t,r,n){var o=this;null!=this.timeOut&&clearTimeout(this.timeOut),cc.Tween.stopAllByTarget(this.errorManager.errorNode),this.errorManager.errorButton.getComponent(cc.Button).interactable=!1,this.errorManager.errorNode.active=!1,this.errorManager.closeButton.active=!1,this.errorManager.errorNode||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorNode為空"),this.errorManager.errorLabel||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorLabel為空"),this.errorManager.errorButton||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorButton為空"),i.ErrorManager.errorState=!0,cc.tween(this.errorManager.errorNode).set({opacity:0,scale:1.3}).call(function(){o.errorManager.errorNode.active=!0}).to(.3,{opacity:255,scale:1},{easing:"sineIn"}).call(function(){o.errorManager.errorButton.getComponent(cc.Button).interactable=!0}).start(),this.errorManager.errorLabel.string=t,e?n?(this.errorManager.errorButton.active=n,this.errorManager.errorButtonLabel.string=r):this.errorManager.isShowBackHomeButton?(this.errorManager.errorButton.active=this.errorManager.isShowBackHomeButton,this.errorManager.errorButtonLabel.string=r):this.errorManager.errorButton.active=!1:this.errorManager.errorButton.active=!1,e||(this.timeOut=window.setTimeout(function(){i.ErrorManager.errorState=!1,o.errorManager.errorNode.active=!1,o.errorManager.errorButton.active=!1,o.timeOut=null},this.errorManager.errorDelayTime))},t);function t(e){this.timeOut=null,this.errorManager=e}i.ServerError=e}(fcc=fcc||{}),function(o){var e=(t.prototype.showError=function(e,t,r){var n=this;null!=this.timeout&&clearTimeout(this.timeout),this.errorManager.warningNode||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningNode為空"),this.errorManager.warningLabel||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningLabel為空"),0==this.errorManager.warningDelayTime&&this.errorManager.executeError("當前DelayTime = 0 : 請給予值"),o.ErrorManager.warningState=!0,this.errorManager.warningNode.active=!0,this.errorManager.warningLabel.string=t,e||(this.timeout=window.setTimeout(function(){o.ErrorManager.warningState=!1,n.errorManager.warningNode.active=!1},this.errorManager.warningDelayTime))},t);function t(e){this.timeout=null,this.errorManager=e}o.WarningError=e}(fcc=fcc||{}),function(r){var e=(t.prototype.checkErrorType=function(e,t){return this.objectError.checkErrorType(e,t)},t.prototype.checkServerError=function(e,t,r,n){this.serverError.showError(e,t,r,n)},t.prototype.checkWarning=function(e,t,r){this.warningError.showError(e,t,r)},t);function t(e,t){this.objectError=new r.ObjectError(e),this.serverError=new r.ServerError(t),this.warningError=new r.WarningError(t)}r.ErrorHandler=e}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.errorMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(!this._instance)throw new Error("ErrorManager類錯誤 :  該類尚未實例化");return this._instance},enumerable:!1,configurable:!0}),r.prototype.executeError=function(e,t){return this.handler.checkErrorType(e,t)},r.prototype.showErrorDialog=function(e,t,r,n){this.handler.checkServerError(e,t,r,n)},r.prototype.showWarningDialog=function(e,t,r){this.handler.checkWarning(e,t,r)},r.prototype.setErrorNode=function(e){return this._errorNode=e,this},r.prototype.setErrorLabel=function(e){return this._errorLabel=e,this},r.prototype.setErrorButton=function(e){return this._errorButton=e,this},r.prototype.setCloseButtonNode=function(e){return this._closeButton=e,this},r.prototype.setErrorDelayTime=function(e){return this._errorDelayTime=e,this},r.prototype.setWarningDelayTime=function(e){return this._warningDelayTime=e,this},r.prototype.setWarningNode=function(e){return this._warningNode=e,this},r.prototype.setWarningLabel=function(e){return this._warningLabel=e,this},r.prototype.setErrorButtonLabel=function(e){return this._errorButtonLabel=e,this},Object.defineProperty(r,"errorState",{get:function(){return this._errorState},set:function(e){this._errorState=e},enumerable:!1,configurable:!0}),Object.defineProperty(r,"warningState",{get:function(){return this._warningState},set:function(e){this._warningState=e},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorNode",{get:function(){return this._errorNode},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"warningNode",{get:function(){return this._warningNode},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorButton",{get:function(){return this._errorButton},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"warningLabel",{get:function(){return this._warningLabel},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorLabel",{get:function(){return this._errorLabel},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorDelayTime",{get:function(){return this._errorDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"warningDelayTime",{get:function(){return this._warningDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isShowBackHomeButton",{get:function(){return this._isShowBackHomeButton},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorButtonLabel",{get:function(){return this._errorButtonLabel},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"closeButton",{get:function(){return this._closeButton},enumerable:!1,configurable:!0}),r);function r(e){this.handler=new t.ErrorHandler(e,this),this.configManager=e,this._errorNode=null,this._errorLabel=null,this._errorDelayTime=2e3,this._warningDelayTime=1e3,r._errorState=!1,r._warningState=!1,this._isShowBackHomeButton=!!this.configManager.backHomeURL.trim()}t.ErrorManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AudioStateType||(e.AudioStateType={})).CLEAR_TO_REPLAY="CLEAR_TO_REPLAY",e.NOT_PLAYING="NOT_PLAYING",e.SUPERIMPOSE="SUPERIMPOSE"}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.roundOff=function(e,t){return Math.round(Math.round(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundDown=function(e,t){return Math.floor(Math.floor(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundUp=function(e,t){return Math.ceil(Math.ceil(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.decimalsCount=function(e){var t=String(e).indexOf(".")+1,e=String(e).length-t;return 0==t?0:e},t.numberFormat=function(e){return e<1e3?e+"":1e3<e?e/1e3+"K":void 0},t.format=function(e){return this.formatting.format(e)},t.formatting=new Intl.NumberFormat,e.Util=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LoadType||(e.LoadType={})).IMG="IMG",e.IMG_ATLAS="IMG_ATLAS",e.SPINE="SPINE",e.PREFAB="PREFAB",e.MUSIC="MUSIC",e.TEXT="TEXT",e.SCENE="SCENE",e.SCRIPT="SCRIPT",e.CSS="CSS"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).ASSET_MODE||(e.ASSET_MODE={}))[e.RESOURCES=0]="RESOURCES",e[e.IN_SIDE_BUNDLE=1]="IN_SIDE_BUNDLE",e[e.OUT_SIDE_MAIN_ASSET=2]="OUT_SIDE_MAIN_ASSET",e[e.OUT_SIDE_ASSET=3]="OUT_SIDE_ASSET"}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.eventMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),r.prototype.emitEvent=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this.target).emit.apply(t,__spreadArray([e],__read(r)))},r.prototype.eventListener=function(e,t,r,n){this._eventCount+=1,this._eventsCurrentlyBeing.set("severEvent",e),r?this.target.on(e,t,n):this.target.once(e,t,n)},r.prototype.destroyEvent=function(e,t){this.target.off(e,t,this.target)},r.prototype.hasListening=function(e){return this.target.hasEventListener(e)},Object.defineProperty(r.prototype,"eventCount",{get:function(){return this._eventCount},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"eventsCurrentlyBeing",{get:function(){return this._eventsCurrentlyBeing},enumerable:!1,configurable:!0}),r);function r(e){this.configManager=e,this._eventCount=0,this._eventsCurrentlyBeing=new Map,this.target=new cc.EventTarget}t.EventManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneStyleType||(e.SceneStyleType={})).AUTO="AUTO",e.HORIZONTAL="HORIZONTAL",e.VERTICAL="VERTICAL"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneDirectionType||(e.SceneDirectionType={})).PORTRAIT="PORTRAIT",e.LANDSCAPE="LANDSCAPE"}(fcc=fcc||{}),function(e){var t=(r.prototype.designSceneEventListener=function(t){var e=this;window.addEventListener("resize",function(){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.makeDesignScene(t)];case 1:return e.sent(),[2]}})})})},r.prototype.makeDesignScene=function(r){var n=this;return new Promise(function(e,t){n._isCanUpdateScene?(n._isCanUpdateScene=!1,setTimeout(function(){n.sceneManager.updateSize(),n._isCanUpdateScene=!0,e()},r)):n.configManager.isFrameworkDebug&&t("正在UpdateScene中 請稍後......")})},r);function r(e,t){this._isCanUpdateScene=!0,this.configManager=e,this.sceneManager=t}e.SceneSizeChangeListener=t}(fcc=fcc||{}),function(r){var e;function t(){this.observer=new Set}e=r.ABS||(r.ABS={}),t.prototype.subscribe=function(e,t){this.observer.has(e)?r.ErrorManager.instance.executeError(r.type.ErrorType.SCENE_FW,e+" 該IBaseObserver已註冊過自動狀態改變時事件,請檢查"):(e.isPermanent=t,this.observer.add(e))},t.prototype.unsubscribe=function(e){this.observer.has(e)?this.observer.delete(e):r.ErrorManager.instance.executeError(r.type.ErrorType.PROCESS_FW,e+" : 該觀察類尚未綁定過,無須移除觀察對象")},t.prototype.removeAll=function(){this.observer.clear()},t.prototype.getSubscribeCount=function(){return this.observer.size},t.prototype.getAllSubscribe=function(){return this.observer},e.ABaseNotification=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).NotificationType||(e.NotificationType={})).AUTO_CHANGE="AUTO_CHANGE",e.SPEED_CHANGE="SPEED_CHANGE",e.USER_MONEY_CHANGE="USER_MONEY_CHANGE",e.USER_BET_CHANGE="USER_BET_CHANGE",e.USER_GET_WIN="USER_GET_WIN",e.SCENE_DIRECTION_CHANGE="SCENE_DIRECTION_CHANGE",e.RESPONSE_RESULT="RESPONSE_RESULT",e.SCROLL_FOCUS_STATE="SCROLL_FOCUS_STATE",e.SLOT_ROW_END="SLOT_ROW_END",e.STOP_NOW="STOP_NOW"}(fcc=fcc||{}),function(e){var t=(r.prototype.pushNotification=function(e){this.callFun.call(this.self,e)},Object.defineProperty(r.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),r);function r(e,t){this._isPermanent=!1,this.self=t,this.callFun=e}e.SceneDirectionChangeObserver=t}(fcc=fcc||{}),function(t){var r,e=(r=t.ABS.ABaseNotification,__extends(n,r),n.prototype.subscribe=function(e,t){r.prototype.subscribe.call(this,e,t)},n.prototype.notify=function(e){var t,r;if(0<this.observer.size)try{for(var n=__values(this.observer),o=n.next();!o.done;o=n.next()){var i=o.value;i.pushNotification(e),i.isPermanent||this.unsubscribe(i)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},n);function n(){var e=r.call(this)||this;return e.TAG_NAME=t.type.NotificationType.SCENE_DIRECTION_CHANGE,e}t.SceneDirectionChangeNotification=e}(fcc=fcc||{}),function(t){var e=(r.prototype.executionStyle=function(e,t){var r,n;this.updateSceneDirection(),cc.view.getFrameSize().width/cc.view.getFrameSize().height>=e/t?(r=cc.view.getFrameSize().width*(e/cc.view.getFrameSize().height),cc.view.setDesignResolutionSize(r,t,cc.ResolutionPolicy.FIXED_HEIGHT)):cc.view.getFrameSize().width>cc.view.getFrameSize().height?(n=cc.view.getFrameSize().height*(e/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(e,n,cc.ResolutionPolicy.FIXED_WIDTH)):cc.view.getFrameSize().width/cc.view.getFrameSize().height>=1e3/1777?(n=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,n,cc.ResolutionPolicy.FIXED_HEIGHT)):(n=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,n,cc.ResolutionPolicy.FIXED_WIDTH))},r.prototype.updateSceneDirection=function(){cc.view.getFrameSize().width<cc.view.getFrameSize().height?this.sceneManager.sceneDirection!=t.type.SceneDirectionType.PORTRAIT&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.PORTRAIT,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.PORTRAIT)):this.sceneManager.sceneDirection!=t.type.SceneDirectionType.LANDSCAPE&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.LANDSCAPE,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.LANDSCAPE))},r);function r(e){this.sceneManager=e,t.NotificationManager.instance().hasNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE)?this.eventLock=!1:(this.eventLock=!0,console.log("你尚未綁定當遊戲方向更動時的推播事件,因此不會觸發方向改變的推播事件"))}t.AutoStyle=e}(fcc=fcc||{}),function(e){var t=(r.prototype.executionStyle=function(e,t){var r=cc.find("Canvas").getComponent(cc.Canvas);this.curDR||(this.curDR=cc.size(e,t));var n=this.curDR,o=cc.view.getFrameSize(),i=o.width,e=o.height,t=i,o=e;i/e>n.width/n.height?(r.fitHeight=!0,r.fitWidth=!1,t=(o=n.height)*i/e):(r.fitHeight=!1,r.fitWidth=!0,o=e/i*(t=n.width)),r.designResolution=cc.size(t,o),r.node.width=t,r.node.height=o},r);function r(){}e.HorizontalStyle=t}(fcc=fcc||{}),function(r){var e=(t.prototype.executionStyle=function(e,t){r.ErrorManager.instance.executeError("尚未完成直向是配模式")},t);function t(){}r.VerticalStyle=e}(fcc=fcc||{}),function(n){var e=(t.prototype.getStyle=function(e,t,r){switch(e){case n.type.SceneStyleType.AUTO:this.autoStyle||(this.autoStyle=new n.AutoStyle(this.sceneManager)),this.autoStyle.executionStyle(t,r);break;case n.type.SceneStyleType.HORIZONTAL:this.horizontalStyle||(this.horizontalStyle=new n.HorizontalStyle),this.horizontalStyle.executionStyle(t,r);break;case n.type.SceneStyleType.VERTICAL:this.verticalStyle||(this.verticalStyle=new n.VerticalStyle),this.verticalStyle.executionStyle(t,r);break;default:e.executionStyle(t,r)}},t);function t(e){this.sceneManager=e}n.SceneStyleHandler=e}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.sceneMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),r.prototype.setDesignWidth=function(e){return this._designWidth=e,this},r.prototype.setDesignHeight=function(e){return this._designHeight=e,this},r.prototype.updateSize=function(e){if(e)switch(this.style=e){case t.type.SceneStyleType.HORIZONTAL:this._sceneDirection=t.type.SceneDirectionType.PORTRAIT;break;case t.type.SceneStyleType.VERTICAL:this._sceneDirection=t.type.SceneDirectionType.LANDSCAPE;break;case t.type.SceneStyleType.AUTO:break;default:console.log("該更新模式尚未包含在框架中,請確認是否有實作ISceneStyle")}return this.sceneStyleHandler.getStyle(this.style,this._designWidth,this._designHeight),this},r.prototype.startListener=function(e){this.sceneSizeChangeListener.designSceneEventListener(e)},r.prototype.changeScene=function(e){t.LoadResManager.instance.sceneRes.has(e)||t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"加載不到你的Scene資源,請檢查該資源名是否正確"),cc.director.runScene(t.LoadResManager.instance.sceneRes.get(e))},r.prototype.removeScene=function(e){e.destroy()},Object.defineProperty(r.prototype,"sceneDirection",{get:function(){return this._sceneDirection},set:function(e){this._sceneDirection=e},enumerable:!1,configurable:!0}),r);function r(e){this.configManager=e,this._designWidth=1280,this._designHeight=720,this.sceneSizeChangeListener=new t.SceneSizeChangeListener(e,this),this.sceneStyleHandler=new t.SceneStyleHandler(this),this.style=t.type.SceneStyleType.HORIZONTAL}t.SceneManager=e}(fcc=fcc||{}),function(r){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),r.slotStyleMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;r.ErrorManager.instance.executeError(r.type.ErrorType.SLOT_STYLE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.setSlotTemplate=function(e){return this.template=e,this},t.prototype.setSlotStyle=function(e){return new e(this)},t.prototype.build=function(e){this.template||r.ErrorManager.instance.executeError(r.type.ErrorType.UNDEFINED_FW,"Slot Template 未賦予,需實做一個SlotTemplate");var t=new this.template(e,this.configManager);this._slot.set(e.tag,t),this._slotStyle.set(e.tag,e)},Object.defineProperty(t.prototype,"slot",{get:function(){return this._slot},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyle",{get:function(){return this._slotStyle},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this._slot=new Map,this._slotStyle=new Map}r.SlotStyleManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LanguageType||(e.LanguageType={})).TAIWAN="NTD",e.CHINESE="CNY",e.THAILAND="THB",e.AMERICA="USD",e.VIETNAM="VND",e.INDONESIA="IDR",e.MALAYSIA="MYR"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AutoType||(e.AutoType={}))[e.AUTO=-1]="AUTO",e[e.FREE_END=-2]="FREE_END",e[e.AUTO_50=50]="AUTO_50",e[e.AUTO_100=100]="AUTO_100",e[e.AUTO_500=500]="AUTO_500",e[e.AUTO_1000=1e3]="AUTO_1000"}(fcc=fcc||{}),function(e){var t=(Object.defineProperty(r,"instance",{get:function(){return this._instance||(this._instance=new r),this._instance},enumerable:!1,configurable:!0}),r.prototype.setGameNumber=function(e){return this._gameNumber=e,this},r.prototype.setMusicVolume=function(e){return this._musicVolume=e,this},r.prototype.setEffectVolume=function(e){return this._effectVolume=e,this},r.prototype.setMusicOnMute=function(e){return this._isMusicOnMute=e,this},r.prototype.setEffectOnMute=function(e){return this._isEffectOnMute=e,this},r.prototype.setAutoCont=function(e){return this._autoCount=e,this},r.prototype.setExternallyLoadURL=function(e){return this._externallyLoadURL=e,this},r.prototype.setLanguage=function(e){return this._language=e,this},r.prototype.setAutoState=function(e){return this._isAuto=e,this},r.prototype.setSpeedState=function(e){return this._isSpeedUp=e,this},r.prototype.setFrameWorkDebug=function(e){return this._isFrameworkDebug=e,this},r.prototype.setCocosDebug=function(e){return this._cocosDebugSetting=e,this},r.prototype.setBackHomeURL=function(e){return this._backHomeURL=e,this},r.prototype.build=function(){cc.debug._resetDebugSetting(this._cocosDebugSetting),e.ErrorManager.setInstance(this),e.AudioManager.setInstance(this),e.LanguageManager.setInstance(this),e.EventManager.setInstance(this),e.LoadResManager.setInstance(this),e.FSMManager.setInstance(this),e.SceneManager.setInstance(this),e.SlotStyleManager.setInstance(this)},Object.defineProperty(r.prototype,"externallyLoadURL",{get:function(){return this._externallyLoadURL},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"gameNumber",{get:function(){return this._gameNumber},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isAuto",{get:function(){return this._isAuto},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"autoCount",{get:function(){return this._autoCount},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isSpeedUp",{get:function(){return this._isSpeedUp},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"musicVolume",{get:function(){return this._musicVolume},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"effectVolume",{get:function(){return this._effectVolume},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"language",{get:function(){return this._language},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isFrameworkDebug",{get:function(){return this._isFrameworkDebug},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isEffectOnMute",{get:function(){return this._isEffectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isMusicOnMute",{get:function(){return this._isMusicOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"backHomeURL",{get:function(){return this._backHomeURL},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"cocosDebugSetting",{get:function(){return this._cocosDebugSetting},enumerable:!1,configurable:!0}),r);function r(){this._gameNumber=null,this._externallyLoadURL="",this._isAuto=!1,this._isSpeedUp=!1,this._autoCount=e.type.AutoType.AUTO,this._musicVolume=1,this._effectVolume=1,this._isMusicOnMute=!1,this._isEffectOnMute=!1,this._language=e.type.LanguageType.CHINESE,this._backHomeURL="",this._cocosDebugSetting=cc.debug.DebugMode.INFO,this._isFrameworkDebug=!0}e.SlotConfigManager=t}(fcc=fcc||{}),function(e){function t(e,t,r,n){this.scriptName=e,this.type=t,this.url=r,this.parameter=n}e=e.ABS||(e.ABS={}),t.head=document.getElementsByTagName("head")[0],e.ALoadScriptType=t}(fcc=fcc||{}),function(r){var o,e=(o=r.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=r.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".css"+this.parameter;r.LoadResManager.instance.scriptRes.has(t)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.rel="stylesheet",this.linkElem.type=this.type,this.linkElem.href=t,this.linkElem.onload=function(){r.LoadResManager.instance.scriptRes.add(t),r.ABS.ALoadScriptType.head.appendChild(e.linkElem),r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},r.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,r,n){n=o.call(this,e,t,r,n)||this;return n.linkElem=document.createElement("link"),n}r.CSSLoad=e}(fcc=fcc||{}),function(r){var o,e=(o=r.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=r.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".js"+this.parameter;r.LoadResManager.instance.scriptRes.has(t)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.type=this.type,this.linkElem.src=t,this.linkElem.onload=function(){r.LoadResManager.instance.scriptRes.add(t),r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},r.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,r,n){n=o.call(this,e,t,r,n)||this;return n.linkElem=document.createElement("script"),n}r.ScriptLoad=e}(fcc=fcc||{}),function(n){var e;function t(e){this.type=e.ccType,this.url=e.url,this.dataName=e.dataName,this.folder=e.folder,this.isMainLoad=e.isMainLoad,this.beforeProgress=0,this.assetBundle=cc.assetManager.getBundle(this.folder)}e=n.ABS||(n.ABS={}),t.prototype.loadResources=function(){this.type!==cc.SceneAsset?this.assetBundle.loadDir(this.url,this.type,this.loadResProgress.bind(this),this.loadResCallBack.bind(this)):this.assetBundle.loadScene(this.dataName,cc.SceneAsset,this.loadResProgress.bind(this),this.loadResCallBack.bind(this))},t.prototype.loadResCallBack=function(e,t){e?n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e):t instanceof cc.SceneAsset||0!=t.length||n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"無載入任何資源 "+this.url+" "),this.setResToManager(this.dataName,t)},t.prototype.loadResProgress=function(e,t){t=n.global.Util.roundDown(e/t,2);t>this.beforeProgress&&(this.updateManagerState(this.dataName,t=1<=t?.99:t,t-this.beforeProgress),this.beforeProgress=t)},t.prototype.updateProgressEnd=function(){this.isMainLoad?(n.LoadResManager.instance.initialLoadState.set(this.dataName,1),n.LoadResManager.instance.loadMainEventCallback(this.dataName,.01,1)):(n.LoadResManager.instance.secondaryLoadState.set(this.dataName,1),n.LoadResManager.instance.loadSecondaryEventCallback(this.dataName,1)),this.continueLoad()},t.prototype.continueLoad=function(){var e;n.LoadResManager.instance.currentLoadOrder.length&&(n.LoadResManager.instance.currentLoadOrder.shift(),0<n.LoadResManager.instance.currentLoadOrder.length&&(e=n.LoadResManager.instance.currentLoadOrder[0],n.LoadResManager.instance.executeLoad(e)))},t.prototype.updateManagerState=function(e,t,r){this.isMainLoad?(n.LoadResManager.instance.initialLoadState.set(e,t),n.LoadResManager.instance.loadMainEventCallback(e,r,t)):(n.LoadResManager.instance.secondaryLoadState.set(e,t),n.LoadResManager.instance.loadSecondaryEventCallback(e,t))},e.ALoadType=t}(fcc=fcc||{}),function(c){var e,t=(e=c.ABS.ALoadType,__extends(r,e),r.prototype.setResToManager=function(e,t){var r,n,o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s=a.value;o.set(s.name,s)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}c.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},r);function r(){return null!==e&&e.apply(this,arguments)||this}c.ImgLoad=t}(fcc=fcc||{}),function(c){var e,t=(e=c.ABS.ALoadType,__extends(r,e),r.prototype.setResToManager=function(e,t){var r,n;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value,s=a.name;c.LoadResManager.instance.musicRes.has(s)&&c.ErrorManager.instance.executeError(c.type.ErrorType.LOAD_FW,s+" 鍵值重複,請檢查該音樂資源是否已加載過"),c.LoadResManager.instance.musicRes.set(s,a)}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}this.updateProgressEnd()},r);function r(){return null!==e&&e.apply(this,arguments)||this}c.MusicLoad=t}(fcc=fcc||{}),function(s){var e,t=(e=s.ABS.ALoadType,__extends(r,e),r.prototype.setResToManager=function(e,t){var r,n;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value;if(s.LoadResManager.instance.prefabRes.has(a.name))return void s.ErrorManager.instance.executeError(s.type.ErrorType.LOAD_FW,a.name+" prefab名稱重複,請檢查是否有相同名稱prefab");s.LoadResManager.instance.prefabRes.set(a.name,a)}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}this.updateProgressEnd()},r);function r(){return null!==e&&e.apply(this,arguments)||this}s.PrefabLoad=t}(fcc=fcc||{}),function(r){var e,t=(e=r.ABS.ALoadType,__extends(n,e),n.prototype.setResToManager=function(e,t){r.LoadResManager.instance.scriptRes.has(e)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e+" 鍵值重複,請檢查該資源是否已加載過"),r.LoadResManager.instance.sceneRes.set(e,t),this.updateProgressEnd()},n);function n(){return null!==e&&e.apply(this,arguments)||this}r.SceneLoad=t}(fcc=fcc||{}),function(d){var e,t=(e=d.ABS.ALoadType,__extends(r,e),r.prototype.setResToManager=function(e,t){var r,n,o,i;d.LoadResManager.instance.spineRes.has(e)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,"請檢察資源是否以載入過,鍵值重複"),d.LoadResManager.instance.spineRes.set(e,t[0]);var a=e.toLowerCase().match("grid");try{for(var s=__values(t),c=s.next();!c.done;c=s.next()){var u=c.value,l=Object.keys(u.skeletonJson.animations),p=new Map;try{for(var f=(o=void 0,__values(l)),h=f.next();!h.done;h=f.next()){var y,g=h.value;!a||""===(y=g.replace(/[^0-9]/gi,""))?p.set(g,g):(p.has(y)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,g+" spine動畫取number有誤,請檢查該spine Animation是否有重複數字情況"),p.set(y,g))}}catch(e){o={error:e}}finally{try{h&&!h.done&&(i=f.return)&&i.call(f)}finally{if(o)throw o.error}}}}catch(e){r={error:e}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}this.updateProgressEnd()},r);function r(){return null!==e&&e.apply(this,arguments)||this}d.SpineLoad=t}(fcc=fcc||{}),function(p){var e,t=(e=p.ABS.ALoadType,__extends(r,e),r.prototype.setResToManager=function(e,t){var r,n,t=t[0].text.split(/[\s\n]/),o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s,c=a.value.split(","),u=c[0],l=c[1];""!=u&&(s=l.replace(/['"]/g,""),o.set(u,s))}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}p.LoadResManager.instance.readFileRes.set(e,o),this.updateProgressEnd()},r);function r(){return null!==e&&e.apply(this,arguments)||this}p.TextLoad=t}(fcc=fcc||{}),function(i){var e=(t.prototype.loadOutSideBundle=function(n){var o=this;return new Promise(function(r){if(o.assetBundles.has(n.bundleName))return r();var e={version:n.version};cc.assetManager.loadBundle(n.bundleURL,e,function(e,t){e&&i.ErrorManager.instance.executeError(i.type.ErrorType.LOAD_FW,e),o.assetBundles.set(n.bundleName,t),r()})})},t.prototype.loadInSideBundle=function(e,t,r){var n=this;return new Promise(function(r){if(n.assetBundles.has("secondaryRes"))return r();cc.assetManager.loadBundle("secondaryRes",function(e,t){e&&i.ErrorManager.instance.executeError(i.type.ErrorType.LOAD_FW,e),n.assetBundles.set("secondaryRes",t),r()})})},t.prototype.executeLoad=function(e,t,r){this.checkLoadType({dataName:e,type:t,url:r,folder:"resources",isMainLoad:!0,ccType:void 0})},t.prototype.executeLoadBundle=function(r,n,o){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadInSideBundle(r,n,o)];case 1:return e.sent(),t={dataName:r,type:n,url:o,folder:"secondaryRes",isMainLoad:!1,ccType:void 0},this.checkLoadType(t),[2]}})})},t.prototype.executeLoadOutSideBundle=function(r){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadOutSideBundle(r)];case 1:return e.sent(),t={dataName:r.name,type:r.loadType,url:r.url,folder:r.bundleName,isMainLoad:!1,ccType:void 0},this.checkLoadType(t),[2]}})})},t.prototype.executeMainLoadOutSideBundle=function(r){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadOutSideBundle(r)];case 1:return e.sent(),t={dataName:r.name,type:r.loadType,url:r.url,folder:r.bundleName,isMainLoad:!0,ccType:void 0},this.checkLoadType(t),[2]}})})},t.prototype.checkLoadType=function(e){switch(e.type){case i.type.LoadType.IMG:e.ccType=cc.SpriteFrame,new i.ImgLoad(e).loadResources();break;case i.type.LoadType.IMG_ATLAS:e.ccType=cc.SpriteAtlas,new i.ImgAtlasLoad(e).loadResources();break;case i.type.LoadType.MUSIC:e.ccType=cc.AudioClip,new i.MusicLoad(e).loadResources();break;case i.type.LoadType.PREFAB:e.ccType=cc.Prefab,new i.PrefabLoad(e).loadResources();break;case i.type.LoadType.SPINE:e.ccType=sp.SkeletonData,new i.SpineLoad(e).loadResources();break;case i.type.LoadType.SCENE:e.ccType=cc.SceneAsset,new i.SceneLoad(e).loadResources();break;case i.type.LoadType.TEXT:e.ccType=cc.TextAsset,new i.TextLoad(e).loadResources();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"資源類型錯誤,尚無此類型載入方法")}},t.prototype.executeLoadExternalScript=function(e,t,r,n){switch(t){case i.type.LoadType.CSS:new i.CSSLoad(e,"text/css",r,n).loadScript();break;case i.type.LoadType.SCRIPT:new i.ScriptLoad(e,"text/javascript",r,n).loadScript();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"LoadType 無法偵測")}},t);function t(e,t){this.configManager=t,this.loadResManager=e,this.assetBundles=new Map}i.LoadTypeFactory=e}(fcc=fcc||{}),function(r){var e=(t.prototype.executeLoad=function(e,t,r){this.checkRepeatTheName(e),this.loadResManager.initialLoadState.set(e,null),this.factory.executeLoad(e,t,r)},t.prototype.executeLoadBundle=function(t,r,n){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t),this.loadResManager.secondaryLoadState.set(t,null),[4,this.factory.executeLoadBundle(t,r,n)];case 1:return e.sent(),[2]}})})},t.prototype.executeMainLoadOutSideBundle=function(t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t.name),this.loadResManager.initialLoadState.set(t.name,null),[4,this.factory.executeMainLoadOutSideBundle(t)];case 1:return e.sent(),[2]}})})},t.prototype.executeLoadOutSideBundle=function(t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t.name),this.loadResManager.secondaryLoadState.set(t.name,null),[4,this.factory.executeLoadOutSideBundle(t)];case 1:return e.sent(),[2]}})})},t.prototype.checkRepeatTheName=function(e){this.loadResManager.initialLoadState.has(e)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e+" 此(主資源)已載入過了,或名稱重複,請檢察"),this.loadResManager.secondaryLoadState.has(e)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e+" 此(次資源)已載入過了,或名稱重複,請檢察")},t.prototype.executeLoadExternalScript=function(e,t,r,n){this.factory.executeLoadExternalScript(e,t,r,n)},t);function t(e,t){this.loadResManager=e,this.factory=new r.LoadTypeFactory(e,t)}r.LoadTypeHandler=e}(fcc=fcc||{}),function(o){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),o.loadMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;o.ErrorManager.instance.executeError(o.type.ErrorType.LOAD_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.loadMainEventCallback=function(e,t,r){this.onlyResEventCallback(e,r),this.allProgress+=t/this.count,1<=this.allProgress&&(this.allProgress=.99),1==r&&(this.allProgressEndCount+=1,this.allProgressEndCount==this.count&&(this.allProgress=1)),this.callFun.has(null)&&(o.global.Util.roundDown(this.beforeProgress,2)==o.global.Util.roundDown(this.allProgress,2)||(this.beforeProgress=this.allProgress,this.callFun.get(null)(o.global.Util.roundDown(this.allProgress,2)),1<=this.allProgress&&(this.count=0,this.callFun.delete(null))))},t.prototype.loadSecondaryEventCallback=function(e,t){this.onlyResEventCallback(e,t)},t.prototype.loadScriptEventCallback=function(e,t){this.onlyResEventCallback(e,1,t)},t.prototype.onlyResEventCallback=function(e,t,r){var n;this.callFun.has(e)&&(n=this.callFun.get(e),1==t&&this.callFun.delete(e),r?n(t,r):n(t))},t.prototype.loadAsset=function(e,t,r,n){return this.count+=1,n&&(r=r+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeLoad(e,t,r),this.currentLoadOrder.push({name:e,loadType:t,url:r,assetMode:o.type.ASSET_MODE.RESOURCES}),this},t.prototype.loadBundle=function(e,t,r,n){return n&&(r=r+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeLoadBundle(e,t,r).then(),this.currentLoadOrder.push({name:e,loadType:t,url:r,assetMode:o.type.ASSET_MODE.IN_SIDE_BUNDLE}),this},t.prototype.loadMainOutSideAsset=function(e){return this.count+=1,e.isLanguageUsed&&(e.url=e.url+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeMainLoadOutSideBundle(e).then(),this.currentLoadOrder.push(e),this},t.prototype.loadOutSideAsset=function(e){return e.isLanguageUsed&&(e.url=e.url+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeLoadOutSideBundle(e).then(),this.currentLoadOrder.push(e),this},t.prototype.executeLoad=function(e){switch(e.assetMode){case o.type.ASSET_MODE.RESOURCES:this.loadTypeHandler.executeLoad(e.name,e.loadType,e.url);break;case o.type.ASSET_MODE.IN_SIDE_BUNDLE:this.loadTypeHandler.executeLoadBundle(e.name,e.loadType,e.url).then();break;case o.type.ASSET_MODE.OUT_SIDE_MAIN_ASSET:this.loadTypeHandler.executeMainLoadOutSideBundle(e).then();break;case o.type.ASSET_MODE.OUT_SIDE_ASSET:this.loadTypeHandler.executeLoadOutSideBundle(e).then()}},t.prototype.callback=function(e,t){if(t){if(!this.callFun.has(t))return this.callFun.set(t,e),this;o.ErrorManager.instance.executeError(o.type.ErrorType.LOAD_FW,"如果拿取該資源進度,請勿重複callback")}else this.callFun.has(null)?o.ErrorManager.instance.executeError(o.type.ErrorType.LOAD_FW,"如果拿取總進度,請勿在之前資源尚未加載完前,重複callback"):this.callFun.set(null,e)},t.prototype.getLoadState=function(e,t){return t?1==this._initialLoadState.get(e):1==this._secondaryLoadState.get(e)},t.prototype.loadExternalScript=function(e,t,r,n){return this.loadTypeHandler.executeLoadExternalScript(e,t,r,n=void 0===n?"":n),this},t.prototype.remove=function(e){switch(e){case o.type.LoadType.SPINE:this.spineRes.clear();break;case o.type.LoadType.MUSIC:this.musicRes.clear();break;case o.type.LoadType.PREFAB:this.prefabRes.clear();break;case o.type.LoadType.SCENE:this.sceneRes.clear();break;case o.type.LoadType.TEXT:this.readFileRes.clear()}},Object.defineProperty(t.prototype,"initialLoadState",{get:function(){return this._initialLoadState},set:function(e){this._initialLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"secondaryLoadState",{get:function(){return this._secondaryLoadState},set:function(e){this._secondaryLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"imgRes",{get:function(){return this._imgRes},set:function(e){this._imgRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spineRes",{get:function(){return this._spineRes},set:function(e){this._spineRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"readFileRes",{get:function(){return this._readFileRes},set:function(e){this._readFileRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"prefabRes",{get:function(){return this._prefabRes},set:function(e){this._prefabRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicRes",{get:function(){return this._musicRes},set:function(e){this._musicRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptRes",{get:function(){return this._scriptRes},set:function(e){this._scriptRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sceneRes",{get:function(){return this._sceneRes},set:function(e){this._sceneRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptLoadState",{get:function(){return this._scriptLoadState},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.loadTypeHandler=new o.LoadTypeHandler(this,e),this._initialLoadState=new Map,this._secondaryLoadState=new Map,this._scriptLoadState=new Map,this._imgRes=new Map,this._spineRes=new Map,this._readFileRes=new Map,this._prefabRes=new Map,this.callFun=new Map,this._musicRes=new Map,this._scriptRes=new Set,this._sceneRes=new Map,this.count=0,this.allProgress=0,this.beforeProgress=0,this.allProgressEndCount=0,this.currentLoadOrder=new Array}o.LoadResManager=e}(fcc=fcc||{}),function(o){var i;(e=i=i||{})[e.STOP=-1]="STOP",e[e.PLAYING=1]="PLAYING",e[e.PAUSE=2]="PAUSE";var e=(t.prototype.play=function(e,t){var r=t.get("volume"),n=t.get("loop"),t=cc.audioEngine.getState(this.musicID);o.LoadResManager.instance.musicRes.has(e)?t!=i.PAUSE?(t==i.PLAYING&&this.stop(),t=o.LoadResManager.instance.musicRes.get(e),n=cc.audioEngine.playMusic(t,n),cc.audioEngine.setVolume(n,r),this.musicID=n):cc.audioEngine.resume(this.musicID):o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(){cc.audioEngine.setVolume(this.musicID,0),cc.audioEngine.stop(this.musicID)},t.prototype.pause=function(){cc.audioEngine.getState(this.musicID)==cc.audioEngine.AudioState.PLAYING&&cc.audioEngine.pause(this.musicID)},t);function t(){this.musicID=null}o.MusicController=e}(fcc=fcc||{}),function(a){var e=(t.prototype.play=function(e,t){var r=t.get("volume"),n=t.get("canSuperimpose"),o=t.get("loop"),i=this.effectID.get(e),t=cc.audioEngine.getState(i)!=cc.audioEngine.AudioState.ERROR;a.LoadResManager.instance.musicRes.has(e)?n===a.type.AudioStateType.NOT_PLAYING&&t||(n===a.type.AudioStateType.CLEAR_TO_REPLAY&&t&&cc.audioEngine.stop(i),i=a.LoadResManager.instance.musicRes.get(e),o=cc.audioEngine.playEffect(i,o),cc.audioEngine.setVolume(o,r),this.effectID.set(e,o)):a.ErrorManager.instance.executeError(a.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(e){this.effectID.has(e)&&(cc.audioEngine.stop(this.effectID.get(e)),this.effectID.delete(e))},t.prototype.stopAll=function(){var t,e;try{for(var r=__values(this.effectID.keys()),n=r.next();!n.done;n=r.next()){var o=n.value;cc.audioEngine.stop(this.effectID.get(o))}}catch(e){t={error:e}}finally{try{n&&!n.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}this.effectID.clear()},t);function t(){this.effectID=new Map}a.EffectController=e}(fcc=fcc||{}),function(i){var e=(t.prototype.initializeData=function(){this.musicNormalData=new Map,this.effectNormalData=new Map,this.musicNormalData.set("volume",this.musicVolume),this.musicNormalData.set("loop",this.loop),this.effectNormalData.set("canSuperimpose",i.type.AudioStateType.NOT_PLAYING),this.effectNormalData.set("volume",this.effectVolume),this.effectNormalData.set("loop",this.loop)},t.prototype.settingMusic=function(e,t,r){void 0===t&&(t=this.musicVolume),void 0===r&&(r=this.loop);var n=new Map;n.set("volume",t),n.set("loop",r),this.musicData.set(e,n)},t.prototype.settingEffect=function(e,t,r,n){void 0===t&&(t=i.type.AudioStateType.NOT_PLAYING),void 0===r&&(r=this.musicVolume),void 0===n&&(n=this.loop);var o=new Map;o.set("canSuperimpose",t),o.set("volume",r),o.set("loop",n),this.effectData.set(e,o)},t.prototype.musicPlay=function(e){e.trim()&&(this.audioManager.musicOnMute||(this.musicData.has(e)?this.musicController.play(e,this.musicData.get(e)):(this.musicData.set(e,this.musicNormalData),this.musicController.play(e,this.musicNormalData))))},t.prototype.effectPlay=function(e){e.trim()&&(this.audioManager.effectOnMute||(this.effectData.has(e)?this.effectController.play(e,this.effectData.get(e)):(this.effectData.set(e,this.effectNormalData),this.effectController.play(e,this.effectNormalData))))},t.prototype.musicStop=function(){this.musicController.stop()},t.prototype.musicPause=function(){this.musicController.pause()},t.prototype.effectStop=function(e){this.effectController.stop(e)},t.prototype.effectStopAll=function(){this.effectController.stopAll()},t.prototype.getMusicState=function(e){return this.musicData.get(e)},t.prototype.getEffectState=function(e){return this.effectData.get(e)},t);function t(e,t){this.audioManager=e,this.configManager=t,this.musicVolume=this.configManager.musicVolume,this.effectVolume=this.configManager.effectVolume,this.canSuperimpose=!1,this.musicOnMute=this.configManager.isMusicOnMute,this.effectOnMute=this.configManager.isEffectOnMute,this.loop=!1,this.musicData=new Map,this.effectData=new Map,this.musicController=new i.MusicController,this.effectController=new i.EffectController,this.initializeData()}i.AudioFactory=e}(fcc=fcc||{}),function(o){var i=(t.setInstance=function(e){this._instance||(this._instance=new t(e),o.audioMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.settingMusic=function(e,t,r){return this.factory.settingMusic(e,t,r),this},t.prototype.settingEffect=function(e,t,r,n){return t===o.type.AudioStateType.SUPERIMPOSE&&n&&o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 使用疊加效果時不建議使用循環撥放"),this.factory.settingEffect(e,t,r,n),this},t.prototype.musicPlay=function(e){this.factory.musicPlay(e)},t.prototype.effectPlay=function(e){this.factory.effectPlay(e)},t.prototype.musicStop=function(){this.factory.musicStop()},t.prototype.musicPause=function(){this.factory.musicPause()},t.prototype.effectStop=function(e){this.factory.effectStop(e)},t.prototype.effectStopAll=function(){this.factory.effectStopAll()},t.prototype.getMusicState=function(e){return this.factory.getMusicState(e)},t.prototype.getEffectState=function(e){return this.factory.getEffectState(e)},t.prototype.updateEffectOnMute=function(){return this._effectOnMute=!this._effectOnMute,this._effectOnMute&&this.factory.effectStopAll(),this._effectOnMute},t.prototype.updateMusicOnMute=function(){return this._musicOnMute=!this._musicOnMute,this._musicOnMute&&this.musicPause(),this._musicOnMute},Object.defineProperty(t.prototype,"effectOnMute",{get:function(){return this._effectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicOnMute",{get:function(){return this._musicOnMute},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.factory=new o.AudioFactory(this,e),this._effectOnMute=this.configManager.isEffectOnMute,this._musicOnMute=this.configManager.isMusicOnMute}o.AudioManager=i,o.Music=function(o){return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicPlay(o),n.call.apply(n,__spreadArray([this],__read(e)))}}},o.MusicStop=function(){return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicStop(),n.call.apply(n,__spreadArray([this],__read(e)))}}},o.Effect=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectPlay(e)}),n.call.apply(n,__spreadArray([this],__read(e)))}}},o.EffectStop=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectStop(e)}),n.call.apply(n,__spreadArray([this],__read(e)))}}}}(fcc=fcc||{}),function(p){var e={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},t={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},r={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},n={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},o={fontSize:30,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},i={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},a={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},s=(c.setInstance=function(e){this._instance||(this._instance=new c(e),p.languageMgr=this._instance)},Object.defineProperty(c,"instance",{get:function(){if(this._instance)return this._instance;p.ErrorManager.instance.executeError(p.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),c.prototype.initDefaultStyle=function(){this._style.set(p.type.LanguageType.TAIWAN,t),this._style.set(p.type.LanguageType.CHINESE,e),this._style.set(p.type.LanguageType.AMERICA,r),this._style.set(p.type.LanguageType.INDONESIA,i),this._style.set(p.type.LanguageType.THAILAND,o),this._style.set(p.type.LanguageType.MALAYSIA,a),this._style.set(p.type.LanguageType.VIETNAM,n)},c.prototype.addStyle=function(e,t){this._style.set(e,t)},c.prototype.updateLanguage=function(e){var t,r,n,o;if(this._nowLang!=e){this._nowLang=e;try{for(var i=__values(this.allLanguageLabel),a=i.next();!a.done;a=i.next()){var s=a.value;try{for(var c=(n=void 0,__values(s.keys())),u=c.next();!u.done;u=c.next()){var l=u.value,p=s.get(l);this.updateText(l,p)}}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=c.return)&&o.call(c)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}this.updateStyle(!1)}},c.prototype.setLanguage=function(e){this.languageCache||(this.languageCache=e[this._nowLang])},c.prototype.getLanguage=function(){return this._nowLang},c.prototype.getText=function(e){return this.languageCache[e]},c.prototype.getAllText=function(){return this.languageCache},c.prototype.reTakeLanguageBuffer=function(e,t){try{this.languageCache=t?e[t]:e[this._nowLang]}catch(e){console.log("window.language_Mode 查找不到該語系",e)}},c.prototype.removeStringBuffer=function(){},c.prototype.updateText=function(e,t){return t&&(e.string=this.getText(t)),this._nowLanguageLabels.set(e,t),this},c.prototype.updateStyle=function(e,t){var r,n,o=this._nowLang;this._style.has(this._nowLang)||(o=p.type.LanguageType.AMERICA);var i=this._style.get(o).fontFamily,a=t||this._style.get(o).fontSize,s=this._style.get(o).lineHeight;try{for(var c=__values(this._nowLanguageLabels.keys()),u=c.next();!u.done;u=c.next()){var l=u.value;l.fontFamily=i,l.fontSize=a,l.lineHeight=s}}catch(e){r={error:e}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(r)throw r.error}}e&&this.allLanguageLabel.push(this._nowLanguageLabels),this._nowLanguageLabels.clear()},c);function c(e){this.configManager=e,this._style=new Map,this.allLanguageLabel=new Array,this._nowLanguageLabels=new Map,this.initDefaultStyle(),this._nowLang=this.configManager.language}p.LanguageManager=s}(fcc=fcc||{}),function(t){var e=(r.instance=function(){return this._instance||(this._instance=new r),this._instance},r.prototype.setNotification=function(e){return this.notificationToMap.has(e.TAG_NAME)||this.notificationToMap.set(e.TAG_NAME,e),this},r.prototype.getNotification=function(e){if(this.notificationToMap.has(e))return this.notificationToMap.get(e);t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,e+" :  該key尚未加入推撥事件中,你需先執行 setNotification(type:IBaseNotification)方法")},r.prototype.hasNotification=function(e){return this.notificationToMap.has(e)},r.prototype.getAllNotifications=function(){return this.notificationToMap},r);function r(){this.notificationToMap=new Map}t.NotificationManager=e}(fcc=fcc||{}),function(e){var t=(r.prototype.getName=function(){return this.name},r.prototype.get=function(){return 0<this.pool.size()?this.pool.get():this.getNode()},r.prototype.getNode=function(){return this.prefab?cc.instantiate(this.prefab):(console.error(" 預製體沒有賦值 "),null)},r.prototype.size=function(){return this.pool.size()},r.prototype.put=function(e){this.pool.put(e)},r.prototype.clear=function(){this.pool.clear()},r);function r(e,t,r){this.name=e,this.pool=new cc.NodePool,this.prefab=t;for(var n=0;n<r;n++){var o=this.getNode();this.pool.put(o)}}e.CCNodePool=t}(fcc=fcc||{}),function(e){var t=(r.prototype.get=function(){return 0<this.list.length?this.list.shift():this.pool.get()},r.prototype.getPool=function(){return this.pool},r.prototype.size=function(){return this.pool.size()+this.list.length},r.prototype.put=function(e,t){(t=void 0===t?!1:t)?this.pool.put(e):(this.list.push(e),e.stopAllActions(),e.active=!1)},r.prototype.clear=function(){this.pool.clear(),this.list.length=0},r);function r(e){this.list=[],this.pool=e}e.SelfPool=t}(fcc=fcc||{}),function(n){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.init=function(e,t,r){this.pools.has(e)||this.pools.set(e,new n.SelfPool(new n.CCNodePool(e,t,r)))},t.prototype.getPool=function(e){return this.pools.get(e).getPool()},t.prototype.get=function(e){if(this.pools.has(e)){var t=this.pools.get(e).get();return this.nameMap.has(t)||this.nameMap.set(t,e),t}return null},t.prototype.put=function(e,t){var r=this.nameMap.get(e);this.pools.has(r)?(this.pools.get(r).put(e,t),this.nameMap.delete(e)):cc.warn(" not have name ",r," ,go.name ",e.name)},t.prototype.clear=function(e){this.pools.has(e)&&(this.pools.get(e).clear(),this.pools.delete(e))},t.prototype.clearAll=function(){for(var e in this.pools)this.clear(e);this.pools.clear()},t);function t(){this.pools=new Map,this.nameMap=new Map}n.NodePoolManager=e}(fcc=fcc||{}),function(e){e.configMgr=e.SlotConfigManager.instance,e.nodePoolMgr=e.NodePoolManager.instance,e.notificationMgr=function(){return e.NotificationManager.instance()}}(fcc=fcc||{}),globalThis.fcc=fcc,globalThis.FCC_VERSION="1.0.1",function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.FSMMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.PROCESS_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),r.prototype.initialState=function(e){this.stateHandler.initialState(e)},r.prototype.initStateAction=function(e){this.stateHandler.initStateAction(e)},r.prototype.changeState=function(e){this.stateHandler.changeState(e)},r.prototype.previousMoveState=function(e){this.stateHandler.previousMoveState(e)},r.prototype.getCurrentStateContent=function(){return this.stateHandler.getCurrentStateContent()},r.prototype.getAllProcess=function(){return this.stateHandler.getAllProcess()},r.prototype.getCurrentState=function(){return this.stateHandler.getCurrentState()},r.prototype.getPreviousState=function(){return this.stateHandler.getPreviousState()},r.prototype.getStateRecord=function(){return this.stateHandler.getStateRecord()},r.prototype.clearStateRecord=function(){return this.stateHandler.clearStateRecord()},r.prototype.isExecution=function(){return this.stateHandler.isExecution()},r.prototype.start=function(t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.stateHandler.start(t)];case 1:return e.sent(),[2]}})})},r.prototype.exit=function(){this.stateHandler.exit()},r.prototype.builder=function(){return this.stateHandler.builder()},r);function r(e){this.configManager=e,this.isExecutingState=!1,this.stateHandler=new t.StateHandler}t.FSMManager=e}(fcc=fcc||{}),function(t){var e=(r.prototype.canReachNext=function(e){return!!this._nextState.has(e)||(t.errorMgr.executeError(t.type.ErrorType.PROCESS_FW,"無法跳轉至該流程 : "+e+" 當前狀態能跳轉的流程 : "+this._nextState+" "),!1)},Object.defineProperty(r.prototype,"currentState",{get:function(){return this._currentState},enumerable:!1,configurable:!0}),r);function r(e,t){this._currentState=e,this._nextState=t}t.ProcessTransition=e}(fcc=fcc||{}),function(s){var e=(t.prototype.setMaxStateRecordCount=function(e){return this.maxStateRecordCount=e,this},t.prototype.setState=function(e,t){if(!this.stateHandler.stateActionContainer.has(e))return this.stateHandler.stateActionContainer.set(e,t),this;s.errorMgr.executeError(s.type.ErrorType.PROCESS_FW,"添加的狀態名稱重複,請更換狀態名稱 : "+e)},t.prototype.build=function(){for(var t,e,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];try{for(var o=__values(r),i=o.next();!i.done;i=o.next()){var a=i.value;this.stateHandler.processContainer.has(a.currentState)?s.errorMgr.executeError(s.type.ErrorType.PROCESS_FW,"添加重複流程 : "+a.currentState):this.stateHandler.processContainer.set(a.currentState,a)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}this.stateHandler.stateRecorder||(this.stateHandler.stateRecorder=new s.StatusRecorder(this.maxStateRecordCount))},t);function t(e){this.maxStateRecordCount=5,this.stateHandler=e}s.StateBuilder=e}(fcc=fcc||{}),function(n){var e=(t.prototype.initialState=function(e){this.stateActionContainer.has(e)?(this.stateRecorder.updateStateRecord(e),this.stateActionContainer.get(e).onExecution()):n.errorMgr.executeError(n.type.ErrorType.PROCESS_FW,"當前狀態不存在 : "+e)},t.prototype.initStateAction=function(e){var t,r;if(e)this.stateActionContainer.get(e).onCreate();else try{for(var n=__values(this.stateActionContainer.values()),o=n.next();!o.done;o=n.next())o.value.onCreate()}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},t.prototype.changeState=function(e){this.stateRecorder?this.processContainer.get(this.stateRecorder.getCurrentState()).canReachNext(e)&&(this.stateRecorder.updateStateRecord(e),this.stateActionContainer.get(this.stateRecorder.getCurrentState()).onExecution()):n.errorMgr.executeError(n.type.ErrorType.PROCESS_FW,"你尚未初始預設狀態 : 請先執行 initialState()")},t.prototype.previousMoveState=function(e){this.stateRecorder.updatePreviousState()&&e&&this.stateActionContainer.get(this.stateRecorder.getCurrentState()).onExecution()},t.prototype.getCurrentStateContent=function(){if(this.stateRecorder)return this.stateActionContainer.get(this.stateRecorder.getCurrentState());n.errorMgr.executeError(n.type.ErrorType.PROCESS_FW,"當前無使用任何狀態,回傳為NULL")},t.prototype.getAllProcess=function(){return this.processContainer},t.prototype.getCurrentState=function(){return this.stateRecorder?this.stateRecorder.getCurrentState():null},t.prototype.getPreviousState=function(){return this.stateRecorder?this.stateRecorder.getPreviousState():null},t.prototype.getStateRecord=function(){return this.stateRecorder?this.stateRecorder.getNowStateRecords():null},t.prototype.clearStateRecord=function(){return this.stateRecorder?this.stateRecorder.clearRecord():null},t.prototype.isExecution=function(){return!!this.resolve},t.prototype.start=function(t){var r=this;return new Promise(function(e){r.resolve?n.errorMgr.executeError(n.type.ErrorType.PROCESS_FW,"流程尚未結束,請先釋放流程"):(r.resolve=e,r.changeState(t))})},t.prototype.exit=function(){this.resolve&&(this.resolve(),this.resolve=null)},t.prototype.builder=function(){return new n.StateBuilder(this)},t);function t(){this.stateActionContainer=new Map,this.processContainer=new Map}n.StateHandler=e}(fcc=fcc||{}),function(e){var t=(r.prototype.updateStateRecord=function(e){this.statePointer<this.maxRecordCount?(this.record[this.statePointer]=e,this.statePointer++):(this.record.shift(),this.record.push(e)),this.previousState=this.currentState,this.currentState=e},r.prototype.updatePreviousState=function(){return this.statePointer<=1||!this.previousState?(cc.warn("已經無法在返回上一個狀態"),!1):(this.currentState=this.record[this.statePointer-2],this.record[this.statePointer-1]=null,this.statePointer--,this.statePointer<3?this.previousState=null:this.previousState=this.record[this.statePointer-3],!0)},r.prototype.getCurrentState=function(){return this.currentState},r.prototype.getPreviousState=function(){return this.previousState||null},r.prototype.getNowStateRecords=function(){return this.record},r.prototype.clearRecord=function(){var e=this.record;return this.record=new Array(this.maxRecordCount),e},r);function r(e){this.record=new Array(e),this.maxRecordCount=e,this.statePointer=0}e.StatusRecorder=t}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.addButtonEvent=function(e,t,r,n){var o=r.node,i=cc.js.getClassName(r),r=new cc.Component.EventHandler;r.target=o,r.component=i,r.handler=t,!n&&0!=n||(r.customEventData=n),e.clickEvents.push(r)},t.disableButton=function(e){e.interactable=!1},t.enableButton=function(e){e.interactable=!0},t.addTouchStartEvent=function(e,t,r,n){e.on(cc.Node.EventType.TOUCH_START,t,r,n)},t.offTouchStartEvent=function(e,t,r,n){e.off(cc.Node.EventType.TOUCH_START,t,r,n)},e.Button=t}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.getNodeOneChildren=function(e){for(var t=new Map,r=0;r<e.childrenCount;r++)for(var n=e.children[r],o=0;o<=n.childrenCount;o++)t.set(e.children[r].name,n);return t},t.getNodeTowChildren=function(e){for(var t=new Map,r=0;r<e.childrenCount;r++)for(var n=e.children[r],o=n.children[r].name,i=0;i<=n.childrenCount;i++)0==i?t.set(n.children[r].name,n):(o+="/"+n.children[i-1].name,t.set(o,n.children[i-1]),o=n.children[r].name);return t},e.Prefab=t}(fcc=fcc||{}),function(e){var t=(r.prototype.get=function(e){return 0<this.buffList.length?this.buffList.shift():e()},r.prototype.put=function(e){this.buffList.push(e)},r.prototype.size=function(){return this.buffList.length},r.prototype.destroy=function(){this.buffList.length=0},r);function r(e){this.buffList=[],this.key=e}e.ObjectPool=t}(fcc=fcc||{}),function(r){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.get=function(e,t){return this.map.has(e)||this.map.set(e,new r.ObjectPool(e)),this.map.get(e).get(t)},t.prototype.put=function(e,t){this.map.has(e)&&this.map.get(e).put(t)},t.prototype.size=function(e){return this.map.has(e)?this.map.get(e).size():0},t.prototype.destroy=function(){this.map.clear()},t);function t(){this.map=new Map}r.PoolManager=e}(fcc=fcc||{}),function(e){var t=(r.prototype.getClassName=function(){return this.className},r.prototype.get=function(e){return(0<this.pool.length?this.pool.shift():null)||new e},r.prototype.put=function(e){this.pool.push(e)},r.prototype.clear=function(){this.pool=[]},r);function r(e,t,r){void 0===r&&(r=0),this.pool=[],this.className=e;for(var n=0;n<r;n++)this.pool.push(new t)}e.TSObjectPool=t}(fcc=fcc||{}),function(n){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.init=function(e,t,r){void 0===r&&(r=1),this.pools[e]||this.pools.set(e,new n.TSObjectPool(e,t,r))},t.prototype.get=function(e,t,r){return void 0===r&&(r=1),this.pools.has(e)||this.pools.set(e,new n.TSObjectPool(e,t,r)),this.pools.get(e).get(t)},t.prototype.put=function(e,t){e=this.pools.get(e);e&&e.put(t)},t);function t(){this.pools=new Map}n.TSPoolManager=e}(fcc=fcc||{}),(fcc||(fcc={})).ABaseSlotTemplate=function(e,t){},function(e){(e=(e=e.type||(e.type={})).ServerEventType||(e.ServerEventType={})).BET_RESULT="BET_RESULT",e.FREE_SPIN_RESULT="FREE_SPIN_RESULT",e.CAN_PLAY_GAME="CAN_PLAY_GAME",e.GET_GAME_HISTORY_RESULT="GET_GAME_HISTORY_RESULT",e.GET_HISTORY_DETAIL_RESULT="GET_HISTORY_DETAIL_RESULT",e.GROUP_ID="GROUP_ID",e.TABLE_INFO="TABLE_INFO",e.WARNING="WARNING"}(fcc=fcc||{}),function(l){var e,t=(e=l.ABS.ALoadType,__extends(r,e),r.prototype.setResToManager=function(e,t){var r,n,o=new Map;try{for(var i=__values(t[0].getSpriteFrames()),a=i.next();!a.done;a=i.next()){var s,c,u=a.value;-1!=e.toLowerCase().indexOf("grid")?(s=u.name.replace(/[^0-9]/gi,""),o.set(s,u)):(c=u.name,o.set(c,u))}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}l.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},r);function r(){return null!==e&&e.apply(this,arguments)||this}l.ImgAtlasLoad=t}(fcc=fcc||{}),function(e){function t(e,t){this._isPermanent=!1,this._self=t,this._callFun=e}e=e.ABS||(e.ABS={}),t.prototype.pushNotification=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];(e=this._callFun).call.apply(e,__spreadArray([this._self],__read(t)))},Object.defineProperty(t.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),e.ABaseObserver=t}(fcc=fcc||{}),function(e){function t(e){this._slotStyleManager=e}e=e.ABS||(e.ABS={}),t.prototype.setTag=function(e){return this._tag=e,this},t.prototype.setSlotTurnCount=function(e){return this._slotTurnCount=e,this},t.prototype.setSlotGridHeight=function(e){return this._slotGridHeight=e,this},t.prototype.setSlotGirdSpeed=function(e){return this._slotGirdSpeed=e,this},t.prototype.setSpeedUpMultiple=function(e){return this._speedUpMultiple=e,this},t.prototype.setStopNowSpeedMultiple=function(e){return this._stopNowSpeedMultiple=e,this},t.prototype.setSlotRowGridCount=function(e){return this._slotRowGridCount=e,this},t.prototype.setColumnIntervalTime=function(e){return this._columnIntervalTime=e,this},t.prototype.setSlotColumnToTween=function(e){return this._slotColumnToTween=e,this},t.prototype.setGridNodeToMap=function(e){return this._gridNodeToMap=e,this},t.prototype.setSineInEasing=function(e){return this._sineInEasing=e,this},t.prototype.setSineOutEasing=function(e){return this._sineOutEasing=e,this},t.prototype.setLookAtSpeed=function(e){return this._lookAtSpeed=e,this},t.prototype.setSlotRowTime=function(e){return this._slotRowTime=e,this},t.prototype.setLookAtTime=function(e){return this._lookAtTime=e,this},t.prototype.setResultModel=function(e){return this._resultModel=e,this},t.prototype.complete=function(){this._slotStyleManager.build(this)},Object.defineProperty(t.prototype,"columnIntervalTime",{get:function(){return this._columnIntervalTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gridNodeToMap",{get:function(){return this._gridNodeToMap},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotColumnToTween",{get:function(){return this._slotColumnToTween},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGirdSpeed",{get:function(){return this._slotGirdSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGridHeight",{get:function(){return this._slotGridHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowGridCount",{get:function(){return this._slotRowGridCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotTurnCount",{get:function(){return this._slotTurnCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"speedUpMultiple",{get:function(){return this._speedUpMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stopNowSpeedMultiple",{get:function(){return this._stopNowSpeedMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyleManager",{get:function(){return this._slotStyleManager},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tag",{get:function(){return this._tag},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resultModel",{get:function(){return this._resultModel},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sineInEasing",{get:function(){return this._sineInEasing},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sineOutEasing",{get:function(){return this._sineOutEasing},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtSpeed",{get:function(){return this._lookAtSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowTime",{get:function(){return this._slotRowTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtTime",{get:function(){return this._lookAtTime},enumerable:!1,configurable:!0}),e.ABaseSlotSetting=t}(fcc=fcc||{}),function(e){var t,r=(t=e.ABS.ABaseSlotSetting,__extends(n,t),n.prototype.setGridImg=function(e){return this._gridImg=e,this},n.prototype.setGirdSpriteToMap=function(e){return this._gridSpriteToMap=e,this},Object.defineProperty(n.prototype,"gridSpriteToMap",{get:function(){return this._gridSpriteToMap},enumerable:!1,configurable:!0}),n.prototype.setResultModel=function(e){return t.prototype.setResultModel.call(this,e)},Object.defineProperty(n.prototype,"gridImg",{get:function(){return this._gridImg},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"resultModel",{get:function(){return this._resultModel},enumerable:!1,configurable:!0}),n);function n(){return null!==t&&t.apply(this,arguments)||this}e.NormalSetting=r}(fcc=fcc||{}),function(e){var t,r=(t=e.NormalSetting,__extends(n,t),n.prototype.setSymbolBlurImg=function(e){return this._symbolBlurImg=e,this},Object.defineProperty(n.prototype,"symbolBlurImg",{get:function(){return this._symbolBlurImg},enumerable:!1,configurable:!0}),n);function n(){return null!==t&&t.apply(this,arguments)||this}e.NormalBlurImageSetting=r}(fcc=fcc||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

},{}]},{},[1])