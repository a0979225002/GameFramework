{"version":3,"sources":["assets\\script\\Framework\\Listener\\IEventManager.ts"],"names":[],"mappings":"","file":"","sourceRoot":"/","sourcesContent":["import {GameEventType} from './Enum/gameEventType'\r\nimport {ServerEventType} from './Enum/ServerEventType'\r\n\r\nexport default interface IEventManager {\r\n\r\n    /**\r\n     * 事件總數量\r\n     */\r\n    eventCount: number;\r\n\r\n    /**\r\n     * 當前正在監聽那些事件;\r\n     */\r\n    eventsCurrentlyBeing: Map<string, ServerEventType | GameEventType>;\r\n\r\n    /**\r\n     * 添加事件\r\n     * @param eventTarget\r\n     * @param {string} eventName\r\n     * @param {any} any : 要回傳的物件\r\n     */\r\n    setEvent(eventTarget: cc.EventTarget, eventName: ServerEventType | GameEventType, ...any: any):void;\r\n\r\n    /**\r\n     * game接收監聽事件\r\n     * @param {string} eventName\r\n     * @param {Function} callFun\r\n     * @param {boolean} isOnce : 是否使用一次性監聽\r\n     */\r\n    gameEventListener(eventName: GameEventType, callFun: (...target: any) => void, isOnce: boolean):void;\r\n\r\n    /**\r\n     * server監聽回傳接收\r\n     * @param {string} eventName\r\n     * @param {Function} callFun\r\n     * @param {boolean} isOnce : 是否使用一次性監聽\r\n     */\r\n    serverEventListener(eventName: ServerEventType, callFun: (target?: any) => void, isOnce: boolean):void;\r\n\r\n    /**\r\n     * 刪除事件,綁定的回傳也一並刪除\r\n     * @param {ServerEventType | GameEventType} eventName\r\n     * @param {cc.EventTarget} eventTarget\r\n     * @param callFun\r\n     * @param target\r\n     */\r\n    destroyEvent(eventName: ServerEventType | GameEventType, eventTarget: cc.EventTarget, callFun?: Function, target?: Object):void;\r\n\r\n    /**\r\n     * 該事件是否持續監聽中\r\n     * @param {ServerEventType | GameEventType} eventName\r\n     * @param eventTarget\r\n     * @return {boolean}\r\n     */\r\n    hasListening(eventName: ServerEventType | GameEventType, eventTarget): boolean;\r\n\r\n}"]}