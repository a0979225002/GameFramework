{"version":3,"sources":["assets\\script\\Framework\\LoadResources\\ILoad\\ILoadResManager.ts"],"names":[],"mappings":"","file":"","sourceRoot":"/","sourcesContent":["import {LoadType} from \"../Enum/LoadEnum\";\r\n\r\nexport default interface ILoadResManager {\r\n\r\n    /**\r\n     * 初始加載物件\r\n     */\r\n    initialLoadState :Map<string,number>;\r\n\r\n    /**\r\n     * 次加載,可以在還未加載完成時,也能進入MainGame Scene\r\n     */\r\n    secondaryLoadState : Map<string, number>;\r\n\r\n    /**\r\n     * img物件保存\r\n     */\r\n    imgRes : Map<string,Map<string,cc.SpriteFrame>>;\r\n\r\n    /**\r\n     * spine 物件保存\r\n     */\r\n    spineRes : Map<string,sp.SkeletonData>;\r\n\r\n    /**\r\n     * 讀取後的文件檔案,保存位置\r\n     */\r\n    readFileRes : Map<string,Map<string,string>>;\r\n\r\n    /**\r\n     * 讀取後的Prefab,保存位置\r\n     */\r\n    prefabRes:Map<string,cc.Prefab>;\r\n\r\n    /**\r\n     * 音樂保存位置\r\n     */\r\n    musicRes:Map<string,cc.AudioClip>;\r\n\r\n    /**\r\n     * 場景保存位置\r\n     */\r\n    sceneRes:Map<string,cc.SceneAsset>;\r\n\r\n\r\n    /**\r\n     * 外部腳本保存URL地址,單存判斷是否重複加載\r\n     * @type {Set<string>}\r\n     */\r\n    scriptRes:Set<string>;\r\n\r\n    /**\r\n     * 主資源加載物件,監聽是否有callback,隨之返回該狀態\r\n     * @param name\r\n     * @param progress 又加載了多少\r\n     * @param state 該物件加載到幾趴\r\n     */\r\n    loadMainEventCallback(name: string, progress:number, state:number):void;\r\n\r\n    /**\r\n     * 次資源加載物件,監聽是否有callback,隨之返回該狀態\r\n     * 注意,該狀態無總資源監聽回傳事件\r\n     * @param {string} name\r\n     * @param {number} state\r\n     */\r\n    loadSecondaryEventCallback(name: string, state: number):void;\r\n\r\n    /**\r\n     * 加載該資料夾底下所有資源\r\n     * 注意: 需存放於 resources中\r\n     * @param {string} name\r\n     * @param {LoadType} type\r\n     * @param {string} url\r\n     * @param {boolean} isLanguageUsed\r\n     * @returns {this}\r\n     */\r\n    loadAsset(name : string,type : LoadType , url : string,isLanguageUsed?:boolean):this;\r\n\r\n\r\n    /**\r\n     * 加載該 assetBundle 底下資源\r\n     * 使用此方法者,加載狀態存放次加載中 secondaryLoadState\r\n     * 注意:須於UI勾選配置為Bundle資料夾\r\n     * @param {string} name\r\n     * @param {LoadType} type\r\n     * @param {string} url\r\n     * @returns {this}\r\n     */\r\n    loadBundle(name: string, type: LoadType, url: string):this;\r\n\r\n    /**\r\n     * 保存使用者要callback的方法,當有回傳進度時將透過 loadEventCallback方法回傳進度\r\n     * @param {(progress: number) => void} callFun\r\n     * @param {string} methodName\r\n     * @returns {this}: methodName 未使用情況,回傳 void\r\n     */\r\n    callback(callFun: (progress:number)=> void,methodName?: string):this;\r\n\r\n    /**\r\n     * 載入外部腳本\r\n     * @param {string} name\r\n     * @param {LoadType} type\r\n     * @param {string} url\r\n     * @returns {this}\r\n     */\r\n    loadExternalScript(name: string, type: LoadType, url: string):this;\r\n\r\n    /**\r\n     * 查看該資源是否已加載完畢\r\n     * @param name\r\n     * @param isMainResources\r\n     */\r\n    getLoadState(name:string,isMainResources:boolean): boolean;\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    reset():void;\r\n\r\n}"]}