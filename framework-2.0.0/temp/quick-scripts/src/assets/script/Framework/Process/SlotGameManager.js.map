{"version":3,"sources":["assets\\script\\Framework\\Process\\SlotGameManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {AutoType} from '../Config/Enum/ConfigEnum'\r\nimport {UserBetPoint, ISlotConfigManager} from \"../Config/IConfig/ISlotConfigManager\";\r\nimport {ErrorType} from '../Error/Enum/ErrorManagerEnum'\r\nimport ErrorManager from '../Error/ErrorManager'\r\nimport {GameState, GameType} from './Enum/GameState'\r\nimport AutoStateChangeNotification from \"./GameNotification/AutoStateChangeNotification\";\r\nimport SpeedStateChangeNotification from \"./GameNotification/SpeedStateChangeNotification\";\r\nimport UserMoneyChangeNotification from \"./GameNotification/UserMoneyChangeNotification\";\r\nimport UserTotalBetChangeNotification from \"./GameNotification/UserTotalBetChangeNotification\";\r\nimport AutoStateChangeObserver from \"./GameObserver/AutoStateChangeObserver\";\r\nimport SpeedStateChangeObserver from \"./GameObserver/SpeedStateChangeObserver\";\r\nimport UserMoneyChangeObserver from \"./GameObserver/UserMoenyChangeObserver\";\r\nimport UserTotalBetChangeObserver from \"./GameObserver/UserTotalBetChangeObserver\";\r\nimport GameProcessFactory from \"./GameProcessFactory\";\r\nimport {IGameProcessFactory} from \"./IGameProcessFactory\";\r\nimport ISlotGameManager from './ISlotGameManager'\r\n\r\n/**\r\n * @Author XIAO-LI-PIN\r\n * @Description (介面)遊戲管理器,管理當前流程,遊戲當前狀態\r\n * @Date 2021-05-14 下午 03:44\r\n * @Version 1.1\r\n */\r\nexport default class SlotGameManager implements ISlotGameManager {\r\n\r\n    private static _instance: ISlotGameManager\r\n    private configManager: ISlotConfigManager;\r\n    private _gameState: GameState;\r\n    private _autoType: AutoType;\r\n    private _isAutoState: boolean;\r\n    private _isSpeedUp: boolean;\r\n    private _automaticRemainingCount: number;\r\n    private _userMoney: number;\r\n    private readonly _userBetPoint: UserBetPoint;\r\n    private _isResultOk: boolean;\r\n    private inExecution: boolean\r\n    private gameProcessFactory: IGameProcessFactory;\r\n    private userMoneyChangeObserver: UserMoneyChangeObserver;\r\n    private userTotalBetChangeObserver: UserTotalBetChangeObserver;\r\n    private autoStateChangeObserver: AutoStateChangeObserver;\r\n    private speedStateChangeObserver: SpeedStateChangeObserver;\r\n\r\n    private constructor(configManager: ISlotConfigManager) {\r\n\r\n        this.configManager = configManager;                                                             //獲取ConfigManger,雙向綁定\r\n        this.gameProcessFactory = new GameProcessFactory(this);                                         //初始化流程工廠\r\n        this._gameState = GameState.STANDBY;                                                            //初始遊戲狀態\r\n        this._autoType = this.configManager.autoCount;                                                  //初始自動次數\r\n        this._isAutoState = this.configManager.isAuto;                                                  //初始自否自動\r\n        this._isSpeedUp = this.configManager.isSpeedUp;                                                 //初始是否加速\r\n        this._automaticRemainingCount = this.configManager.autoCount;                                   //初始自動剩餘次數\r\n        this._userBetPoint = this.configManager.userBet;                                                //初始玩家押住\r\n        this._isResultOk = false;                                                                       //初始尚未獲取server 該局資料\r\n        this.inExecution = false;                                                                       //初始尚未開使執行流程\r\n        UserMoneyChangeNotification                                                                     //訂閱用戶更新金額時,回傳推播事件\r\n            .instance.subscribe(this.getUserMoneyChangeObserver(), true);\r\n        UserTotalBetChangeNotification                                                                  //訂閱用戶更新更換押注時,回傳推播事件\r\n            .instance.subscribe(this.getUserTotalBetChangeObserver(), true);\r\n        AutoStateChangeNotification                                                                     //訂閱用戶更動自動狀態時,回傳推播事件\r\n            .instance.subscribe(this.getAutoStateChangeObserver(), true);\r\n        SpeedStateChangeNotification                                                                    //訂閱用戶更新自動狀態時,回傳推播事件\r\n            .instance.subscribe(this.getSpeedStateChangeObserver(), true);\r\n    }\r\n\r\n    /**\r\n     *  懶漢加載\r\n     *  初始化,只讓一個專案只有一次產生此class\r\n     */\r\n    public static setInstance(configManager: ISlotConfigManager) {\r\n        if (!this._instance) {\r\n            this._instance = new SlotGameManager(configManager);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  獲取已經初始化的靜態實例class\r\n     */\r\n    public static get instance(): ISlotGameManager {\r\n        if (!this._instance) {\r\n            ErrorManager.instance.executeError(ErrorType.GameProcessFW, \"該類尚未實例化\");\r\n            return;\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    setProcess(gameType: GameType | string, process: IProcess): this {\r\n        this.gameProcessFactory.setProcess(gameType, process);\r\n        return this;\r\n    }\r\n\r\n    setInitialProcess(gameType: GameType | string) {\r\n        this.gameProcessFactory.changeProcess(gameType);\r\n    }\r\n\r\n    changeProcess(gameType: GameType | string) {\r\n        this.gameProcessFactory.changeProcess(gameType);\r\n    }\r\n\r\n    public play(): Promise<void> {\r\n        return new Promise<void>(async (resolve) => {\r\n            if (!this.inExecution) {\r\n                this.processState(true);//流程開始\r\n                await this.gameProcessFactory.useProcess();\r\n                this.processState(false);//流程循環結束\r\n                resolve();\r\n            } else {\r\n                ErrorManager.instance.executeError(ErrorType.ProcedureFW, \"流程尚未結束,請勿重複執行\");\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 遊戲流程開始與結束時的狀態\r\n     * @param {boolean} state : 流程開始 or 流程結束\r\n     * @private\r\n     */\r\n    private processState(state: boolean) {\r\n        if (state) {\r\n            this._isResultOk = false;\r\n            this.inExecution = true;\r\n        } else {\r\n            this.inExecution = false;\r\n            this._isResultOk = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 拿取Framework內用戶更新金額時,推播給框架的綁定者\r\n     * 注意:如果取消框架內的訂閱者,框架內的參數將無法自動更新,需手動自行更新\r\n     */\r\n    public getUserMoneyChangeObserver(): UserMoneyChangeObserver {\r\n        if (!this.userMoneyChangeObserver) {\r\n            this.userMoneyChangeObserver = new UserMoneyChangeObserver((money) => {\r\n                this._userMoney = money;\r\n            }, this);\r\n        }\r\n        return this.userMoneyChangeObserver;\r\n    }\r\n\r\n    /**\r\n     * 拿取Framework內用戶更換押注時,推播給框架的綁定者\r\n     * 注意:如果取消框架內的訂閱者,框架內的參數將無法自動更新,需手動自行更新\r\n     */\r\n    public getUserTotalBetChangeObserver(): UserTotalBetChangeObserver {\r\n        if (!this.userTotalBetChangeObserver) {\r\n            this.userTotalBetChangeObserver = new UserTotalBetChangeObserver((beforeIndex, afterIndex) => {\r\n                this._userBetPoint.LineBet = afterIndex;\r\n            }, this);\r\n        }\r\n        return this.userTotalBetChangeObserver;\r\n    }\r\n\r\n    /**\r\n     * 拿取Framework內用戶更新auto狀態時,推播給框架的綁定者\r\n     * 注意:如果取消框架內的訂閱者,框架內的參數將無法自動更新,需手動自行更新\r\n     */\r\n    public getAutoStateChangeObserver(): AutoStateChangeObserver {\r\n        if (!this.autoStateChangeObserver) {\r\n            this.autoStateChangeObserver = new AutoStateChangeObserver((isAutomaticState, beforeAutoCount, afterAutoCount) => {\r\n                this._autoType = afterAutoCount;\r\n                this._isAutoState = isAutomaticState;\r\n            }, this);\r\n        }\r\n        return this.autoStateChangeObserver;\r\n    }\r\n\r\n    /**\r\n     * 拿取Framework內用戶更新加速狀態時,推播給框架的綁定者\r\n     * 注意:如果取消框架內的訂閱者,框架內的參數將無法自動更新,需手動自行更新\r\n     */\r\n    public getSpeedStateChangeObserver(): SpeedStateChangeObserver {\r\n        if (!this.speedStateChangeObserver) {\r\n            this.speedStateChangeObserver = new SpeedStateChangeObserver((isSpeedUp) => {\r\n                this._isSpeedUp = isSpeedUp;\r\n            }, this);\r\n        }\r\n        return this.speedStateChangeObserver;\r\n    }\r\n\r\n    /**\r\n     * 更新當前玩家押注金額\r\n     * 如需同步,建議使用推播事件更新\r\n     * @param {number} betIndex\r\n     * @returns {UserBetPoint}\r\n     */\r\n    updateUserBetPoint(betIndex: number): UserBetPoint {\r\n        this._userBetPoint.LineBet = betIndex;\r\n        return this._userBetPoint;\r\n    }\r\n\r\n    /**\r\n     * 更新當前auto次數\r\n     * 如果需要同步所有auto次數,建議使用推播事件更新\r\n     * @param {AutoType} autoType\r\n     * @returns {AutoType}\r\n     */\r\n    updateAutoCount(autoType: AutoType): AutoType {\r\n        this._autoType = autoType;\r\n        return this._autoType;\r\n    }\r\n\r\n    /**\r\n     * 更動當前自動狀態\r\n     * 如果是自動狀態,將會更動為非自動\r\n     * 如果是非自動狀態,將會更動自動\r\n     * 如果需要同步所有auto狀態,建議綁定推播事件更新\r\n     * @returns {boolean}\r\n     */\r\n    updateAuto(): boolean {\r\n        this._isAutoState = !this._isAutoState;\r\n        if (this._isAutoState) {\r\n            this._automaticRemainingCount = this._autoType;\r\n        }\r\n        return this.isAutoState;\r\n    }\r\n\r\n    /**\r\n     * 更新當前速度\r\n     * 如果是加速狀態,將會更動為不加速\r\n     * 如果無加速狀態,將會更動加速狀態\r\n     * 如果需要同步所有auto狀態,建議綁定推播事件更新\r\n     * @returns {boolean}\r\n     */\r\n    updateSpeed(): boolean {\r\n        this._isSpeedUp = !this._isSpeedUp;\r\n        return this._isSpeedUp;\r\n    }\r\n\r\n    /**\r\n     * 清除堵塞狀態\r\n     * 注意:清除該狀態後,該次的流程即使尚未執行完,也能執行下次流程\r\n     */\r\n    remake() {\r\n        this.processState(false);\r\n    }\r\n\r\n    public set gameState(value: GameState) {\r\n        this._gameState = value\r\n    }\r\n\r\n    public get gameState(): GameState {\r\n        return this._gameState\r\n    }\r\n\r\n    public get autoType(): AutoType {\r\n        return this._autoType\r\n    }\r\n\r\n    public get isAutoState(): boolean {\r\n        return this._isAutoState\r\n    }\r\n\r\n    public get isSpeedUp(): boolean {\r\n        return this._isSpeedUp\r\n    }\r\n\r\n    public get automaticRemainingCount(): number {\r\n        return this._automaticRemainingCount\r\n    }\r\n\r\n    public get userBetPoint(): UserBetPoint {\r\n        return this._userBetPoint\r\n    }\r\n\r\n    public get userMoney(): number {\r\n        return this._userMoney\r\n    }\r\n\r\n\r\n    get isResultOk(): boolean {\r\n        return this._isResultOk;\r\n    }\r\n\r\n    set isResultOk(value: boolean) {\r\n        this._isResultOk = value;\r\n    }\r\n}"]}