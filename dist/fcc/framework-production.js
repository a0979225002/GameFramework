(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var _0x3290=["NyCyf","DBhet","htnfZ","hBzKU","shift","SpriteAtlas","AudioClip","PrefabLoad","Prefab","SkeletonData","nyOEd","teThz","text/javascript","iwRIS","LoadTypeFactory"," 此(主資源)已載入過了,或名稱重複,請檢察","factory","checkRepeatTheName","executeLoad","OhkzS","XsNum","zqqpY","executeLoadExternalScript","LoadTypeHandler","如果拿取該資源進度,請勿重複callback","KFRTF","HJodG","_readFileRes","_scriptRes","allProgress","_imgRes","allProgressEndCount","_musicRes","count","_secondaryLoadState","_sceneRes","_spineRes","_initialLoadState","MbFlL","onlyResEventCallback","CErvG","cYqJy","roundDown","LSgma","oHKCw","GoMiX","loadAsset","KJqaJ","loadTypeHandler","callback","kpBvL","如果拿取總進度,請勿在之前資源尚未加載完前,重複callback","loadExternalScript","reset","xwZbf","FOVXu","whcZq","_prefabRes","LcqIM","STOP","PLAYING","loop"," 無此資源,請檢察資源類 musicRes內的資源是否錯誤","NWwlB","pZZku","Ihjmq","volume","DrOlX","musicID","2|0|9|7|3|5|1|8|4|6","KgjmG","abMzJ","WWYZH","audioEngine","resume","setVolume","NpSmf","bnlVd","playMusic","getState","stop","pause","AudioState","MusicController","9|3|1|12|6|4|10|8|11|0|5|2|7","effectID","HEDFy","canSuperimpose","rtSzD","ERROR","playEffect","THEld","onNcG","eQgso","EffectController","5|0|7|4|3|2|1|6","krfKn","mvzUb","audioManager","musicOnMute","musicData","musicController","effectController","initializeData","musicNormalData","luWhc","kUKNN","effectNormalData","Mmawq","settingMusic","5|2|1|0|4|3","mtcGn","CMdZN","XlpoW","settingEffect","ecZJt","PHtVs","effectData","musicPlay","trim","effectPlay","effectOnMute","musicPause","effectStop","effectStopAll","stopAll","getMusicState","getEffectState","AudioFactory","_musicOnMute","audioMgr","APChJ","SUPERIMPOSE","musicStop","updateEffectOnMute","_effectOnMute","updateMusicOnMute","dgqYm","EjQlP","enumerable","KUDAo","UzWUi","BJech","Music","khVtc","MusicStop","kRfxy","gCUCo","DCiig","eHBMs","tMMNB","forEach","xASTH","GnCxa","Effect","AzIaG","ZFhEu","GQnXV","gQsWm","EffectStop","4|0|1|3|2","微軟正黑體","Arial Unicode MS,Arial","tASQm","VNook","UyozD","jDnRG","qoKWR","iinLK","nowLanguageLabel","nowLang","initDefaultStyle","languageMgr","jaiMo","INDONESIA","addStyle","updateLanguage","languageCache","getText","getAllText","language_Mode","bxyeH","removeStringBuffer","updateStyle","4|0|3|1|2|6|5|7","fontFamily","HvYeH","labelCache","fontSize","notificationToMap","setNotification","VIYip","getAllNotifications","networkMgr","notificationMgr","fcc","addButtonEvent","getClassName","Component","EventHandler","component","customEventData","clickEvents","disableButton","interactable","enableButton","addTouchStartEvent","Node","EventType","TOUCH_START","offTouchStartEvent","DzWrp","CrzjK","lMGUl","RrKwS","getNodeOneChildren","KkcQp","childrenCount","children","ocwHj","TjqhU","hEyVk","_self","_callFun","GKdQI","JuJwp","CdtDb","hhecd","SmartFoxLink","FREE","NORMAL","2|3|4|1|0","TUCpj","QVHoJ","ProcessType","uaTOy","JnYES","aiKas","CviJp","cJTZf","ntPxY","GPsqc","uNcFQ","kMxTo","gameManager","processToMap","mlaAj","executionContainer","jeHiC","onCreate","getProcess","getAllProcess","process","SjXlM","start","TEST","oYwhq","GameEventType","FREE_SPIN_RESULT","CAN_PLAY_GAME","GET_GAME_HISTORY_RESULT","GET_HISTORY_DETAIL_RESULT","TABLE_INFO","WARNING","kRHwY","KANfo","GIPyC","IPeYT","hlNRg","fKlOn","ServerEventType","CXbCe","_executionContainer","_process","onExecution","onEnd","zbHVz","BKLJQ","GameProcess","onCustomizeStart","onSineInGrid","onRunGrid","onShowAnswer","xdxRn","rhyWK","jvZBZ","xVbCK","SlotGameProcess","slotColumnToTween","slotGirdSpeed","slotRowGridCount","speedUpMultiple","slotStyleManager","normalResult","jcFQF","wcVIu","Zooag","ZGiyz","slotTurnCount","DTIAC","setSlotTurnCount","_slotTurnCount","setSlotGridHeight","_slotGridHeight","setSlotGirdSpeed","_slotGirdSpeed","_speedUpMultiple","setSlotRowGridCount","setColumnIntervalTime","_columnIntervalTime","setSlotColumnToTween","_slotColumnToTween","setNormalResult","_normalResult","setFreeResult","complete","_slotStyleManager","columnIntervalTime","alOUH","rDMHs","jAJvT","gJPXS","_slotRowGridCount","NPiHZ","yHARK","freeResult","ASlotSetting","gridSpriteToMap","gridImg","FPEIL","rYfEa","_gridImg","setGirdSpriteToMap","_gridSpriteToMap","cqeDQ","ltchR","XQOng","setGridImg","setGirdSpineToMap","_girdSpineToMap","SlotSpinSetting","__extends","function"," is not a constructor or null","setPrototypeOf","gWZda","__proto__","prototype","hasOwnProperty","call","HeSfI","cgyWf","VPUMI","constructor","lUmjM","create","__read","1|4|2|3|0","SfnjA","split","stzmc","HYeIA","iterator","next","done","push","return","error","__spreadArray","length","HiYbB","__awaiter","throw","dMBaK","uspHY","qFyyX","FMXLM","drwwF","NVykp","value","then","__generator","szmRI","BJRiN","DXDOn","eBqjD","McjyP","label","ops","trys","pop","dUvke","tpFUG","ELigI","__values","3|2|0|1|4","Symbol.iterator is not defined.","XCAEJ","ifXsq","number","iNFGy","luPIo","IS_RUNNING_FW","遊戲正在執行中,請勿重複呼叫","LOAD_FW","AUDIO 類有錯誤 :","UNDEFINED_FW","Animation 類中方法有錯誤 : ","PROCESS_FW","WEB_RESPONSE_FW","10|0|6|2|8|11|12|4|7|9|5|3|1","IfrwS","YbJhR","TEMPLATE_FW","模板類有錯誤 :","HGlmR","SlotStyleFW類有錯誤 :","AJCNJ","jWeZK","JFIhu","變數為undefined,流程無法繼續","oRvyE","ANIMATION_FW","ruOFp","YOZVv","process 類有錯誤 :","WEB_REQUEST_FW","dlzAL","ErrorType","type","例外錯誤 : ","PALQw","vNBbk","TZvlQ","uCRLf","owmLu","WuyIA","vLgnb","EehMG",'{}.constructor("return this")( )',"IXtJE","console","2|1|7|3|0|8|4|6|5","info","exception","warn","Bbnly","trace","log","debug","veMVd","configManager","checkErrorType","YfwwP","UnknownError","tDzrc","TYPE_FW","qLTHO","OKsMN","RfJbr","eOYbj","cctxo","VrhfQ","AUDIO_FW","SCENE_FW","fuXVn","LISTENER_FW","AMBbp","SLOT_STYLE_FW","rufZC","unknownError","有例外錯誤,但你未開啟框架Debug,無法查看","FrameWorkError","frameWorkError","lgBIc","checkObjectType","nOpDT","該物件為null","ObjectError","4|7|9|5|3|2|6|1|10|0|8","ErrorManager errorButton為空","errorManager","showError","hJRwF","errorButton","active","errorButtonLabel","string","errorLabel","ErrorManager","errorState","executeError","lqalt","ErrorManager errorLabel為空","timeOut","setTimeout","errorNode","errorDelayTime","ErrorManager errorNode為空","isShowBackHomeButton","ServerError","2|0|9|3|7|8|4|6|1|5","ErrorManager warningLabel為空","ErrorManager warningNode為空","ErrorManager errorDelayTime為空 無法顯示","IUgbf","TmNkg","IVZXc","當前DelayTime = 0 : 請給予值","RjzIZ","nneBz","TRFbJ","vqYbM","tDFha","IYmLr","timeout","vbZJw","kYOsb","bbsKk","warningLabel","HOTPH","warningState","warningNode","warningDelayTime","lncma","rbXia","showErrorBet","XJjwb","MNgtf","iqgqC","xIoax","yMBrw","aFLnE","WarningError","objectError","serverError","warningError","checkServerError","checkWarning","8|3|2|4|7|5|6|0|1","ErrorManager類錯誤 :  該類尚未實例化","instance","lzAtF","YbVVG","jKivF","_warningState","_errorNode","_errorLabel","_warningDelayTime","_errorState","handler","ErrorHandler","setInstance","_instance","errorMgr","defineProperty","mkbtl","showErrorDialog","setErrorNode","setErrorButton","_errorButton","setErrorDelayTime","_errorDelayTime","setWarningDelayTime","setWarningNode","setWarningLabel","setErrorButtonLabel","_errorButtonLabel","gpUZW","LUgBy","bareZ","HDsVu","_warningLabel","RVgIC","animationManager","updateSpineAnimationName","spineName","該類尚未實例化","vpucG","_spineName","_handler","AnimationHandler","animationMgr","ZLzMf","getSpineName","has","resources 資源名錯誤","get","DmAGJ","vBBvb","fYUNc","qrZAD","AnimationManager","CLEAR_TO_REPLAY","NOT_PLAYING","YMcyt","dsvXh","ostCo","ctbbL","vBtTc","AudioStateType","UozRv","pFoKX","EuHwF","naGRs","JOEQk","DCKVZ","CHLjV","round","Zmflo","pow","floor","dcGkl","pbmEP","roundUp","rFhKj","ceil","oOiXx","JDkIz","rqpAB","decimalsCount","biIAT","fngFM","numberFormat","rNVQa","GAIYH","RvRmp","format","formatting","Util","global","music","script","text","1|7|2|0|5|3|4|6","SPQDL","img","scene","aSnnG","gAwQr","spine","WdBGw","HjOAk","prefab","NeJEH","IQJth","css","PBgMp","LoadType","severEvent","4|0|5|2|1|3","eventCount","eventsCurrentlyBeing","MrDFG","_eventsCurrentlyBeing","_eventCount","kMpvq","EFQHL","target","emit","apply","nPuwd","set","Xnsgg","destroyEvent","off","hasListening","hasEventListener","XBwAJ","Wdudb","EventManager","gameState","gameProcessFactory","GameProcessFactory","_gameState","GameStateType","isStartProcess","tOXha","KaSDn","setProcess","initProcess","setDefaultProcess","changeProcess","play","oWIpw","updateProcessState","useProcess","sent","流程尚未結束,請勿重複執行","remake","rRexv","ProcessManager","HORIZONTAL","VERTICAL","HHEkB","hmPAo","JWGzr","SceneStyleType","PORTRAIT","sirnF","sZBKd","SceneDirectionType","正在UpdateScene中 請稍後......","FpHSz","EFCLA","_isCanUpdateScene","designSceneEventListener","view","YlqKH","ObZLO","odWVN","makeDesignScene","KUACv","updateSize","isFrameworkDebug","kpCrl"," : 該觀察類尚未綁定過,無須移除觀察對象","HmstO","observer","subscribe"," 該IBaseObserver已註冊過自動狀態改變時事件,請檢查","isPermanent","add","unsubscribe","delete","YCuWp","removeAll","clear","getAllSubscribe","ABS","2|4|1|5|0|7|6|8|3","USER_MONEY_CHANGE","AUTO_CHANGE","SCENE_DIRECTION_CHANGE","SCROLL_FOCUS_STATE","gjKOn","CUOQz","ZxxBQ","Camlu","USER_BET_CHANGE","EzFtM","okQiV","NotificationType","_isPermanent","self","callFun","ZXDlJ","SceneDirectionChangeObserver","mYcrG","TAG_NAME","notify","qHdnP","size","bMRao","pushNotification","你尚未綁定當遊戲方向更動時的推播事件,因此不會觸發方向改變的推播事件","Gdrlk","jMAFj","YsMcV","VtXsK","tziFK","sceneManager","NotificationManager","hasNotification","eventLock","NxDgh","executionStyle","updateSceneDirection","VzFIC","bCdXx","getFrameSize","width","setDesignResolutionSize","ResolutionPolicy","FIXED_HEIGHT","epZYQ","height","FIXED_WIDTH","nOhcD","iRaab","PJORz","sceneDirection","getNotification","YOXUj","LANDSCAPE","AutoStyle","UHceo","node","curDR","BxZDW","getComponent","Canvas","YWuBy","mNZIv","fitWidth","LBTka","fitHeight","VhSYy","HorizontalStyle","尚未完成直向是配模式","tQgeH","VerticalStyle","AUTO","autoStyle","horizontalStyle","verticalStyle","SceneStyleHandler","該更新模式尚未包含在框架中,請確認是否有實作ISceneStyle","UJzGe","4|2|5|3|1|0","style","sceneSizeChangeListener","SceneSizeChangeListener","_designHeight","setDesignWidth","_designWidth","_sceneDirection","YzQoP","sceneStyleHandler","startListener","changeScene","sceneRes","加載不到你的Scene資源,請檢查該資源名是否正確","runScene","LoadResManager","removeScene","SceneManager","Slot Template 未賦予,需幫定或實做一個SlotTemplate","sTMaT","slotStyleMgr","uorBd","template","setSlotStyle","build","HOdcs","_slot","SlotStyleManager","AUTO_50","AUTO_100","FnXaO","zJXEi","rSKBI","AUTO_500","1|4|2|0|5|3","RlPEi","UlZVn","uTDNg","AUTO_1000","uOndO","FREE_END","MrsrN","AutoType","4|0|1|5|3|2|6","CHINESE","CNY","VND","NTD","AMERICA","USD","MYR","leDjw","hGGae","VIETNAM","whWjk","TnJOf","GaPxy","Efakw","dDCtE","AZYij","piHMO","vIgqc","oUhUd","nyOdT","TAIWAN","FpMyU","RLPfR","MALAYSIA","LanguageType","externallyLoadURL","isAuto","autoCount","musicVolume","effectVolume","language","isMusicOnMute","backHomeURL","cocosDebugSetting","_isAuto","_isSpeedUp","_autoCount","_musicVolume","_effectVolume","_isEffectOnMute","_language","_cocosDebugSetting","DebugMode","INFO","LXTnC","setGameNumber","_gameNumber","setMusicVolume","setEffectVolume","setMusicOnMute","setEffectOnMute","_externallyLoadURL","setLanguage","setSpeedState","setFrameWorkDebug","setCocosDebug","setBackHomeURL","AudioManager","LanguageManager","dEqSz","gameNumber","Mpdhy","MrXkj","isSpeedUp","FRHXH","_isFrameworkDebug","isEffectOnMute","WHZmi","_isMusicOnMute","AJzhm","_backHomeURL","rgBMo","SlotConfigManager","head","scriptName","getElementsByTagName","nKCgz","link","請勿重複加載已有的外部腳本 : ",".css","stylesheet","createElement","QnTJn","loadScript","cSHFz","linkElem","scriptRes","MvfIw","VpqtW","appendChild","VfCrC","url","rel","VHTPS","CSSLoad",".js","gRuhZ","kSfwH","dPAZs","ZxnWL","src","cxHXS","vMCvf","ylejR","ALoadScriptType","ScriptLoad","4|2|3|1|5|0","resources","agFcE","wLNhL","VPcsB","FlJas","UKEfQ","assetBundle","assetManager","getBundle","folder","dataName","loadResources","zvnfP","SceneAsset","loadResProgress","bind","loadResCallBack","loadScene","MEdJA","zzTnQ","setResToManager","Yiyui","beforeProgress","OwEcJ","updateManagerState","bpRaM","initialLoadState","loadMainEventCallback","secondaryLoadState","loadSecondaryEventCallback","ALoadType","Zwlss","imgRes","getSpriteFrames","toLowerCase","match","IBvrp","replace","name","updateProgressEnd","ImgLoad"," 鍵值重複,請檢查該音樂資源是否已加載過","yxSwX","musicRes","tqVbh","MusicLoad","jNhHx","prefabRes","xjkvl"," prefab名稱重複,請檢查是否有相同名稱prefab"," 鍵值重複,請檢查該資源是否已加載過","ffttK","SceneLoad","請檢察資源是否以載入過,鍵值重複","5|1|0|4|6|2|3","iGNxF","ufRVZ","grid","jpCmi","spineRes","LkHgO","keys","Ivktq","DOPfk"," spine動畫取number有誤,請檢查該spine Animetion是否有重複數字情況","DPKtx","SpineLoad","mKdbj","Thywv","CSFGl","APiFO","readFileRes","TextLoad","資源類型錯誤,尚無此類型載入方法","text/css","LoadType 無法偵測","2|1|3|0|4","secondaryRes","odMkE","MYYWP","xtdSL","assetMethod","loadResManager","loadBundle","aPJeU","promise","iduSe","isLoadBundle","oYQbu","checkLoadType","executeLoadBundle"];!function(c){function t(x){for(;--x;)c.push(c.shift())}!function(){var x={data:{key:"cookie",value:"timeout"},setCookie:function(x,c,e,t){t=t||{};for(var n=c+"="+e,_=0,_=0,i=x.length;_<i;_++){var r=x[_];n+="; "+r;r=x[r];x.push(r),i=x.length,!0!==r&&(n+="="+r)}t.cookie=n},removeCookie:function(){return"dev"},getCookie:function(x,c){var e,c=(x=x||function(x){return x})(new RegExp("(?:^|; )"+c.replace(/([.$?*|{}()[]\/+^])/g,"$1")+"=([^;]*)"));return e=341,t(++e),c?decodeURIComponent(c[1]):void 0}};x.updateCookie=function(){return new RegExp("\\w+ *\\(\\) *{\\w+ *['|\"].+['|\"];? *}").test(x.removeCookie.toString())};var c=x.updateCookie();c?c?x.getCookie(null,"counter"):x.removeCookie():x.setCookie(["*"],"counter",1)}()}(_0x3290);var _0x44fb7c,_0x47c4=function(x,c){return _0x3290[x=+x]},_0x146e9c=this&&this[_0x47c4("0x0")]||function(){var t={gWZda:function(x,c){return x instanceof c},HeSfI:function(x,c,e){return x(c,e)},lYqHy:function(x,c){return x!==c},cgyWf:_0x47c4("0x1"),vEBnH:_0x47c4("0x2"),VPUMI:function(x,c,e){return x(c,e)},lUmjM:function(x,c){return x===c}},n=function(x,c){return n=Object[_0x47c4("0x3")]||t[_0x47c4("0x4")]({__proto__:[]},Array)&&function(x,c){x[_0x47c4("0x5")]=c}||function(x,c){for(var e in c)Object[_0x47c4("0x6")][_0x47c4("0x7")][_0x47c4("0x8")](c,e)&&(x[e]=c[e])},t[_0x47c4("0x9")](n,x,c)};return function(x,c){if(t.lYqHy(typeof c,t[_0x47c4("0xa")])&&null!==c)throw new TypeError("Class extends value "+String(c)+t.vEBnH);function e(){this[_0x47c4("0xc")]=x}t[_0x47c4("0xb")](n,x,c),x.prototype=t[_0x47c4("0xd")](c,null)?Object[_0x47c4("0xe")](c):(e[_0x47c4("0x6")]=c[_0x47c4("0x6")],new e)}}(),_0x5589e9=this&&this[_0x47c4("0xf")]||function(x,c){for(var e={SfnjA:_0x47c4("0x10"),stzmc:function(x,c){return x===c},HYeIA:_0x47c4("0x1")},t=e[_0x47c4("0x11")][_0x47c4("0x12")]("|"),n=0;;){switch(t[n++]){case"0":return u;case"1":var _=e[_0x47c4("0x13")](typeof Symbol,e[_0x47c4("0x14")])&&x[Symbol[_0x47c4("0x15")]];continue;case"2":var i,r,o=_.call(x),u=[];continue;case"3":try{for(;(void 0===c||0<c--)&&!(i=o[_0x47c4("0x16")]())[_0x47c4("0x17")];)u[_0x47c4("0x18")](i.value)}catch(x){r={error:x}}finally{try{i&&!i[_0x47c4("0x17")]&&(_=o[_0x47c4("0x19")])&&_.call(o)}finally{if(r)throw r[_0x47c4("0x1a")]}}continue;case"4":if(!_)return x;continue}break}},_0x7b847e=this&&this[_0x47c4("0x1b")]||function(x,c){for(var e={HiYbB:function(x,c){return x<c}},t=0,n=c[_0x47c4("0x1c")],_=x[_0x47c4("0x1c")];e[_0x47c4("0x1d")](t,n);t++,_++)x[_]=c[t];return x},_0x26f3e4=this&&this[_0x47c4("0x1e")]||function(x,r,e,o){var u={dMBaK:function(x,c){return x(c)},NVykp:_0x47c4("0x1f"),BtgpL:function(x,c){return x(c)},uspHY:function(x,c){return x(c)},qFyyX:function(x,c){return x(c)},VixKC:function(x,c){return x(c)}};function a(c){return c instanceof e?c:new e(function(x){u[_0x47c4("0x20")](x,c)})}return new(e=e||Promise)(function(c,e){var t={FMXLM:function(x,c){return u[_0x47c4("0x21")](x,c)},drwwF:function(x,c){return x(c)},BBvEL:function(x,c){return u[_0x47c4("0x21")](x,c)},wNazN:function(x,c){return u[_0x47c4("0x22")](x,c)}};function n(x){try{t[_0x47c4("0x23")](i,o[_0x47c4("0x16")](x))}catch(x){t[_0x47c4("0x24")](e,x)}}function _(x){try{u.dMBaK(i,o[u[_0x47c4("0x25")]](x))}catch(x){u.BtgpL(e,x)}}function i(x){x[_0x47c4("0x17")]?t.BBvEL(c,x[_0x47c4("0x26")]):t.wNazN(a,x[_0x47c4("0x26")])[_0x47c4("0x27")](n,_)}u.VixKC(i,(o=o.apply(x,r||[]))[_0x47c4("0x16")]())})},_0x32ef64=this&&this[_0x47c4("0x28")]||function(x,e){var t,n,_,i={szmRI:function(x,c){return x&c},McjyP:function(x,c){return x(c)},OhQdr:"Generator is already executing.",yJJMr:_0x47c4("0x19"),dUvke:function(x,c){return c<x},tpFUG:function(x,c){return x===c},DXDOn:function(x,c){return x===c},ELigI:function(x,c){return x<c},BJRiN:function(x,c){return x(c)},eBqjD:"function"},r={label:0,sent:function(){if(i[_0x47c4("0x29")](_[0],1))throw _[1];return _[1]},trys:[],ops:[]},c={next:i[_0x47c4("0x2a")](o,0),throw:o(1),return:o(2)};return i[_0x47c4("0x2b")](typeof Symbol,i[_0x47c4("0x2c")])&&(c[Symbol[_0x47c4("0x15")]]=function(){return this}),c;function o(c){return function(x){return i[_0x47c4("0x2d")](u,[c,x])}}function u(c){if(t)throw new TypeError(i.OhQdr);for(;r;)try{if(t=1,n&&(_=i[_0x47c4("0x29")](c[0],2)?n[_0x47c4("0x19")]:c[0]?n[_0x47c4("0x1f")]||((_=n[i.yJJMr])&&_[_0x47c4("0x8")](n),0):n.next)&&!(_=_[_0x47c4("0x8")](n,c[1])).done)return _;switch(n=0,(c=_?[i[_0x47c4("0x29")](c[0],2),_[_0x47c4("0x26")]]:c)[0]){case 0:case 1:_=c;break;case 4:return r.label++,{value:c[1],done:!1};case 5:r[_0x47c4("0x2e")]++,n=c[1],c=[0];continue;case 7:c=r[_0x47c4("0x2f")].pop(),r[_0x47c4("0x30")][_0x47c4("0x31")]();continue;default:if(_=r[_0x47c4("0x30")],!(_=i[_0x47c4("0x32")](_[_0x47c4("0x1c")],0)&&_[_[_0x47c4("0x1c")]-1])&&(i[_0x47c4("0x33")](c[0],6)||i[_0x47c4("0x2b")](c[0],2))){r=0;continue}if(i[_0x47c4("0x2b")](c[0],3)&&(!_||i[_0x47c4("0x32")](c[1],_[0])&&c[1]<_[3])){r[_0x47c4("0x2e")]=c[1];break}if(i[_0x47c4("0x2b")](c[0],6)&&i[_0x47c4("0x34")](r[_0x47c4("0x2e")],_[1])){r[_0x47c4("0x2e")]=_[1],_=c;break}if(_&&i[_0x47c4("0x34")](r[_0x47c4("0x2e")],_[2])){r[_0x47c4("0x2e")]=_[2],r[_0x47c4("0x2f")].push(c);break}_[2]&&r.ops[_0x47c4("0x31")](),r.trys.pop();continue}c=e[_0x47c4("0x8")](x,r)}catch(x){c=[6,x],n=0}finally{t=_=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}},_0x9fa626=this&&this[_0x47c4("0x35")]||function(x){for(var c={XCAEJ:_0x47c4("0x36"),ifXsq:function(x,c){return x===c},luPIo:_0x47c4("0x1"),lDCoQ:"Object is not iterable.",UmAbZ:_0x47c4("0x37")},e=c[_0x47c4("0x38")][_0x47c4("0x12")]("|"),t=0;;){switch(e[t++]){case"0":if(_)return _[_0x47c4("0x8")](x);continue;case"1":if(x&&c[_0x47c4("0x39")](typeof x.length,_0x47c4("0x3a")))return{next:function(){return{value:(x=x&&r[_0x47c4("0x3b")](i,x[_0x47c4("0x1c")])?void 0:x)&&x[i++],done:!x}}};continue;case"2":var n=typeof Symbol===c[_0x47c4("0x3c")]&&Symbol[_0x47c4("0x15")],_=n&&x[n],i=0;continue;case"3":var r={iNFGy:function(x,c){return c<=x}};continue;case"4":throw new TypeError(n?c.lDCoQ:c.UmAbZ)}break}};!function(x){var t={IfrwS:_0x47c4("0x3d"),YbJhR:_0x47c4("0x3e"),HGlmR:_0x47c4("0x3f"),jGYCr:"SLOT_STYLE_FW",AJCNJ:_0x47c4("0x40"),zzyfu:"LISTENER_FW",jWeZK:"Event 類有錯誤 :",JFIhu:_0x47c4("0x41"),oRvyE:"Scene 類有錯誤 :",ruOFp:_0x47c4("0x42"),YOZVv:_0x47c4("0x43"),dlzAL:_0x47c4("0x44")};(function(x){for(var c=_0x47c4("0x45")[_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":x[t[_0x47c4("0x46")]]=t[_0x47c4("0x47")];continue;case"1":x[_0x47c4("0x48")]=_0x47c4("0x49");continue;case"2":x[t[_0x47c4("0x4a")]]="加載的資源有問題";continue;case"3":x[t.jGYCr]=_0x47c4("0x4b");continue;case"4":x.AUDIO_FW=t[_0x47c4("0x4c")];continue;case"5":x[t.zzyfu]=t[_0x47c4("0x4d")];continue;case"6":x[t[_0x47c4("0x4e")]]=_0x47c4("0x4f");continue;case"7":x.SCENE_FW=t[_0x47c4("0x50")];continue;case"8":x[_0x47c4("0x51")]=t[_0x47c4("0x52")];continue;case"9":x[t[_0x47c4("0x53")]]=_0x47c4("0x54");continue;case"10":x.TYPE_FW="傳入的Type 錯誤 ,請檢察該Type是否非FarmWork內的Type";continue;case"11":x[_0x47c4("0x55")]="WebRequest 類有錯誤 : ";continue;case"12":x[t[_0x47c4("0x56")]]="WebResponse 類有錯誤 : ";continue}break}})((x=x[_0x47c4("0x58")]||(x[_0x47c4("0x58")]={}))[_0x47c4("0x57")]||(x.ErrorType={}))}(_0x44fb7c=_0x44fb7c||{}),function(x){var t,e={YfwwP:function(x,c){return x+c},mdfHc:_0x47c4("0x59"),PALQw:function(x,c){return x+c},vNBbk:"return (function() ",TZvlQ:function(x){return x()},uCRLf:"2|1|3|4|6|5|0",owmLu:function(x,c,e){return x(c,e)},veMVd:function(x){return x()}},n=(t=!0,function(c,e){var x=t?function(){if(e){var x=e.apply(c,arguments);return e=null,x}}:function(){};return t=!1,x}),c=function(){var _={WuyIA:function(x,c){return x(c)},vLgnb:function(x,c){return e[_0x47c4("0x5a")](x,c)},EehMG:e[_0x47c4("0x5b")],IXtJE:function(x){return e[_0x47c4("0x5c")](x)},Bbnly:e[_0x47c4("0x5d")]},x=e[_0x47c4("0x5e")](n,this,function(){function x(){}try{var c=_[_0x47c4("0x5f")](Function,_[_0x47c4("0x60")](_.vLgnb(_[_0x47c4("0x61")],_0x47c4("0x62")),");")),e=_[_0x47c4("0x63")](c)}catch(x){e=window}if(e[_0x47c4("0x64")])for(var t=_[_0x47c4("0x69")][_0x47c4("0x12")]("|"),n=0;;){switch(t[n++]){case"0":e[_0x47c4("0x64")][_0x47c4("0x6a")]=x;continue;case"1":e[_0x47c4("0x64")].warn=x;continue;case"2":e[_0x47c4("0x64")][_0x47c4("0x6b")]=x;continue;case"3":e[_0x47c4("0x64")][_0x47c4("0x6c")]=x;continue;case"4":e[_0x47c4("0x64")][_0x47c4("0x66")]=x;continue;case"5":e[_0x47c4("0x64")][_0x47c4("0x67")]=x;continue;case"6":e.console.error=x;continue}break}else e[_0x47c4("0x64")]=function(x){for(var c=_0x47c4("0x65")[_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":t[_0x47c4("0x66")]=x;continue;case"1":t.log=x;continue;case"2":var t={};continue;case"3":t.debug=x;continue;case"4":t[_0x47c4("0x67")]=x;continue;case"5":return t;case"6":t.trace=x;continue;case"7":t[_0x47c4("0x68")]=x;continue;case"8":t[_0x47c4("0x1a")]=x;continue}break}}(x)});function c(x){this[_0x47c4("0x6e")]=x}return e[_0x47c4("0x6d")](x),c[_0x47c4("0x6")][_0x47c4("0x6f")]=function(x,c){throw new Error(e[_0x47c4("0x70")](e.mdfHc,x))},c}();x[_0x47c4("0x71")]=c}(_0x44fb7c=_0x44fb7c||{}),function(e){var t={tDzrc:function(x,c){return x+c},qLTHO:function(x,c){return x+c},OKsMN:function(x,c){return x+c},RfJbr:function(x,c){return x+c},eOYbj:function(x,c){return x+c},cctxo:function(x,c){return x+c},VrhfQ:function(x,c){return x+c},fuXVn:function(x,c){return x+c},ZYWHb:function(x,c){return x+c},ooIwB:function(x,c){return x+c},AMBbp:function(x,c){return x+c},OwDQk:function(x,c){return x+c},GHJPC:function(x,c){return x+c},rufZC:function(x,c){return x+c}},x=(c[_0x47c4("0x6")][_0x47c4("0x6f")]=function(x,c){if(this[_0x47c4("0x6e")].isFrameworkDebug)switch(x){case e[_0x47c4("0x58")].ErrorType[_0x47c4("0x3d")]:throw new Error(e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3d")]+" "+c);case e[_0x47c4("0x58")][_0x47c4("0x57")].UNDEFINED_FW:throw new Error(t[_0x47c4("0x72")](e.type[_0x47c4("0x57")][_0x47c4("0x41")]+" ",c));case e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x73")]:throw new Error(t[_0x47c4("0x74")](e.type[_0x47c4("0x57")].TYPE_FW+" ",c));case e[_0x47c4("0x58")].ErrorType[_0x47c4("0x51")]:throw new Error(t[_0x47c4("0x75")](t[_0x47c4("0x76")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x51")]," "),c));case e[_0x47c4("0x58")][_0x47c4("0x57")].LOAD_FW:throw new Error(t.RfJbr(t[_0x47c4("0x77")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3f")]," "),c));case e.type[_0x47c4("0x57")].WEB_REQUEST_FW:throw new Error(t[_0x47c4("0x77")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x55")]," ")+c);case e[_0x47c4("0x58")].ErrorType.AUDIO_FW:throw new Error(t[_0x47c4("0x78")](t[_0x47c4("0x79")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7a")]," "),c));case e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x44")]:throw new Error(t.VrhfQ(e[_0x47c4("0x58")][_0x47c4("0x57")].WEB_RESPONSE_FW," ")+c);case e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7b")]:throw new Error(t[_0x47c4("0x7c")](t.fuXVn(e[_0x47c4("0x58")][_0x47c4("0x57")].SCENE_FW," "),c));case e[_0x47c4("0x58")].ErrorType[_0x47c4("0x43")]:throw new Error(t.ZYWHb(t.ZYWHb(e[_0x47c4("0x58")][_0x47c4("0x57")].PROCESS_FW," "),c));case e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7d")]:throw new Error(t.ooIwB(t[_0x47c4("0x7e")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7d")]," "),c));case e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7f")]:throw new Error(t.OwDQk(t.GHJPC(e.type[_0x47c4("0x57")][_0x47c4("0x7f")]," "),c));case e.type.ErrorType[_0x47c4("0x48")]:throw new Error(t[_0x47c4("0x80")](e[_0x47c4("0x58")].ErrorType.TEMPLATE_FW," ")+c);default:this[_0x47c4("0x81")].checkErrorType(x)}else console[_0x47c4("0x6b")](_0x47c4("0x82"))},c);function c(x){this.unknownError=new e[_0x47c4("0x71")](x),this[_0x47c4("0x6e")]=x}e[_0x47c4("0x83")]=x}(_0x44fb7c=_0x44fb7c||{}),function(c){var e={lgBIc:function(x,c){return x===c},qFLrG:function(x,c){return x===c},nOpDT:function(x,c){return x!=c}},x=(t[_0x47c4("0x6")][_0x47c4("0x6f")]=function(x,c){if(e[_0x47c4("0x85")](typeof x,"string"))this[_0x47c4("0x84")].checkErrorType(x,c);else if(e.qFLrG(x,null))return this[_0x47c4("0x86")](c)},t.prototype[_0x47c4("0x86")]=function(x){if(x&&e[_0x47c4("0x87")](x,0))return typeof x;throw new Error(_0x47c4("0x88"))},t);function t(x){this[_0x47c4("0x84")]=new c.FrameWorkError(x)}c[_0x47c4("0x89")]=x}(_0x44fb7c=_0x44fb7c||{}),function(i){var r={hJRwF:_0x47c4("0x8a"),lqalt:_0x47c4("0x8b")},x=(c[_0x47c4("0x6")][_0x47c4("0x8d")]=function(x,c,e){for(var t=r[_0x47c4("0x8e")][_0x47c4("0x12")]("|"),n=0;;){switch(t[n++]){case"0":this[_0x47c4("0x8c")][_0x47c4("0x8f")][_0x47c4("0x90")]&&(this[_0x47c4("0x8c")][_0x47c4("0x91")][_0x47c4("0x92")]=e);continue;case"1":this[_0x47c4("0x8c")][_0x47c4("0x93")][_0x47c4("0x92")]=c;continue;case"2":i[_0x47c4("0x94")][_0x47c4("0x95")]=!0;continue;case"3":this[_0x47c4("0x8c")][_0x47c4("0x8f")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i.type[_0x47c4("0x57")][_0x47c4("0x41")],r[_0x47c4("0x97")]);continue;case"4":var _=this;continue;case"5":this[_0x47c4("0x8c")][_0x47c4("0x93")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x41")],_0x47c4("0x98"));continue;case"6":this[_0x47c4("0x8c")].errorNode[_0x47c4("0x90")]=!0;continue;case"7":null!=this.timeOut&&clearTimeout(this[_0x47c4("0x99")]);continue;case"8":x||(this[_0x47c4("0x99")]=window[_0x47c4("0x9a")](function(){i[_0x47c4("0x94")][_0x47c4("0x95")]=!1,_[_0x47c4("0x8c")][_0x47c4("0x9b")].active=!1,_[_0x47c4("0x8c")][_0x47c4("0x8f")].active=!1,_[_0x47c4("0x99")]=null},this[_0x47c4("0x8c")][_0x47c4("0x9c")]));continue;case"9":this[_0x47c4("0x8c")][_0x47c4("0x9b")]||this.errorManager[_0x47c4("0x96")](i[_0x47c4("0x58")].ErrorType[_0x47c4("0x41")],_0x47c4("0x9d"));continue;case"10":this[_0x47c4("0x8c")][_0x47c4("0x8f")][_0x47c4("0x90")]=this[_0x47c4("0x8c")][_0x47c4("0x9e")];continue}break}},c);function c(x){this.timeOut=null,this[_0x47c4("0x8c")]=x}i[_0x47c4("0x9f")]=x}(_0x44fb7c=_0x44fb7c||{}),function(i){var r,e={IUgbf:_0x47c4("0xa0"),TmNkg:function(x,c){return x(c)},IVZXc:_0x47c4("0xa1"),RjzIZ:_0x47c4("0xa2"),nneBz:"5|9|1|3|6|7|8|2|0|4",TRFbJ:"ErrorManager errorLabel為空",vqYbM:_0x47c4("0x8b"),tDFha:function(x,c){return x==c},ygNqg:_0x47c4("0xa3"),IYmLr:"ErrorManager errorNode為空"},x=(r={vbZJw:e[_0x47c4("0xa4")],kYOsb:function(x,c){return x!=c},bbsKk:function(x,c){return e[_0x47c4("0xa5")](x,c)},HOTPH:e[_0x47c4("0xa6")],lncma:_0x47c4("0xa7"),rbXia:e[_0x47c4("0xa8")],XJjwb:e[_0x47c4("0xa9")],MNgtf:e[_0x47c4("0xaa")],iqgqC:e[_0x47c4("0xab")],xIoax:function(x,c){return e[_0x47c4("0xac")](x,c)},yMBrw:e.ygNqg,aFLnE:e[_0x47c4("0xad")]},c.prototype[_0x47c4("0x8d")]=function(x,c,e){for(var t=r[_0x47c4("0xaf")].split("|"),n=0;;){switch(t[n++]){case"0":r[_0x47c4("0xb0")](this[_0x47c4("0xae")],null)&&r[_0x47c4("0xb1")](clearTimeout,this[_0x47c4("0xae")]);continue;case"1":if(x)return;continue;case"2":var _=this;continue;case"3":this[_0x47c4("0x8c")][_0x47c4("0xb2")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i[_0x47c4("0x58")][_0x47c4("0x57")].UNDEFINED_FW,r[_0x47c4("0xb3")]);continue;case"4":this[_0x47c4("0x8c")].warningNode.active=!0;continue;case"5":this[_0x47c4("0xae")]=window[_0x47c4("0x9a")](function(){i[_0x47c4("0x94")][_0x47c4("0xb4")]=!1,_[_0x47c4("0x8c")][_0x47c4("0xb5")][_0x47c4("0x90")]=!1},this[_0x47c4("0x8c")][_0x47c4("0xb6")]);continue;case"6":this[_0x47c4("0x8c")].warningLabel[_0x47c4("0x92")]=c;continue;case"7":0==this.errorManager[_0x47c4("0xb6")]&&this[_0x47c4("0x8c")].executeError(r[_0x47c4("0xb7")]);continue;case"8":i.ErrorManager[_0x47c4("0xb4")]=!0;continue;case"9":this[_0x47c4("0x8c")][_0x47c4("0xb5")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i[_0x47c4("0x58")].ErrorType[_0x47c4("0x41")],r[_0x47c4("0xb8")]);continue}break}},c[_0x47c4("0x6")][_0x47c4("0xb9")]=function(x){for(var c=r[_0x47c4("0xba")][_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":this[_0x47c4("0x8c")][_0x47c4("0x93")][_0x47c4("0x92")]=x;continue;case"1":this[_0x47c4("0x8c")][_0x47c4("0x93")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i[_0x47c4("0x58")][_0x47c4("0x57")].UNDEFINED_FW,r[_0x47c4("0xbb")]);continue;case"2":this.errorManager[_0x47c4("0x9b")].active=!0;continue;case"3":this[_0x47c4("0x8c")][_0x47c4("0x8f")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x41")],r[_0x47c4("0xbc")]);continue;case"4":window[_0x47c4("0x9a")](function(){i[_0x47c4("0x94")].errorState=!1,t[_0x47c4("0x8c")][_0x47c4("0x9b")][_0x47c4("0x90")]=!1},this[_0x47c4("0x8c")][_0x47c4("0x9c")]);continue;case"5":var t=this;continue;case"6":r[_0x47c4("0xbd")](this[_0x47c4("0x8c")][_0x47c4("0x9c")],0)&&this[_0x47c4("0x8c")][_0x47c4("0x96")](i.type[_0x47c4("0x57")][_0x47c4("0x41")],r[_0x47c4("0xbe")]);continue;case"7":if(i[_0x47c4("0x94")][_0x47c4("0x95")])return;continue;case"8":i[_0x47c4("0x94")][_0x47c4("0x95")]=!0;continue;case"9":this.errorManager[_0x47c4("0x9b")]||this[_0x47c4("0x8c")][_0x47c4("0x96")](i[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x41")],r[_0x47c4("0xbf")]);continue}break}},c);function c(x){this[_0x47c4("0xae")]=null,this[_0x47c4("0x8c")]=x}i[_0x47c4("0xc0")]=x}(_0x44fb7c=_0x44fb7c||{}),function(e){var t,c=(t=!0,function(c,e){var x=t?function(){if(e){var x=e.apply(c,arguments);return e=null,x}}:function(){};return t=!1,x}),x=function(){function x(x,c){this[_0x47c4("0xc1")]=new e.ObjectError(x),this[_0x47c4("0xc2")]=new e[_0x47c4("0x9f")](c),this[_0x47c4("0xc3")]=new e[_0x47c4("0xc0")](c)}return c(this,function(){function c(x){x.indexOf(!1)&&e(x)}var e=function(x){3!==x.indexOf((!0+"")[3])&&c(x)};new RegExp("\\w+ *\\(\\) *{\\w+ *['|\"].+['|\"];? *}").test(function(){return"dev"}.toString())&&new RegExp("(\\\\[x|u](\\w){2,4})+").test(function(){return"window"}.toString())?c("indexOf"):c("indеxOf")})(),x[_0x47c4("0x6")][_0x47c4("0x6f")]=function(x,c){return this.objectError[_0x47c4("0x6f")](x,c)},x[_0x47c4("0x6")][_0x47c4("0xc4")]=function(x,c,e){this[_0x47c4("0xc2")].showError(x,c,e)},x[_0x47c4("0x6")][_0x47c4("0xc5")]=function(x,c,e){this.warningError[_0x47c4("0x8d")](x,c,e)},x}();e.ErrorHandler=x}(_0x44fb7c=_0x44fb7c||{}),function(t){var n,x={lzAtF:_0x47c4("0xc6"),YbVVG:_0x47c4("0xc7"),XSaIO:_0x47c4("0xc8"),gpUZW:_0x47c4("0x9b"),LUgBy:_0x47c4("0xb5"),bareZ:_0x47c4("0x8f"),HDsVu:_0x47c4("0xb2"),LmzMI:_0x47c4("0x9c"),RVgIC:"warningDelayTime",TPirz:_0x47c4("0x91")},x=(n={jKivF:x[_0x47c4("0xc9")],mkbtl:x[_0x47c4("0xca")]},_[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this[_0x47c4("0xd4")]=new _(x),t[_0x47c4("0xd5")]=this[_0x47c4("0xd4")])},Object[_0x47c4("0xd6")](_,x.XSaIO,{get:function(){if(!this._instance)throw new Error(n[_0x47c4("0xd7")]);return this[_0x47c4("0xd4")]},enumerable:!1,configurable:!0}),_[_0x47c4("0x6")].executeError=function(x,c){return this[_0x47c4("0xd1")][_0x47c4("0x6f")](x,c)},_[_0x47c4("0x6")][_0x47c4("0xd8")]=function(x,c,e){this[_0x47c4("0xd1")][_0x47c4("0xc4")](x,c,e)},_[_0x47c4("0x6")].showWarningDialog=function(x,c,e){this.handler[_0x47c4("0xc5")](x,c,e)},_.prototype[_0x47c4("0xd9")]=function(x){return this._errorNode=x,this},_[_0x47c4("0x6")].setErrorLabel=function(x){return this[_0x47c4("0xce")]=x,this},_[_0x47c4("0x6")][_0x47c4("0xda")]=function(x){return this[_0x47c4("0xdb")]=x,this},_[_0x47c4("0x6")][_0x47c4("0xdc")]=function(x){return this[_0x47c4("0xdd")]=x,this},_[_0x47c4("0x6")][_0x47c4("0xde")]=function(x){return this[_0x47c4("0xcf")]=x,this},_[_0x47c4("0x6")][_0x47c4("0xdf")]=function(x){return this._warningNode=x,this},_[_0x47c4("0x6")][_0x47c4("0xe0")]=function(x){return this._warningLabel=x,this},_[_0x47c4("0x6")][_0x47c4("0xe1")]=function(x){return this[_0x47c4("0xe2")]=x,this},Object.defineProperty(_,_0x47c4("0x95"),{get:function(){return this[_0x47c4("0xd0")]},set:function(x){this[_0x47c4("0xd0")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_,"warningState",{get:function(){return this[_0x47c4("0xcc")]},set:function(x){this._warningState=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_[_0x47c4("0x6")],x[_0x47c4("0xe3")],{get:function(){return this[_0x47c4("0xcd")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_[_0x47c4("0x6")],x[_0x47c4("0xe4")],{get:function(){return this._warningNode},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_.prototype,x[_0x47c4("0xe5")],{get:function(){return this[_0x47c4("0xdb")]},enumerable:!1,configurable:!0}),Object.defineProperty(_[_0x47c4("0x6")],x[_0x47c4("0xe6")],{get:function(){return this[_0x47c4("0xe7")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_.prototype,_0x47c4("0x93"),{get:function(){return this._errorLabel},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_.prototype,x.LmzMI,{get:function(){return this[_0x47c4("0xdd")]},enumerable:!1,configurable:!0}),Object.defineProperty(_.prototype,x[_0x47c4("0xe8")],{get:function(){return this[_0x47c4("0xcf")]},enumerable:!1,configurable:!0}),Object.defineProperty(_[_0x47c4("0x6")],"isShowBackHomeButton",{get:function(){return this._isShowBackHomeButton},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](_.prototype,x.TPirz,{get:function(){return this[_0x47c4("0xe2")]},enumerable:!1,configurable:!0}),_);function _(x){for(var c=n[_0x47c4("0xcb")][_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":_[_0x47c4("0xcc")]=!1;continue;case"1":this._isShowBackHomeButton=!!this.configManager.backHomeURL;continue;case"2":this[_0x47c4("0xcd")]=null;continue;case"3":this[_0x47c4("0x6e")]=x;continue;case"4":this[_0x47c4("0xce")]=null;continue;case"5":this[_0x47c4("0xcf")]=1e3;continue;case"6":_[_0x47c4("0xd0")]=!1;continue;case"7":this._errorDelayTime=2e3;continue;case"8":this[_0x47c4("0xd1")]=new t[_0x47c4("0xd2")](x,this);continue}break}}t[_0x47c4("0x94")]=x}(_0x44fb7c=_0x44fb7c||{}),function(x){var c=(e[_0x47c4("0x6")][_0x47c4("0xea")]=function(x,c,e){var t=new Map;t.set(c,e),this[_0x47c4("0xe9")][_0x47c4("0xeb")].set(x,t)},e);function e(x){this[_0x47c4("0xe9")]=x}x.AnimationHandler=c}(_0x44fb7c=_0x44fb7c||{}),function(e){var x,t={DmAGJ:function(x,c){return x+c},vBBvb:"尚未獲取資源,請查看 AnimationManager.instance.spineName",vZhKz:function(x,c){return x+c},vpucG:_0x47c4("0xec"),fYUNc:_0x47c4("0xeb"),qrZAD:_0x47c4("0xd1")},c=(x={ZLzMf:t[_0x47c4("0xed")]},n.setInstance=function(x){this[_0x47c4("0xd4")]||(this[_0x47c4("0xd4")]=new n(x),e[_0x47c4("0xf1")]=this[_0x47c4("0xd4")])},Object.defineProperty(n,_0x47c4("0xc8"),{get:function(){if(this[_0x47c4("0xd4")])return this[_0x47c4("0xd4")];e[_0x47c4("0x94")].instance[_0x47c4("0x96")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7a")],x[_0x47c4("0xf2")])},enumerable:!1,configurable:!0}),n[_0x47c4("0x6")][_0x47c4("0xf3")]=function(x,c){return this[_0x47c4("0xee")][_0x47c4("0xf4")](x)?e[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](e.type[_0x47c4("0x57")][_0x47c4("0x51")],_0x47c4("0xf5")):this[_0x47c4("0xee")][_0x47c4("0xf6")](x).has(t[_0x47c4("0xf7")]("",c))&&e.ErrorManager[_0x47c4("0xc8")].executeError(e[_0x47c4("0x58")].ErrorType.ANIMATION_FW,t[_0x47c4("0xf8")]),this[_0x47c4("0xeb")][_0x47c4("0xf6")](x)[_0x47c4("0xf6")](t.vZhKz("",c))},Object[_0x47c4("0xd6")](n[_0x47c4("0x6")],t[_0x47c4("0xf9")],{get:function(){return this[_0x47c4("0xee")]},set:function(x){this[_0x47c4("0xee")]=x},enumerable:!1,configurable:!0}),Object.defineProperty(n[_0x47c4("0x6")],t[_0x47c4("0xfa")],{get:function(){return this[_0x47c4("0xef")]},enumerable:!1,configurable:!0}),n);function n(x){this[_0x47c4("0x6e")]=x,this[_0x47c4("0xee")]=new Map,this[_0x47c4("0xef")]=new e[_0x47c4("0xf0")](this)}e[_0x47c4("0xfb")]=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={YMcyt:_0x47c4("0xfc"),dsvXh:_0x47c4("0xfd")};x=x[_0x47c4("0x58")]||(x.type={}),c={ostCo:c[_0x47c4("0xfe")],ctbbL:c[_0x47c4("0xff")],vBtTc:"SUPERIMPOSE"},(x=x[_0x47c4("0x103")]||(x.AudioStateType={}))[c[_0x47c4("0x100")]]=_0x47c4("0xfc"),x[c[_0x47c4("0x101")]]=_0x47c4("0xfd"),x.SUPERIMPOSE=c[_0x47c4("0x102")]}(_0x44fb7c=_0x44fb7c||{}),function(x){var c,e,t={UozRv:function(x,c){return x/c},pFoKX:function(x,c){return x*c},EuHwF:function(x,c){return x+c},DCKVZ:function(x,c){return x+c},naGRs:function(x,c){return x||c},JOEQk:function(x,c){return x||c},reSXA:function(x,c){return x(c)},Vqtsr:function(x,c){return x==c},UPoON:function(x,c){return c<x}};function n(){}c=x[_0x47c4("0x121")]||(x[_0x47c4("0x121")]={}),e={CHLjV:function(x,c){return t[_0x47c4("0x104")](x,c)},Zmflo:function(x,c){return t[_0x47c4("0x105")](x,c)},UmRIw:function(x,c){return t[_0x47c4("0x106")](x,c)},bozAG:function(x,c){return t.DCKVZ(x,c)},dcGkl:function(x,c){return t[_0x47c4("0x107")](x,c)},pbmEP:function(x,c){return t[_0x47c4("0x108")](x,c)},rFhKj:function(x,c){return t.UozRv(x,c)},oOiXx:function(x,c){return x+c},JDkIz:function(x,c){return t[_0x47c4("0x108")](x,c)},rqpAB:function(x,c){return t[_0x47c4("0x108")](x,c)},biIAT:function(x,c){return x(c)},BVeWi:function(x,c){return t.reSXA(x,c)},fngFM:function(x,c){return t.Vqtsr(x,c)},rNVQa:function(x,c){return x<c},KHBoA:function(x,c){return t[_0x47c4("0x109")](x,c)},GAIYH:function(x,c){return t.UPoON(x,c)},RvRmp:function(x,c){return x+c}},n.roundOff=function(x,c){return e[_0x47c4("0x10a")](Math[_0x47c4("0x10b")](e[_0x47c4("0x10a")](Math[_0x47c4("0x10b")](e[_0x47c4("0x10c")](x,Math[_0x47c4("0x10d")](10,e.UmRIw(c||0,1)))),10)),Math[_0x47c4("0x10d")](10,c||0))},n.roundDown=function(x,c){return e[_0x47c4("0x10a")](Math[_0x47c4("0x10e")](e[_0x47c4("0x10a")](Math[_0x47c4("0x10e")](e[_0x47c4("0x10c")](x,Math[_0x47c4("0x10d")](10,e.bozAG(e[_0x47c4("0x10f")](c,0),1)))),10)),Math[_0x47c4("0x10d")](10,e[_0x47c4("0x110")](c,0)))},n[_0x47c4("0x111")]=function(x,c){return e[_0x47c4("0x112")](Math[_0x47c4("0x113")](e[_0x47c4("0x112")](Math[_0x47c4("0x113")](e.Zmflo(x,Math[_0x47c4("0x10d")](10,e[_0x47c4("0x114")](e[_0x47c4("0x115")](c,0),1)))),10)),Math[_0x47c4("0x10d")](10,e[_0x47c4("0x116")](c,0)))},n[_0x47c4("0x117")]=function(x){var c=e[_0x47c4("0x118")](String,x).indexOf(".")+1,x=e.BVeWi(String,x).length-c;return e[_0x47c4("0x119")](c,0)?0:x},n[_0x47c4("0x11a")]=function(x){return e[_0x47c4("0x11b")](x,1e3)?e.KHBoA(x,""):e[_0x47c4("0x11c")](x,1e3)?e[_0x47c4("0x11d")](x/1e3,"K"):void 0},n[_0x47c4("0x11e")]=function(x){return this[_0x47c4("0x11f")][_0x47c4("0x11e")](x)},n[_0x47c4("0x11f")]=new Intl.NumberFormat,x=n,c[_0x47c4("0x120")]=x}(_0x44fb7c=_0x44fb7c||{}),function(x){var t,c={SPQDL:_0x47c4("0x122"),hggzg:"prefab",aSnnG:_0x47c4("0x123"),gAwQr:_0x47c4("0x124")};x=x.type||(x.type={}),t={WdBGw:_0x47c4("0x125"),funkY:c[_0x47c4("0x126")],HjOAk:_0x47c4("0x127"),jrNMk:c.hggzg,cAWXB:_0x47c4("0x128"),NeJEH:c[_0x47c4("0x129")],IQJth:c[_0x47c4("0x12a")],PBgMp:_0x47c4("0x12b")},function(x){for(var c=t[_0x47c4("0x12c")][_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":x[x.music=3]=t.funkY;continue;case"1":x[x[_0x47c4("0x127")]=0]=t[_0x47c4("0x12d")];continue;case"2":x[x[t.jrNMk]=2]=_0x47c4("0x12e");continue;case"3":x[x[_0x47c4("0x128")]=5]=t.cAWXB;continue;case"4":x[x[t[_0x47c4("0x12f")]]=6]=_0x47c4("0x123");continue;case"5":x[x[_0x47c4("0x124")]=4]=t[_0x47c4("0x130")];continue;case"6":x[x.css=7]=_0x47c4("0x131");continue;case"7":x[x[t[_0x47c4("0x132")]]=1]=_0x47c4("0x12b");continue}break}}(x[_0x47c4("0x133")]||(x[_0x47c4("0x133")]={}))}(_0x44fb7c=_0x44fb7c||{}),function(c){var n,_,i={EFQHL:_0x47c4("0xec"),ZoLdJ:function(x,c){return x-c},MrDFG:function(x,c,e){return x(c,e)},nPuwd:function(x,c){return x(c)},Xnsgg:_0x47c4("0x134"),HHqLU:_0x47c4("0x135"),kMpvq:"instance",XBwAJ:_0x47c4("0x136"),Wdudb:_0x47c4("0x137")},x=(n=cc.EventTarget,_={zCiEC:i.HHqLU},i[_0x47c4("0x138")](_0x146e9c,e,n),e[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this._instance=new e(x),c.eventMgr=this[_0x47c4("0xd4")])},Object[_0x47c4("0xd6")](e,i[_0x47c4("0x13b")],{get:function(){if(this[_0x47c4("0xd4")])return this[_0x47c4("0xd4")];c[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](c.type[_0x47c4("0x57")][_0x47c4("0x7d")],i[_0x47c4("0x13c")])},enumerable:!1,configurable:!0}),e[_0x47c4("0x6")].emitEvent=function(x){for(var c,e=[],t=1;t<arguments[_0x47c4("0x1c")];t++)e[i.ZoLdJ(t,1)]=arguments[t];e?(c=this[_0x47c4("0x13d")])[_0x47c4("0x13e")][_0x47c4("0x13f")](c,i[_0x47c4("0x138")](_0x7b847e,[x],i[_0x47c4("0x140")](_0x5589e9,e))):this[_0x47c4("0x13d")][_0x47c4("0x13e")](x)},e[_0x47c4("0x6")].eventListener=function(x,c,e){this[_0x47c4("0x13a")]+=1,this[_0x47c4("0x139")][_0x47c4("0x141")](i[_0x47c4("0x142")],x),e?this[_0x47c4("0x13d")].on(x,c):this.target.once(x,c)},e.prototype[_0x47c4("0x143")]=function(x,c,e){this[_0x47c4("0x13d")][_0x47c4("0x144")](x,c,e)},e[_0x47c4("0x6")][_0x47c4("0x145")]=function(x,c){return c[_0x47c4("0x146")](x)},Object[_0x47c4("0xd6")](e.prototype,i[_0x47c4("0x147")],{get:function(){return this[_0x47c4("0x13a")]},enumerable:!1,configurable:!0}),Object.defineProperty(e[_0x47c4("0x6")],i[_0x47c4("0x148")],{get:function(){return this[_0x47c4("0x139")]},enumerable:!1,configurable:!0}),e);function e(x){for(var c=_.zCiEC.split("|"),e=0;;){switch(c[e++]){case"0":t[_0x47c4("0x6e")]=x;continue;case"1":t.target=new cc.EventTarget;continue;case"2":t[_0x47c4("0x139")]=new Map;continue;case"3":return t;case"4":var t=n[_0x47c4("0x8")](this)||this;continue;case"5":t[_0x47c4("0x13a")]=0;continue}break}}c[_0x47c4("0x149")]=x}(_0x44fb7c=_0x44fb7c||{}),function(n){var x={KaSDn:_0x47c4("0xec"),tOXha:_0x47c4("0xc8"),rRexv:_0x47c4("0x14a")},c=(e[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this[_0x47c4("0xd4")]=new e(x),n.processMgr=this[_0x47c4("0xd4")])},Object[_0x47c4("0xd6")](e,x[_0x47c4("0x150")],{get:function(){if(this._instance)return this[_0x47c4("0xd4")];n[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](n[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x43")],x[_0x47c4("0x151")])},enumerable:!1,configurable:!0}),e[_0x47c4("0x6")][_0x47c4("0x152")]=function(x,c){return this[_0x47c4("0x14b")][_0x47c4("0x152")](x,c),this},e.prototype[_0x47c4("0x153")]=function(x){this[_0x47c4("0x14b")].initProcess(x)},e[_0x47c4("0x6")][_0x47c4("0x154")]=function(x){this.gameProcessFactory.changeProcess(x)},e[_0x47c4("0x6")][_0x47c4("0x155")]=function(x){this[_0x47c4("0x14b")][_0x47c4("0x155")](x)},e[_0x47c4("0x6")][_0x47c4("0x156")]=function(){var t={qVKnb:function(x){return x()},oWIpw:function(x,c,e){return x(c,e)}},x=this;return new Promise(function(e){return _0x26f3e4(x,void 0,void 0,function(){var c=function(x){return t.qVKnb(x)};return t[_0x47c4("0x157")](_0x32ef64,this,function(x){switch(x[_0x47c4("0x2e")]){case 0:return this[_0x47c4("0x14f")]?[3,2]:(this[_0x47c4("0x158")](!0),[4,this[_0x47c4("0x14b")][_0x47c4("0x159")]()]);case 1:return x[_0x47c4("0x15a")](),this[_0x47c4("0x158")](!1),c(e),[3,3];case 2:n.ErrorManager.instance[_0x47c4("0x96")](n[_0x47c4("0x58")].ErrorType[_0x47c4("0x43")],_0x47c4("0x15b")),x[_0x47c4("0x2e")]=3;case 3:return[2]}})})})},e[_0x47c4("0x6")][_0x47c4("0x158")]=function(x){this[_0x47c4("0x14f")]=x},e[_0x47c4("0x6")][_0x47c4("0x15c")]=function(){this[_0x47c4("0x14f")]=!1},Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],x[_0x47c4("0x15d")],{get:function(){return this[_0x47c4("0x14d")]},set:function(x){this._gameState=x},enumerable:!1,configurable:!0}),e);function e(x){this[_0x47c4("0x6e")]=x,this[_0x47c4("0x14b")]=new n[_0x47c4("0x14c")](this),this[_0x47c4("0x14d")]=n[_0x47c4("0x58")][_0x47c4("0x14e")].STANDBY,this[_0x47c4("0x14f")]=!1}n[_0x47c4("0x15e")]=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={HHEkB:"AUTO",hmPAo:_0x47c4("0x15f"),JWGzr:_0x47c4("0x160")};(x=(x=x[_0x47c4("0x58")]||(x[_0x47c4("0x58")]={}))[_0x47c4("0x164")]||(x[_0x47c4("0x164")]={}))[c.HHEkB]=c[_0x47c4("0x161")],x[c[_0x47c4("0x162")]]=_0x47c4("0x15f"),x[c[_0x47c4("0x163")]]=c[_0x47c4("0x163")]}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={sirnF:_0x47c4("0x165"),sZBKd:"LANDSCAPE"};(x=(x=x.type||(x[_0x47c4("0x58")]={})).SceneDirectionType||(x[_0x47c4("0x168")]={}))[c[_0x47c4("0x166")]]=c[_0x47c4("0x166")],x[c[_0x47c4("0x167")]]=c.sZBKd}(_0x44fb7c=_0x44fb7c||{}),function(x){var n,_={EFCLA:function(x,c,e){return x(c,e)},YlqKH:"canvas-resize",FpHSz:function(x,c,e,t,n){return x(c,e,t,n)},rpKwI:_0x47c4("0x169")},c=(n={ObZLO:function(x,c,e,t,n){return _[_0x47c4("0x16a")](x,c,e,t,n)},KUACv:function(x,c,e){return _[_0x47c4("0x16b")](x,c,e)},kpCrl:_.rpKwI},e[_0x47c4("0x6")][_0x47c4("0x16d")]=function(e){var x={odWVN:function(x,c,e){return _[_0x47c4("0x16b")](x,c,e)}},c=this;cc[_0x47c4("0x16e")].on(_[_0x47c4("0x16f")],function(){return n[_0x47c4("0x170")](_0x26f3e4,c,void 0,void 0,function(){var c="更新畫面完畢......";return x[_0x47c4("0x171")](_0x32ef64,this,function(x){switch(x.label){case 0:return[4,this[_0x47c4("0x172")](e)];case 1:return x[_0x47c4("0x15a")](),cc[_0x47c4("0x6b")](c),[2]}})})})},e[_0x47c4("0x6")][_0x47c4("0x172")]=function(e){var t=this;return new Promise(function(x,c){t[_0x47c4("0x16c")]?(t[_0x47c4("0x16c")]=!1,n[_0x47c4("0x173")](setTimeout,function(){t.sceneManager[_0x47c4("0x174")](),t[_0x47c4("0x16c")]=!0,x()},e)):t[_0x47c4("0x6e")][_0x47c4("0x175")]&&c(n[_0x47c4("0x176")])})},e);function e(x,c){this[_0x47c4("0x16c")]=!0,this[_0x47c4("0x6e")]=x,this.sceneManager=c}x.SceneSizeChangeListener=c}(_0x44fb7c=_0x44fb7c||{}),function(e){var x,t,n={Pzfpa:function(x,c){return x+c},HmstO:_0x47c4("0x177")};function c(){this[_0x47c4("0x179")]=new Set}x=e[_0x47c4("0x184")]||(e.ABS={}),t={AxAFh:function(x,c){return n.Pzfpa(x,c)},YCuWp:function(x,c){return x+c},YdkNe:n[_0x47c4("0x178")]},c[_0x47c4("0x6")][_0x47c4("0x17a")]=function(x,c){this.observer[_0x47c4("0xf4")](x)?e.ErrorManager[_0x47c4("0xc8")][_0x47c4("0x96")](e[_0x47c4("0x58")].ErrorType.SCENE_FW,t.AxAFh(x,_0x47c4("0x17b"))):(x[_0x47c4("0x17c")]=c,this[_0x47c4("0x179")][_0x47c4("0x17d")](x))},c[_0x47c4("0x6")][_0x47c4("0x17e")]=function(x){this[_0x47c4("0x179")][_0x47c4("0xf4")](x)?this[_0x47c4("0x179")][_0x47c4("0x17f")](x):e[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](e.type[_0x47c4("0x57")][_0x47c4("0x43")],t[_0x47c4("0x180")](x,t.YdkNe))},c[_0x47c4("0x6")][_0x47c4("0x181")]=function(){this[_0x47c4("0x179")][_0x47c4("0x182")]()},c.prototype.getSubscribeCount=function(){return this[_0x47c4("0x179")].size},c.prototype[_0x47c4("0x183")]=function(){return this[_0x47c4("0x179")]},x.ABaseNotification=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var t={gjKOn:_0x47c4("0x185"),CUOQz:"USER_GET_WIN",goWgK:_0x47c4("0x186"),ZxxBQ:_0x47c4("0x187"),Camlu:"STOP_NOW",ZNofY:"SPEED_CHANGE",EzFtM:"RESPONSE_RESULT",okQiV:_0x47c4("0x188"),JHWnZ:_0x47c4("0x189")};(function(x){for(var c=t[_0x47c4("0x18a")][_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":x.USER_GET_WIN=t[_0x47c4("0x18b")];continue;case"1":x[t.goWgK]=t.goWgK;continue;case"2":x[t[_0x47c4("0x18c")]]=t[_0x47c4("0x18c")];continue;case"3":x[t[_0x47c4("0x18d")]]=t[_0x47c4("0x18d")];continue;case"4":x[t.ZNofY]=t.ZNofY;continue;case"5":x.USER_BET_CHANGE=_0x47c4("0x18e");continue;case"6":x[t[_0x47c4("0x18f")]]=t[_0x47c4("0x18f")];continue;case"7":x[_0x47c4("0x188")]=t[_0x47c4("0x190")];continue;case"8":x.SCROLL_FOCUS_STATE=t.JHWnZ;continue}break}})((x=x[_0x47c4("0x58")]||(x[_0x47c4("0x58")]={}))[_0x47c4("0x191")]||(x[_0x47c4("0x191")]={}))}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={ZXDlJ:_0x47c4("0x17c")},c=(e.prototype.pushNotification=function(x){this.callFun[_0x47c4("0x8")](this.self,x)},Object.defineProperty(e[_0x47c4("0x6")],c[_0x47c4("0x195")],{get:function(){return this._isPermanent},set:function(x){this[_0x47c4("0x192")]=x},enumerable:!1,configurable:!0}),e);function e(x,c){this[_0x47c4("0x192")]=!1,this[_0x47c4("0x193")]=c,this[_0x47c4("0x194")]=x}x[_0x47c4("0x196")]=c}(_0x44fb7c=_0x44fb7c||{}),function(c){var e,i={qHdnP:function(x,c){return c<x},bMRao:function(x,c){return x(c)},mYcrG:function(x,c,e){return x(c,e)}},x=(e=c[_0x47c4("0x184")].ABaseNotification,i[_0x47c4("0x197")](_0x146e9c,t,e),t[_0x47c4("0x6")][_0x47c4("0x17a")]=function(x,c){e.prototype.subscribe[_0x47c4("0x8")](this,x,c)},t[_0x47c4("0x6")][_0x47c4("0x199")]=function(x){var c,e;if(i[_0x47c4("0x19a")](this[_0x47c4("0x179")][_0x47c4("0x19b")],0))try{for(var t=i[_0x47c4("0x19c")](_0x9fa626,this[_0x47c4("0x179")]),n=t[_0x47c4("0x16")]();!n.done;n=t.next()){var _=n[_0x47c4("0x26")];_[_0x47c4("0x19d")](x),_[_0x47c4("0x17c")]||this.unsubscribe(_)}}catch(x){c={error:x}}finally{try{n&&!n[_0x47c4("0x17")]&&(e=t[_0x47c4("0x19")])&&e.call(t)}finally{if(c)throw c[_0x47c4("0x1a")]}}},t);function t(){var x=e[_0x47c4("0x8")](this)||this;return x[_0x47c4("0x198")]=c[_0x47c4("0x58")][_0x47c4("0x191")].SCENE_DIRECTION_CHANGE,x}c.SceneDirectionChangeNotification=x}(_0x44fb7c=_0x44fb7c||{}),function(c){var n,e={PJORz:function(x,c){return x==c},YOXUj:function(x,c){return x==c},Gdrlk:_0x47c4("0x19e"),jMAFj:function(x,c){return c<=x},YsMcV:function(x,c){return x/c},VtXsK:function(x,c){return c<x},tziFK:function(x,c){return x*c}},x=(n={NxDgh:e[_0x47c4("0x19f")],VzFIC:function(x,c){return e[_0x47c4("0x1a0")](x,c)},bCdXx:function(x,c){return e[_0x47c4("0x1a1")](x,c)},epZYQ:function(x,c){return e[_0x47c4("0x1a2")](x,c)},nOhcD:function(x,c){return e.jMAFj(x,c)},iRaab:function(x,c){return x/c},ntIlx:function(x,c){return e[_0x47c4("0x1a3")](x,c)}},t.prototype[_0x47c4("0x1a9")]=function(x,c){var e,t;this[_0x47c4("0x1aa")](),n[_0x47c4("0x1ab")](n[_0x47c4("0x1ac")](cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]()[_0x47c4("0x1ae")],cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]().height),n.bCdXx(x,c))?(e=cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]()[_0x47c4("0x1ae")]*n[_0x47c4("0x1ac")](x,cc[_0x47c4("0x16e")].getFrameSize().height),cc.view[_0x47c4("0x1af")](e,c,cc[_0x47c4("0x1b0")][_0x47c4("0x1b1")])):n[_0x47c4("0x1b2")](cc.view[_0x47c4("0x1ad")]()[_0x47c4("0x1ae")],cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]()[_0x47c4("0x1b3")])?(t=cc.view[_0x47c4("0x1ad")]()[_0x47c4("0x1b3")]*n[_0x47c4("0x1ac")](x,cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]()[_0x47c4("0x1ae")]),cc[_0x47c4("0x16e")].setDesignResolutionSize(x,t,cc[_0x47c4("0x1b0")][_0x47c4("0x1b4")])):n[_0x47c4("0x1b5")](cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]().width/cc.view[_0x47c4("0x1ad")]().height,n.bCdXx(1e3,1777))?(t=cc[_0x47c4("0x16e")].getFrameSize()[_0x47c4("0x1b3")]*n[_0x47c4("0x1b6")](1e3,cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]().width),cc[_0x47c4("0x16e")][_0x47c4("0x1af")](1e3,t,cc[_0x47c4("0x1b0")][_0x47c4("0x1b1")])):(t=n.ntIlx(cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]()[_0x47c4("0x1b3")],n[_0x47c4("0x1b6")](1e3,cc.view.getFrameSize()[_0x47c4("0x1ae")])),cc.view[_0x47c4("0x1af")](1e3,t,cc.ResolutionPolicy[_0x47c4("0x1b4")]))},t[_0x47c4("0x6")][_0x47c4("0x1aa")]=function(){cc.view.getFrameSize().width<cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]()[_0x47c4("0x1b3")]?e[_0x47c4("0x1b7")](this[_0x47c4("0x1a4")][_0x47c4("0x1b8")],c.type[_0x47c4("0x168")][_0x47c4("0x165")])||(this[_0x47c4("0x1a4")][_0x47c4("0x1b8")]=c[_0x47c4("0x58")][_0x47c4("0x168")][_0x47c4("0x165")],this[_0x47c4("0x1a7")]||c[_0x47c4("0x1a5")][_0x47c4("0xc8")]()[_0x47c4("0x1b9")](c[_0x47c4("0x58")][_0x47c4("0x191")][_0x47c4("0x188")])[_0x47c4("0x199")](c[_0x47c4("0x58")][_0x47c4("0x168")][_0x47c4("0x165")])):e[_0x47c4("0x1ba")](this[_0x47c4("0x1a4")].sceneDirection,c[_0x47c4("0x58")].SceneDirectionType[_0x47c4("0x1bb")])||(this[_0x47c4("0x1a4")][_0x47c4("0x1b8")]=c[_0x47c4("0x58")].SceneDirectionType[_0x47c4("0x1bb")],this[_0x47c4("0x1a7")]||c[_0x47c4("0x1a5")][_0x47c4("0xc8")]()[_0x47c4("0x1b9")](c[_0x47c4("0x58")].NotificationType.SCENE_DIRECTION_CHANGE)[_0x47c4("0x199")](c[_0x47c4("0x58")][_0x47c4("0x168")][_0x47c4("0x1bb")]))},t);function t(x){this[_0x47c4("0x1a4")]=x,c[_0x47c4("0x1a5")].instance()[_0x47c4("0x1a6")](c[_0x47c4("0x58")][_0x47c4("0x191")][_0x47c4("0x188")])?this[_0x47c4("0x1a7")]=!1:(this[_0x47c4("0x1a7")]=!0,console[_0x47c4("0x6b")](n[_0x47c4("0x1a8")]))}c[_0x47c4("0x1bc")]=x}(_0x44fb7c=_0x44fb7c||{}),function(x){var s={UHceo:"8|6|7|5|9|2|3|4|11|10|0|1",BxZDW:"Canvas",YWuBy:function(x,c){return c<x},mNZIv:function(x,c){return x/c},LBTka:function(x,c){return x*c},VhSYy:function(x,c){return x*c}},c=(e[_0x47c4("0x6")][_0x47c4("0x1a9")]=function(x,c){for(var e=s[_0x47c4("0x1bd")][_0x47c4("0x12")]("|"),t=0;;){switch(e[t++]){case"0":u[_0x47c4("0x1be")][_0x47c4("0x1ae")]=_;continue;case"1":u[_0x47c4("0x1be")][_0x47c4("0x1b3")]=i;continue;case"2":var n=r[_0x47c4("0x1b3")];continue;case"3":var _=a;continue;case"4":var i=n;continue;case"5":var r=cc[_0x47c4("0x16e")][_0x47c4("0x1ad")]();continue;case"6":this[_0x47c4("0x1bf")]||(this[_0x47c4("0x1bf")]=cc[_0x47c4("0x19b")](x,c));continue;case"7":var o=this[_0x47c4("0x1bf")];continue;case"8":var u=cc.find(s[_0x47c4("0x1c0")])[_0x47c4("0x1c1")](cc[_0x47c4("0x1c2")]);continue;case"9":var a=r.width;continue;case"10":u.designResolution=cc[_0x47c4("0x19b")](_,i);continue;case"11":s[_0x47c4("0x1c3")](s[_0x47c4("0x1c4")](a,n),o[_0x47c4("0x1ae")]/o[_0x47c4("0x1b3")])?(u.fitHeight=!0,u[_0x47c4("0x1c5")]=!1,i=o.height,_=s[_0x47c4("0x1c6")](i,a)/n):(u[_0x47c4("0x1c7")]=!1,u.fitWidth=!0,_=o.width,i=s[_0x47c4("0x1c8")](s[_0x47c4("0x1c4")](n,a),_));continue}break}},e);function e(){}x[_0x47c4("0x1c9")]=c}(_0x44fb7c=_0x44fb7c||{}),function(e){var t={tQgeH:_0x47c4("0x1ca")},x=(c[_0x47c4("0x6")].executionStyle=function(x,c){e.ErrorManager.instance[_0x47c4("0x96")](t[_0x47c4("0x1cb")])},c);function c(){}e[_0x47c4("0x1cc")]=x}(_0x44fb7c=_0x44fb7c||{}),function(t){var x=(c[_0x47c4("0x6")].getStyle=function(x,c,e){switch(x){case t[_0x47c4("0x58")][_0x47c4("0x164")][_0x47c4("0x1cd")]:this.autoStyle||(this.autoStyle=new t[_0x47c4("0x1bc")](this[_0x47c4("0x1a4")])),this[_0x47c4("0x1ce")][_0x47c4("0x1a9")](c,e);break;case t[_0x47c4("0x58")][_0x47c4("0x164")][_0x47c4("0x15f")]:this[_0x47c4("0x1cf")]||(this[_0x47c4("0x1cf")]=new t[_0x47c4("0x1c9")]),this[_0x47c4("0x1cf")][_0x47c4("0x1a9")](c,e);break;case t[_0x47c4("0x58")][_0x47c4("0x164")][_0x47c4("0x160")]:this[_0x47c4("0x1d0")]||(this.verticalStyle=new t[_0x47c4("0x1cc")]),this.verticalStyle[_0x47c4("0x1a9")](c,e);break;default:x[_0x47c4("0x1a9")](c,e)}},c);function c(x){this[_0x47c4("0x1a4")]=x}t[_0x47c4("0x1d1")]=x}(_0x44fb7c=_0x44fb7c||{}),function(t){var c,x={UJzGe:_0x47c4("0x1d2")},x=(c={YzQoP:x[_0x47c4("0x1d3")]},e[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this[_0x47c4("0xd4")]=new e(x),t.sceneMgr=this[_0x47c4("0xd4")])},Object[_0x47c4("0xd6")](e,_0x47c4("0xc8"),{get:function(){if(this[_0x47c4("0xd4")])return this[_0x47c4("0xd4")];t.ErrorManager[_0x47c4("0xc8")][_0x47c4("0x96")](t[_0x47c4("0x58")][_0x47c4("0x57")].SCENE_FW,_0x47c4("0xec"))},enumerable:!1,configurable:!0}),e[_0x47c4("0x6")][_0x47c4("0x1d9")]=function(x){return this[_0x47c4("0x1da")]=x,this},e.prototype.setDesignHeight=function(x){return this._designHeight=x,this},e[_0x47c4("0x6")][_0x47c4("0x174")]=function(x){if(x)switch(this[_0x47c4("0x1d5")]=x){case t.type.SceneStyleType[_0x47c4("0x15f")]:this[_0x47c4("0x1db")]=t[_0x47c4("0x58")][_0x47c4("0x168")][_0x47c4("0x165")];break;case t.type[_0x47c4("0x164")].VERTICAL:this._sceneDirection=t.type[_0x47c4("0x168")].LANDSCAPE;break;case t[_0x47c4("0x58")].SceneStyleType[_0x47c4("0x1cd")]:break;default:console[_0x47c4("0x6b")](c[_0x47c4("0x1dc")])}return this[_0x47c4("0x1dd")].getStyle(this.style,this[_0x47c4("0x1da")],this[_0x47c4("0x1d8")]),this},e[_0x47c4("0x6")][_0x47c4("0x1de")]=function(x){this.sceneSizeChangeListener[_0x47c4("0x16d")](x)},e[_0x47c4("0x6")][_0x47c4("0x1df")]=function(x){t.LoadResManager[_0x47c4("0xc8")][_0x47c4("0x1e0")][_0x47c4("0xf4")](x)||t.ErrorManager[_0x47c4("0xc8")].executeError(t[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7b")],_0x47c4("0x1e1")),cc.director[_0x47c4("0x1e2")](t[_0x47c4("0x1e3")].instance.sceneRes.get(x))},e[_0x47c4("0x6")][_0x47c4("0x1e4")]=function(x){x.destroy()},Object.defineProperty(e.prototype,"sceneDirection",{get:function(){return this[_0x47c4("0x1db")]},set:function(x){this[_0x47c4("0x1db")]=x},enumerable:!1,configurable:!0}),e);function e(x){for(var c=_0x47c4("0x1d4").split("|"),e=0;;){switch(c[e++]){case"0":this[_0x47c4("0x1d5")]=t[_0x47c4("0x58")][_0x47c4("0x164")].HORIZONTAL;continue;case"1":this.sceneStyleHandler=new t[_0x47c4("0x1d1")](this);continue;case"2":this._designWidth=1280;continue;case"3":this[_0x47c4("0x1d6")]=new t[_0x47c4("0x1d7")](x,this);continue;case"4":this[_0x47c4("0x6e")]=x;continue;case"5":this[_0x47c4("0x1d8")]=720;continue}break}}t[_0x47c4("0x1e5")]=x}(_0x44fb7c=_0x44fb7c||{}),function(c){var x,e={HOdcs:_0x47c4("0x1e6"),sTMaT:_0x47c4("0xec"),uorBd:_0x47c4("0xc8"),peadv:"slot"},t=(x={iWoZD:e[_0x47c4("0x1e7")]},n[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this[_0x47c4("0xd4")]=new n(x),c[_0x47c4("0x1e8")]=this[_0x47c4("0xd4")])},Object[_0x47c4("0xd6")](n,e[_0x47c4("0x1e9")],{get:function(){if(this[_0x47c4("0xd4")])return this._instance;c[_0x47c4("0x94")].instance[_0x47c4("0x96")](c[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7f")],x.iWoZD)},enumerable:!1,configurable:!0}),n[_0x47c4("0x6")].setSlotTemplate=function(x){return this[_0x47c4("0x1ea")]=x,this},n[_0x47c4("0x6")][_0x47c4("0x1eb")]=function(x){return new x(this)},n[_0x47c4("0x6")][_0x47c4("0x1ec")]=function(x){this[_0x47c4("0x1ea")]||c[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](c[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x41")],e[_0x47c4("0x1ed")]),this[_0x47c4("0x1ee")]=new this[_0x47c4("0x1ea")](x,this[_0x47c4("0x6e")])},Object.defineProperty(n[_0x47c4("0x6")],e.peadv,{get:function(){return this._slot},enumerable:!1,configurable:!0}),n);function n(x){this[_0x47c4("0x6e")]=x}c[_0x47c4("0x1ef")]=t}(_0x44fb7c=_0x44fb7c||{}),function(x){var t,c={FnXaO:"AUTO",zJXEi:_0x47c4("0x1f0"),rSKBI:"AUTO_1000"};x=x[_0x47c4("0x58")]||(x[_0x47c4("0x58")]={}),t={RlPEi:_0x47c4("0x1f1"),UlZVn:c[_0x47c4("0x1f2")],uTDNg:c[_0x47c4("0x1f3")],uOndO:c[_0x47c4("0x1f4")],MrsrN:_0x47c4("0x1f5")},function(x){for(var c=_0x47c4("0x1f6")[_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":x[x.AUTO_100=100]=t[_0x47c4("0x1f7")];continue;case"1":x[x[t[_0x47c4("0x1f8")]]=-1]=t[_0x47c4("0x1f8")];continue;case"2":x[x[t[_0x47c4("0x1f9")]]=50]=t[_0x47c4("0x1f9")];continue;case"3":x[x[_0x47c4("0x1fa")]=1e3]=t[_0x47c4("0x1fb")];continue;case"4":x[x[_0x47c4("0x1fc")]=-2]="FREE_END";continue;case"5":x[x[t.MrsrN]=500]=t[_0x47c4("0x1fd")];continue}break}}(x.AutoType||(x[_0x47c4("0x1fe")]={}))}(_0x44fb7c=_0x44fb7c||{}),function(x){var t,c={leDjw:_0x47c4("0x1ff"),hGGae:_0x47c4("0x200"),cpBCg:_0x47c4("0x201"),SQVFr:"THB",lCKiq:"IDR",whWjk:_0x47c4("0x202"),TnJOf:_0x47c4("0x203"),TCXBE:_0x47c4("0x204"),GaPxy:_0x47c4("0x205"),Efakw:_0x47c4("0x206")};x=x.type||(x[_0x47c4("0x58")]={}),t={dDCtE:c[_0x47c4("0x207")],AZYij:c[_0x47c4("0x208")],cwpbj:c.cpBCg,bXAbX:"THAILAND",piHMO:c.SQVFr,vIgqc:c.lCKiq,oUhUd:_0x47c4("0x209"),nyOdT:c[_0x47c4("0x20a")],FpMyU:c[_0x47c4("0x20b")],rRlVA:c.TCXBE,RLPfR:c[_0x47c4("0x20c")],oboaW:c[_0x47c4("0x20d")]},function(x){for(var c=t[_0x47c4("0x20e")][_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":x[t[_0x47c4("0x20f")]]=t.cwpbj;continue;case"1":x[t.bXAbX]=t[_0x47c4("0x210")];continue;case"2":x.INDONESIA=t[_0x47c4("0x211")];continue;case"3":x[t[_0x47c4("0x212")]]=t[_0x47c4("0x213")];continue;case"4":x[_0x47c4("0x214")]=t[_0x47c4("0x215")];continue;case"5":x[t.rRlVA]=t[_0x47c4("0x216")];continue;case"6":x[_0x47c4("0x217")]=t.oboaW;continue}break}}(x[_0x47c4("0x218")]||(x.LanguageType={}))}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={LXTnC:_0x47c4("0xc8"),dEqSz:_0x47c4("0x219"),Mpdhy:_0x47c4("0x21a"),MrXkj:_0x47c4("0x21b"),xZaWg:_0x47c4("0x21c"),zvJmc:_0x47c4("0x21d"),FRHXH:_0x47c4("0x21e"),tLqCK:_0x47c4("0x175"),WHZmi:_0x47c4("0x21f"),AJzhm:_0x47c4("0x220"),rgBMo:_0x47c4("0x221")},c=(Object[_0x47c4("0xd6")](e,c[_0x47c4("0x22c")],{get:function(){return this[_0x47c4("0xd4")]||(this._instance=new e),this._instance},enumerable:!1,configurable:!0}),e[_0x47c4("0x6")][_0x47c4("0x22d")]=function(x){return this[_0x47c4("0x22e")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x22f")]=function(x){return this[_0x47c4("0x225")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x230")]=function(x){return this[_0x47c4("0x226")]=x,this},e.prototype[_0x47c4("0x231")]=function(x){return this._isMusicOnMute=x,this},e.prototype[_0x47c4("0x232")]=function(x){return this._isEffectOnMute=x,this},e[_0x47c4("0x6")].setAutoCont=function(x){return this._autoCount=x,this},e[_0x47c4("0x6")].setExternallyLoadURL=function(x){return this[_0x47c4("0x233")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x234")]=function(x){return this[_0x47c4("0x228")]=x,this},e[_0x47c4("0x6")].setAutoState=function(x){return this[_0x47c4("0x222")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x235")]=function(x){return this[_0x47c4("0x223")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x236")]=function(x){return this._isFrameworkDebug=x,this},e[_0x47c4("0x6")][_0x47c4("0x237")]=function(x){return this[_0x47c4("0x229")]=x,this},e.prototype[_0x47c4("0x238")]=function(x){return this._backHomeURL=x,this},e[_0x47c4("0x6")][_0x47c4("0x1ec")]=function(){cc[_0x47c4("0x6c")]._resetDebugSetting(this[_0x47c4("0x229")]),x.ErrorManager[_0x47c4("0xd3")](this),x[_0x47c4("0x239")][_0x47c4("0xd3")](this),x[_0x47c4("0x23a")][_0x47c4("0xd3")](this),x[_0x47c4("0x149")][_0x47c4("0xd3")](this),x[_0x47c4("0x1e3")][_0x47c4("0xd3")](this),x.ProcessManager[_0x47c4("0xd3")](this),x[_0x47c4("0x1e5")][_0x47c4("0xd3")](this),x[_0x47c4("0x1ef")][_0x47c4("0xd3")](this)},Object[_0x47c4("0xd6")](e.prototype,c[_0x47c4("0x23b")],{get:function(){return this[_0x47c4("0x233")]},enumerable:!1,configurable:!0}),Object.defineProperty(e[_0x47c4("0x6")],_0x47c4("0x23c"),{get:function(){return this._gameNumber},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x23d")],{get:function(){return this[_0x47c4("0x222")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x23e")],{get:function(){return this._autoCount},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,_0x47c4("0x23f"),{get:function(){return this[_0x47c4("0x223")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c.xZaWg,{get:function(){return this[_0x47c4("0x225")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,c.zvJmc,{get:function(){return this[_0x47c4("0x226")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x240")],{get:function(){return this[_0x47c4("0x228")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,c.tLqCK,{get:function(){return this[_0x47c4("0x241")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],_0x47c4("0x242"),{get:function(){return this[_0x47c4("0x227")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x243")],{get:function(){return this[_0x47c4("0x244")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,c[_0x47c4("0x245")],{get:function(){return this[_0x47c4("0x246")]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,c[_0x47c4("0x247")],{get:function(){return this[_0x47c4("0x229")]},enumerable:!1,configurable:!0}),e);function e(){this._gameNumber=null,this._externallyLoadURL="",this[_0x47c4("0x222")]=!1,this[_0x47c4("0x223")]=!1,this[_0x47c4("0x224")]=x[_0x47c4("0x58")][_0x47c4("0x1fe")][_0x47c4("0x1cd")],this[_0x47c4("0x225")]=1,this[_0x47c4("0x226")]=1,this._isMusicOnMute=!1,this[_0x47c4("0x227")]=!1,this[_0x47c4("0x228")]=x[_0x47c4("0x58")].LanguageType.CHINESE,this._backHomeURL=null,this[_0x47c4("0x229")]=cc[_0x47c4("0x6c")][_0x47c4("0x22a")][_0x47c4("0x22b")],this._isFrameworkDebug=!0}x[_0x47c4("0x248")]=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var c;function e(x,c,e){this[_0x47c4("0x24a")]=x,this[_0x47c4("0x58")]=c,this.url=e}c=x.ABS||(x[_0x47c4("0x184")]={}),x={nKCgz:_0x47c4("0x249")},e[_0x47c4("0x249")]=document[_0x47c4("0x24b")](x[_0x47c4("0x24c")])[0],x=e,c.ALoadScriptType=x}(_0x44fb7c=_0x44fb7c||{}),function(t){var n,_={QnTJn:_0x47c4("0x24d"),cSHFz:"5|1|6|0|4|3|2",MvfIw:function(x,c){return x+c},VpqtW:_0x47c4("0x24e"),VfCrC:function(x,c){return x+c},yVjMl:_0x47c4("0x24f"),VHTPS:_0x47c4("0x250")},x=(n=t.ABS.ALoadScriptType,_0x146e9c(c,n),c[_0x47c4("0x6")][_0x47c4("0x253")]=function(){for(var x=_[_0x47c4("0x254")].split("|"),c=0;;){switch(x[c++]){case"0":this[_0x47c4("0x255")][_0x47c4("0x58")]=this[_0x47c4("0x58")];continue;case"1":t[_0x47c4("0x1e3")].instance[_0x47c4("0x256")].has(e)&&t[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](t.type[_0x47c4("0x57")][_0x47c4("0x3f")],_[_0x47c4("0x257")](_[_0x47c4("0x258")],e));continue;case"2":t[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x256")].add(e);continue;case"3":t[_0x47c4("0x184")].ALoadScriptType[_0x47c4("0x249")][_0x47c4("0x259")](this[_0x47c4("0x255")]);continue;case"4":this[_0x47c4("0x255")].href=e;continue;case"5":var e=_[_0x47c4("0x257")](_[_0x47c4("0x25a")](_.VfCrC(t.SlotConfigManager[_0x47c4("0xc8")][_0x47c4("0x219")],"/"),this[_0x47c4("0x25b")])+"/",this[_0x47c4("0x24a")])+_.yVjMl;continue;case"6":this[_0x47c4("0x255")][_0x47c4("0x25c")]=_[_0x47c4("0x25d")];continue}break}},c);function c(x,c,e){e=n.call(this,x,c,e)||this;return e.linkElem=document[_0x47c4("0x251")](_[_0x47c4("0x252")]),e}t[_0x47c4("0x25e")]=x}(_0x44fb7c=_0x44fb7c||{}),function(t){var n,_,i={PwTpI:_0x47c4("0x123"),KVdjI:"3|5|1|2|0|4",gRuhZ:function(x,c){return x+c},kSfwH:function(x,c){return x+c},CFeyu:_0x47c4("0x25f"),dPAZs:function(x,c,e){return x(c,e)}},x=(n=t.ABS[_0x47c4("0x268")],_={ZxnWL:i.KVdjI,okWyk:function(x,c){return i[_0x47c4("0x260")](x,c)},cxHXS:function(x,c){return i[_0x47c4("0x261")](x,c)},vMCvf:i.CFeyu,ylejR:_0x47c4("0x24e")},i[_0x47c4("0x262")](_0x146e9c,c,n),c[_0x47c4("0x6")][_0x47c4("0x253")]=function(){for(var x=_[_0x47c4("0x263")][_0x47c4("0x12")]("|"),c=0;;){switch(x[c++]){case"0":t[_0x47c4("0x184")].ALoadScriptType[_0x47c4("0x249")].appendChild(this[_0x47c4("0x255")]);continue;case"1":this.linkElem[_0x47c4("0x58")]=this.type;continue;case"2":this[_0x47c4("0x255")][_0x47c4("0x264")]=e;continue;case"3":var e=_.okWyk(_.okWyk(_[_0x47c4("0x265")](_.cxHXS(t[_0x47c4("0x248")][_0x47c4("0xc8")][_0x47c4("0x219")]+"/",this.url),"/"),this.scriptName),_[_0x47c4("0x266")]);continue;case"4":t[_0x47c4("0x1e3")][_0x47c4("0xc8")].scriptRes.add(e);continue;case"5":t[_0x47c4("0x1e3")].instance.scriptRes.has(e)&&t[_0x47c4("0x94")][_0x47c4("0xc8")].executeError(t.type[_0x47c4("0x57")][_0x47c4("0x3f")],_[_0x47c4("0x267")]+e);continue}break}},c);function c(x,c,e){e=n.call(this,x,c,e)||this;return e[_0x47c4("0x255")]=document.createElement(i.PwTpI),e}t[_0x47c4("0x269")]=x}(_0x44fb7c=_0x44fb7c||{}),function(t){var x,i,n,c,e={FlJas:_0x47c4("0x26a"),xbKAv:function(x,c){return x+c},UKEfQ:"無載入任何資源 ",agFcE:function(x,c){return x/c},wLNhL:function(x,c){return c<=x},VPcsB:function(x,c){return x-c},dwiGZ:_0x47c4("0x26b")};function _(x,c,e,t){for(var n=i.OXULJ[_0x47c4("0x12")]("|"),_=0;;){switch(n[_++]){case"0":this[_0x47c4("0x271")]=cc[_0x47c4("0x272")][_0x47c4("0x273")](this[_0x47c4("0x274")]);continue;case"1":this[_0x47c4("0x274")]=t;continue;case"2":this[_0x47c4("0x25b")]=e;continue;case"3":this[_0x47c4("0x275")]=x;continue;case"4":this[_0x47c4("0x58")]=c;continue;case"5":this.beforeProgress=0;continue}break}}x=t[_0x47c4("0x184")]||(t[_0x47c4("0x184")]={}),n={zvnfP:function(x,c){return x!==c},Yiyui:function(x,c){return e[_0x47c4("0x26c")](x,c)},OwEcJ:function(x,c){return e[_0x47c4("0x26d")](x,c)},bpRaM:function(x,c){return e[_0x47c4("0x26e")](x,c)},XmKOP:e.dwiGZ},i={OXULJ:e[_0x47c4("0x26f")],MEdJA:function(x,c){return x==c},RjvMx:function(x,c){return e.xbKAv(x,c)},zzTnQ:e[_0x47c4("0x270")],hNWBk:function(x,c){return x===c}},_[_0x47c4("0x6")][_0x47c4("0x276")]=function(){n[_0x47c4("0x277")](this[_0x47c4("0x58")],cc[_0x47c4("0x278")])?this[_0x47c4("0x271")].loadDir(this[_0x47c4("0x25b")],this[_0x47c4("0x58")],this[_0x47c4("0x279")][_0x47c4("0x27a")](this),this[_0x47c4("0x27b")][_0x47c4("0x27a")](this)):this[_0x47c4("0x271")][_0x47c4("0x27c")](this[_0x47c4("0x275")],cc.SceneAsset,this[_0x47c4("0x279")][_0x47c4("0x27a")](this),this[_0x47c4("0x27b")].bind(this))},_[_0x47c4("0x6")][_0x47c4("0x27b")]=function(x,c){x?t[_0x47c4("0x94")][_0x47c4("0xc8")].executeError(t[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3f")],x):c instanceof cc[_0x47c4("0x278")]||!i[_0x47c4("0x27d")](c[_0x47c4("0x1c")],0)||t[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](t[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3f")],i.RjvMx(i.RjvMx(i[_0x47c4("0x27e")],this[_0x47c4("0x25b")])," ")),this[_0x47c4("0x27f")](this[_0x47c4("0x275")],c)},_[_0x47c4("0x6")].loadResProgress=function(x,c){c=t[_0x47c4("0x121")][_0x47c4("0x120")].roundDown(n[_0x47c4("0x280")](x,c),2);c>this[_0x47c4("0x281")]&&(n[_0x47c4("0x282")](c,1)&&(c=.99),this[_0x47c4("0x283")](this[_0x47c4("0x275")],c,n[_0x47c4("0x284")](c,this[_0x47c4("0x281")])),this[_0x47c4("0x281")]=c)},_[_0x47c4("0x6")].updateProgressEnd=function(){i.hNWBk(this.folder,_0x47c4("0x26b"))?(t[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x285")].set(this[_0x47c4("0x275")],1),t.LoadResManager[_0x47c4("0xc8")][_0x47c4("0x286")](this[_0x47c4("0x275")],.01,1)):(t[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x287")][_0x47c4("0x141")](this[_0x47c4("0x275")],1),t[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x288")](this.dataName,1))},_[_0x47c4("0x6")][_0x47c4("0x283")]=function(x,c,e){this[_0x47c4("0x274")]===n.XmKOP?(t[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x285")][_0x47c4("0x141")](x,c),t.LoadResManager[_0x47c4("0xc8")].loadMainEventCallback(x,e,c)):(t[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x287")][_0x47c4("0x141")](x,c),t[_0x47c4("0x1e3")][_0x47c4("0xc8")].loadSecondaryEventCallback(x,c))},c=_,x[_0x47c4("0x289")]=c}(_0x44fb7c=_0x44fb7c||{}),function(f){var n,h={Zwlss:"4|1|2|0|3",IBvrp:"grid"},x=(n=f.ABS.ALoadType,_0x146e9c(c,n),c[_0x47c4("0x6")][_0x47c4("0x27f")]=function(x,c){for(var e,t,n=h[_0x47c4("0x28a")][_0x47c4("0x12")]("|"),_=0;;){switch(n[_++]){case"0":f[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x28b")][_0x47c4("0x141")](x,i);continue;case"1":var i=new Map;continue;case"2":try{for(var r=_0x9fa626(c[0][_0x47c4("0x28c")]()),o=r.next();!o[_0x47c4("0x17")];o=r[_0x47c4("0x16")]()){var u,a,s=o[_0x47c4("0x26")];x[_0x47c4("0x28d")]()[_0x47c4("0x28e")](h[_0x47c4("0x28f")])?(u=s.name[_0x47c4("0x290")](/[a-z A-Z]/g,""),i[_0x47c4("0x141")](u,s)):(a=s[_0x47c4("0x291")],i.set(a,s))}}catch(x){e={error:x}}finally{try{o&&!o[_0x47c4("0x17")]&&(t=r.return)&&t[_0x47c4("0x8")](r)}finally{if(e)throw e[_0x47c4("0x1a")]}}continue;case"3":this[_0x47c4("0x292")]();continue;case"4":continue}break}},c);function c(x,c,e,t){return n[_0x47c4("0x8")](this,x,c,e,t)||this}f[_0x47c4("0x293")]=x}(_0x44fb7c=_0x44fb7c||{}),function(o){var n,u={yxSwX:function(x,c){return x(c)},rDStw:function(x,c){return x+c},tqVbh:_0x47c4("0x294")},x=(n=o[_0x47c4("0x184")].ALoadType,_0x146e9c(c,n),c[_0x47c4("0x6")][_0x47c4("0x27f")]=function(x,c){var e,t;try{for(var n=u[_0x47c4("0x295")](_0x9fa626,c),_=n[_0x47c4("0x16")]();!_.done;_=n.next()){var i=_.value,r=i[_0x47c4("0x291")];o[_0x47c4("0x1e3")].instance[_0x47c4("0x296")][_0x47c4("0xf4")](r)&&o.ErrorManager[_0x47c4("0xc8")][_0x47c4("0x96")](o.type[_0x47c4("0x57")][_0x47c4("0x3f")],u.rDStw(r,u[_0x47c4("0x297")])),o[_0x47c4("0x1e3")].instance[_0x47c4("0x296")][_0x47c4("0x141")](r,i)}}catch(x){e={error:x}}finally{try{_&&!_.done&&(t=n[_0x47c4("0x19")])&&t[_0x47c4("0x8")](n)}finally{if(e)throw e.error}}this.updateProgressEnd()},c);function c(x,c,e,t){return n.call(this,x,c,e,t)||this}o[_0x47c4("0x298")]=x}(_0x44fb7c=_0x44fb7c||{}),function(r){var n,o,e={jNhHx:function(x,c){return x+c},TZgjH:function(x,c,e){return x(c,e)}},x=(n=r[_0x47c4("0x184")][_0x47c4("0x289")],o={xjkvl:function(x,c){return e[_0x47c4("0x299")](x,c)}},e.TZgjH(_0x146e9c,c,n),c[_0x47c4("0x6")][_0x47c4("0x27f")]=function(x,c){var e,t;try{for(var n=_0x9fa626(c),_=n[_0x47c4("0x16")]();!_.done;_=n[_0x47c4("0x16")]()){var i=_[_0x47c4("0x26")];if(r[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x29a")][_0x47c4("0xf4")](i[_0x47c4("0x291")]))return void r[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](r[_0x47c4("0x58")][_0x47c4("0x57")].LOAD_FW,o[_0x47c4("0x29b")](i[_0x47c4("0x291")],_0x47c4("0x29c")));r.LoadResManager[_0x47c4("0xc8")].prefabRes[_0x47c4("0x141")](i[_0x47c4("0x291")],i)}}catch(x){e={error:x}}finally{try{_&&!_[_0x47c4("0x17")]&&(t=n[_0x47c4("0x19")])&&t.call(n)}finally{if(e)throw e[_0x47c4("0x1a")]}}this[_0x47c4("0x292")]()},c);function c(x,c,e,t){return n[_0x47c4("0x8")](this,x,c,e,t)||this}r.PrefabLoad=x}(_0x44fb7c=_0x44fb7c||{}),function(e){var n,t,x={XqIaZ:_0x47c4("0x29d")},x=(n=e[_0x47c4("0x184")][_0x47c4("0x289")],t={ffttK:x.XqIaZ},_0x146e9c(c,n),c[_0x47c4("0x6")][_0x47c4("0x27f")]=function(x,c){e[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x256")][_0x47c4("0xf4")](x)&&e[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](e.type.ErrorType[_0x47c4("0x3f")],x+t[_0x47c4("0x29e")]),e.LoadResManager[_0x47c4("0xc8")][_0x47c4("0x1e0")][_0x47c4("0x141")](x,c),this[_0x47c4("0x292")]()},c);function c(x,c,e,t){return n[_0x47c4("0x8")](this,x,c,e,t)||this}e[_0x47c4("0x29f")]=x}(_0x44fb7c=_0x44fb7c||{}),function(y){var n,v,e={iGNxF:_0x47c4("0x2a0"),IbPga:function(x,c){return x===c},ufRVZ:function(x,c){return x+c}},x=(n=y[_0x47c4("0x184")][_0x47c4("0x289")],v={jpCmi:_0x47c4("0x2a1"),LkHgO:e[_0x47c4("0x2a2")],Ivktq:function(x,c){return e.IbPga(x,c)},DOPfk:function(x,c){return e[_0x47c4("0x2a3")](x,c)},DPKtx:_0x47c4("0x2a4")},_0x146e9c(c,n),c.prototype[_0x47c4("0x27f")]=function(x,c){for(var e,t,n,_,i=v[_0x47c4("0x2a5")][_0x47c4("0x12")]("|"),r=0;;){switch(i[r++]){case"0":y.LoadResManager[_0x47c4("0xc8")].spineRes[_0x47c4("0x141")](x,c[0]);continue;case"1":y[_0x47c4("0x1e3")].instance[_0x47c4("0x2a6")].has(x)&&y[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](y.type[_0x47c4("0x57")].LOAD_FW,v[_0x47c4("0x2a7")]);continue;case"2":try{for(var o=_0x9fa626(c),u=o[_0x47c4("0x16")]();!u[_0x47c4("0x17")];u=o[_0x47c4("0x16")]()){var a=u.value,s=Object[_0x47c4("0x2a8")](a.skeletonJson.animations),f=new Map;try{for(var h=(n=void 0,_0x9fa626(s)),l=h.next();!l[_0x47c4("0x17")];l=h.next()){var b,d=l[_0x47c4("0x26")];p?(b=d[_0x47c4("0x290")](/[^0-9]/gi,""),v[_0x47c4("0x2a9")](b,"")?f.set(d,d):(f[_0x47c4("0xf4")](b)&&y[_0x47c4("0x94")].instance[_0x47c4("0x96")](y[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3f")],v[_0x47c4("0x2aa")](d,_0x47c4("0x2ab"))),f[_0x47c4("0x141")](b,d))):f[_0x47c4("0x141")](d,d)}}catch(x){n={error:x}}finally{try{l&&!l[_0x47c4("0x17")]&&(_=h.return)&&_[_0x47c4("0x8")](h)}finally{if(n)throw n[_0x47c4("0x1a")]}}}}catch(x){e={error:x}}finally{try{u&&!u.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e[_0x47c4("0x1a")]}}continue;case"3":this[_0x47c4("0x292")]();continue;case"4":var g=x[_0x47c4("0x28d")]();continue;case"5":continue;case"6":var p=g[_0x47c4("0x28e")](v[_0x47c4("0x2ac")]);continue}break}},c);function c(x,c,e,t){return n[_0x47c4("0x8")](this,x,c,e,t)||this}y[_0x47c4("0x2ad")]=x}(_0x44fb7c=_0x44fb7c||{}),function(s){var n,f,x={mKdbj:"text",Thywv:function(x,c,e){return x(c,e)}},x=(n=s[_0x47c4("0x184")][_0x47c4("0x289")],f={CSFGl:x[_0x47c4("0x2ae")],APiFO:function(x,c){return x(c)}},x[_0x47c4("0x2af")](_0x146e9c,c,n),c[_0x47c4("0x6")][_0x47c4("0x27f")]=function(x,c){var e,t,c=c[0][f[_0x47c4("0x2b0")]][_0x47c4("0x12")](/[\s\n]/),n=new Map;try{for(var _=f[_0x47c4("0x2b1")](_0x9fa626,c),i=_[_0x47c4("0x16")]();!i.done;i=_[_0x47c4("0x16")]()){var r,o=i[_0x47c4("0x26")][_0x47c4("0x12")](","),u=o[0],a=o[1];""!=u&&(r=a[_0x47c4("0x290")](/['"]/g,""),n[_0x47c4("0x141")](u,r))}}catch(x){e={error:x}}finally{try{i&&!i.done&&(t=_[_0x47c4("0x19")])&&t[_0x47c4("0x8")](_)}finally{if(e)throw e[_0x47c4("0x1a")]}}s[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x2b2")][_0x47c4("0x141")](x,n),this[_0x47c4("0x292")]()},c);function c(x,c,e,t){return n.call(this,x,c,e,t)||this}s[_0x47c4("0x2b3")]=x}(_0x44fb7c=_0x44fb7c||{}),function(r){var o,_={nyOEd:_0x47c4("0x2b4"),teThz:_0x47c4("0x2b5"),iwRIS:_0x47c4("0x2b6"),odMkE:_0x47c4("0x2b7"),sALtC:_0x47c4("0x2b8"),IgnDn:function(x,c,e){return x(c,e)},MYYWP:function(x,c){return x!=c},xtdSL:function(x,c,e,t,n){return x(c,e,t,n)}},x=(o={aPJeU:_[_0x47c4("0x2b9")],iduSe:_.sALtC,DBhet:function(x,c,e){return _.IgnDn(x,c,e)},juhHT:function(x,c){return _[_0x47c4("0x2ba")](x,c)},NyCyf:function(x,c,e,t,n){return _[_0x47c4("0x2bb")](x,c,e,t,n)}},c.prototype[_0x47c4("0x2be")]=function(x,c,t){for(var e=o[_0x47c4("0x2bf")][_0x47c4("0x12")]("|"),n=0;;){switch(e[n++]){case"0":this[_0x47c4("0x2c0")]=new Promise(function(){});continue;case"1":var _=this;continue;case"2":var i={OIWQx:function(x){return x()},oYQbu:o[_0x47c4("0x2c1")]};continue;case"3":if(this[_0x47c4("0x271")])return;continue;case"4":return new Promise(function(e){_[_0x47c4("0x2c2")]?!_[_0x47c4("0x271")]&&_.isLoadBundle&&_[_0x47c4("0x2bc")].push(_[_0x47c4("0x2c4")][_0x47c4("0x27a")](_,x,c,t,"secondaryRes")):(_[_0x47c4("0x2c2")]=!0,cc.assetManager[_0x47c4("0x2be")](i[_0x47c4("0x2c3")],function(x,c){x&&r.ErrorManager[_0x47c4("0xc8")].executeError(r[_0x47c4("0x58")].ErrorType.LOAD_FW,x),_[_0x47c4("0x271")]=c,i.OIWQx(e)}))})}break}},c[_0x47c4("0x6")].executeLoad=function(x,c,e){this[_0x47c4("0x2c4")](x,c,e,_0x47c4("0x26b"))},c[_0x47c4("0x6")][_0x47c4("0x2c5")]=function(c,e,t){var n={htnfZ:"secondaryRes",hBzKU:function(x,c){return o.juhHT(x,c)}};return o[_0x47c4("0x2c6")](_0x26f3e4,this,void 0,void 0,function(){return o[_0x47c4("0x2c7")](_0x32ef64,this,function(x){switch(x[_0x47c4("0x2e")]){case 0:return[4,this.loadBundle(c,e,t)];case 1:if(x[_0x47c4("0x15a")](),this[_0x47c4("0x2c4")](c,e,t,n[_0x47c4("0x2c8")]),n[_0x47c4("0x2c9")](this.assetMethod[_0x47c4("0x1c")],0))for(;this[_0x47c4("0x2bc")][_0x47c4("0x1c")];)this[_0x47c4("0x2bc")][0](),this[_0x47c4("0x2bc")][_0x47c4("0x2ca")]();return[2]}})})},c.prototype[_0x47c4("0x2c4")]=function(x,c,e,t){switch(c){case r[_0x47c4("0x58")][_0x47c4("0x133")].img:new r.ImgLoad(x,cc[_0x47c4("0x2cb")],e,t)[_0x47c4("0x276")]();break;case r[_0x47c4("0x58")].LoadType[_0x47c4("0x122")]:new r.MusicLoad(x,cc[_0x47c4("0x2cc")],e,t)[_0x47c4("0x276")]();break;case r[_0x47c4("0x58")][_0x47c4("0x133")][_0x47c4("0x12e")]:new r[_0x47c4("0x2cd")](x,cc[_0x47c4("0x2ce")],e,t)[_0x47c4("0x276")]();break;case r.type[_0x47c4("0x133")][_0x47c4("0x12b")]:new r[_0x47c4("0x2ad")](x,sp[_0x47c4("0x2cf")],e,t)[_0x47c4("0x276")]();break;case r[_0x47c4("0x58")][_0x47c4("0x133")][_0x47c4("0x128")]:new r.SceneLoad(x,cc[_0x47c4("0x278")],null,t)[_0x47c4("0x276")]();break;case r[_0x47c4("0x58")].LoadType[_0x47c4("0x124")]:new r.TextLoad(x,cc.TextAsset,e,t)[_0x47c4("0x276")]();break;default:r.ErrorManager[_0x47c4("0xc8")][_0x47c4("0x96")](r[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x73")],_[_0x47c4("0x2d0")])}},c.prototype.executeLoadExternalScript=function(x,c,e){switch(c){case r[_0x47c4("0x58")][_0x47c4("0x133")][_0x47c4("0x131")]:new r[_0x47c4("0x25e")](x,_[_0x47c4("0x2d1")],e)[_0x47c4("0x253")]();break;case r[_0x47c4("0x58")][_0x47c4("0x133")][_0x47c4("0x123")]:new r[_0x47c4("0x269")](x,_0x47c4("0x2d2"),e).loadScript();break;default:r[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](r[_0x47c4("0x58")].ErrorType[_0x47c4("0x73")],_[_0x47c4("0x2d3")])}},c);function c(x,c){this[_0x47c4("0x2bc")]=new Array,this[_0x47c4("0x6e")]=c,this[_0x47c4("0x2bd")]=x}r[_0x47c4("0x2d4")]=x}(_0x44fb7c=_0x44fb7c||{}),function(e){var x,t={XsNum:function(x,c){return x+c},zpZch:_0x47c4("0x2d5"),zqqpY:" 此(次資源)已載入過了,或名稱重複,請檢察",tlvlF:function(x,c,e){return x(c,e)}},c=(x={OhkzS:function(x,c,e){return t.tlvlF(x,c,e)}},n[_0x47c4("0x6")].executeLoad=function(x,c,e){this[_0x47c4("0x2d7")](x),this[_0x47c4("0x2bd")][_0x47c4("0x285")].set(x,null),this[_0x47c4("0x2d6")][_0x47c4("0x2d8")](x,c,e)},n.prototype[_0x47c4("0x2c5")]=function(c,e,t){return _0x26f3e4(this,void 0,void 0,function(){return x[_0x47c4("0x2d9")](_0x32ef64,this,function(x){switch(x[_0x47c4("0x2e")]){case 0:return this[_0x47c4("0x2d7")](c),this.loadResManager.secondaryLoadState.set(c,null),[4,this[_0x47c4("0x2d6")][_0x47c4("0x2c5")](c,e,t)];case 1:return x[_0x47c4("0x15a")](),[2]}})})},n.prototype[_0x47c4("0x2d7")]=function(x){this[_0x47c4("0x2bd")][_0x47c4("0x285")][_0x47c4("0xf4")](x)&&e[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](e[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3f")],t[_0x47c4("0x2da")](x,t.zpZch)),this[_0x47c4("0x2bd")][_0x47c4("0x287")][_0x47c4("0xf4")](x)&&e[_0x47c4("0x94")].instance[_0x47c4("0x96")](e[_0x47c4("0x58")].ErrorType[_0x47c4("0x3f")],t.XsNum(x,t[_0x47c4("0x2db")]))},n[_0x47c4("0x6")][_0x47c4("0x2dc")]=function(x,c,e){this[_0x47c4("0x2d6")][_0x47c4("0x2dc")](x,c,e)},n);function n(x,c){this.loadResManager=x,this[_0x47c4("0x2d6")]=new e[_0x47c4("0x2d4")](x,c)}e[_0x47c4("0x2dd")]=c}(_0x44fb7c=_0x44fb7c||{}),function(_){var e,i={HJodG:"8|14|15|10|5|12|1|13|2|7|3|11|9|4|0|6",CErvG:function(x,c){return x/c},cYqJy:function(x,c){return x==c},LSgma:function(x,c){return c<=x},oHKCw:function(x,c){return x==c},nBsiJ:function(x,c){return x+c},KJqaJ:function(x,c){return x+c},kpBvL:_0x47c4("0x2de"),KFRTF:"該類尚未實例化",xwZbf:_0x47c4("0x287"),nbaen:_0x47c4("0x28b"),FOVXu:_0x47c4("0x2a6"),whcZq:_0x47c4("0x29a"),LcqIM:_0x47c4("0x1e0")},x=(e={MbFlL:i[_0x47c4("0x2df")],GoMiX:function(x,c){return x==c}},c[_0x47c4("0xd3")]=function(x){this._instance||(this[_0x47c4("0xd4")]=new c(x),_.loadMgr=this[_0x47c4("0xd4")])},Object.defineProperty(c,_0x47c4("0xc8"),{get:function(){if(this._instance)return this[_0x47c4("0xd4")];_[_0x47c4("0x94")].instance[_0x47c4("0x96")](_.type.ErrorType.LOAD_FW,e[_0x47c4("0x2ec")])},enumerable:!1,configurable:!0}),c[_0x47c4("0x6")][_0x47c4("0x286")]=function(x,c,e){for(var t="1|2|0|4|3"[_0x47c4("0x12")]("|"),n=0;;){switch(t[n++]){case"0":1<=this.allProgress&&(this[_0x47c4("0x2e3")]=.99);continue;case"1":this[_0x47c4("0x2ed")](x,e);continue;case"2":this[_0x47c4("0x2e3")]+=i[_0x47c4("0x2ee")](c,this[_0x47c4("0x2e7")]);continue;case"3":if(this[_0x47c4("0x194")][_0x47c4("0xf4")](null)){if(i[_0x47c4("0x2ef")](_[_0x47c4("0x121")][_0x47c4("0x120")][_0x47c4("0x2f0")](this.beforeProgress,2),_[_0x47c4("0x121")][_0x47c4("0x120")][_0x47c4("0x2f0")](this[_0x47c4("0x2e3")],2)))return;this[_0x47c4("0x281")]=this[_0x47c4("0x2e3")],this[_0x47c4("0x194")][_0x47c4("0xf6")](null)(_[_0x47c4("0x121")][_0x47c4("0x120")][_0x47c4("0x2f0")](this[_0x47c4("0x2e3")],2)),i[_0x47c4("0x2f1")](this[_0x47c4("0x2e3")],1)&&(this[_0x47c4("0x2e7")]=0,this[_0x47c4("0x194")].delete(null))}continue;case"4":i[_0x47c4("0x2f2")](e,1)&&(this[_0x47c4("0x2e5")]+=1,i[_0x47c4("0x2f2")](this[_0x47c4("0x2e5")],this[_0x47c4("0x2e7")])&&(this.allProgress=1));continue}break}},c.prototype[_0x47c4("0x288")]=function(x,c){this[_0x47c4("0x2ed")](x,c)},c[_0x47c4("0x6")][_0x47c4("0x2ed")]=function(x,c){this[_0x47c4("0x194")][_0x47c4("0xf4")](x)&&(this.callFun[_0x47c4("0xf6")](x)(c),e[_0x47c4("0x2f3")](c,1)&&this[_0x47c4("0x194")][_0x47c4("0x17f")](x))},c[_0x47c4("0x6")][_0x47c4("0x2f4")]=function(x,c,e,t){return this[_0x47c4("0x2e7")]+=1,t&&(e=i.nBsiJ(e,"/")+this[_0x47c4("0x6e")][_0x47c4("0x21e")]),this.loadTypeHandler[_0x47c4("0x2d8")](x,c,e),this},c.prototype[_0x47c4("0x2be")]=function(x,c,e,t){return t&&(e=i.nBsiJ(i[_0x47c4("0x2f5")](e,"/"),this[_0x47c4("0x6e")].language)),this[_0x47c4("0x2f6")][_0x47c4("0x2c5")](x,c,e)[_0x47c4("0x27")](),this},c.prototype[_0x47c4("0x2f7")]=function(x,c){if(c){if(!this[_0x47c4("0x194")][_0x47c4("0xf4")](c))return this[_0x47c4("0x194")][_0x47c4("0x141")](c,x),this;_.ErrorManager.instance[_0x47c4("0x96")](_[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x3f")],i[_0x47c4("0x2f8")])}else this[_0x47c4("0x194")][_0x47c4("0xf4")](null)?_[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](_[_0x47c4("0x58")].ErrorType[_0x47c4("0x3f")],_0x47c4("0x2f9")):this[_0x47c4("0x194")][_0x47c4("0x141")](null,x)},c[_0x47c4("0x6")].getLoadState=function(x,c){return c?1==this[_0x47c4("0x2eb")][_0x47c4("0xf6")](x):1==this._initialLoadState.get(x)},c[_0x47c4("0x6")][_0x47c4("0x2fa")]=function(x,c,e){return this.loadTypeHandler.executeLoadExternalScript(x,c,e),this},c.prototype[_0x47c4("0x2fb")]=function(){c[_0x47c4("0xd4")]=null},Object[_0x47c4("0xd6")](c.prototype,_0x47c4("0x285"),{get:function(){return this._initialLoadState},set:function(x){this[_0x47c4("0x2eb")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],i[_0x47c4("0x2fc")],{get:function(){return this[_0x47c4("0x2e8")]},set:function(x){this[_0x47c4("0x2e8")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],i.nbaen,{get:function(){return this[_0x47c4("0x2e4")]},set:function(x){this[_0x47c4("0x2e4")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],i[_0x47c4("0x2fd")],{get:function(){return this._spineRes},set:function(x){this._spineRes=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],"readFileRes",{get:function(){return this[_0x47c4("0x2e1")]},set:function(x){this[_0x47c4("0x2e1")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],i[_0x47c4("0x2fe")],{get:function(){return this._prefabRes},set:function(x){this[_0x47c4("0x2ff")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],_0x47c4("0x296"),{get:function(){return this[_0x47c4("0x2e6")]},set:function(x){this._musicRes=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c.prototype,_0x47c4("0x256"),{get:function(){return this._scriptRes},set:function(x){this[_0x47c4("0x2e2")]=x},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],i[_0x47c4("0x300")],{get:function(){return this[_0x47c4("0x2e9")]},set:function(x){this._sceneRes=x},enumerable:!1,configurable:!0}),c);function c(x){for(var c=i[_0x47c4("0x2e0")].split("|"),e=0;;){switch(c[e++]){case"0":this.beforeProgress=0;continue;case"1":this[_0x47c4("0x2e1")]=new Map;continue;case"2":this.callFun=new Map;continue;case"3":this[_0x47c4("0x2e2")]=new Set;continue;case"4":this[_0x47c4("0x2e3")]=0;continue;case"5":this[_0x47c4("0x2e4")]=new Map;continue;case"6":this[_0x47c4("0x2e5")]=0;continue;case"7":this[_0x47c4("0x2e6")]=new Map;continue;case"8":this[_0x47c4("0x6e")]=x;continue;case"9":this[_0x47c4("0x2e7")]=0;continue;case"10":this[_0x47c4("0x2e8")]=new Map;continue;case"11":this[_0x47c4("0x2e9")]=new Map;continue;case"12":this[_0x47c4("0x2ea")]=new Map;continue;case"13":this._prefabRes=new Map;continue;case"14":this.loadTypeHandler=new _[_0x47c4("0x2dd")](this,x);continue;case"15":this[_0x47c4("0x2eb")]=new Map;continue}break}}_[_0x47c4("0x1e3")]=x}(_0x44fb7c=_0x44fb7c||{}),function(u){var a,e={NWwlB:_0x47c4("0x301"),pZZku:_0x47c4("0x302"),Ihjmq:"PAUSE",YrqOD:_0x47c4("0x303"),mXxKY:function(x,c){return x+c},DrOlX:_0x47c4("0x304")};(x=a=a||{})[x[e[_0x47c4("0x305")]]=-1]=_0x47c4("0x301"),x[x[e[_0x47c4("0x306")]]=1]=e[_0x47c4("0x306")],x[x[e[_0x47c4("0x307")]]=2]=e[_0x47c4("0x307")];var s,x=(s={KgjmG:e.YrqOD,abMzJ:_0x47c4("0x308"),WWYZH:function(x,c){return x==c},NpSmf:function(x,c){return e.mXxKY(x,c)},bnlVd:e[_0x47c4("0x309")]},c[_0x47c4("0x6")][_0x47c4("0x156")]=function(x,c){for(var e=_0x47c4("0x30b").split("|"),t=0;;){switch(e[t++]){case"0":var n=c[_0x47c4("0xf6")](s[_0x47c4("0x30c")]);continue;case"1":var _=u.LoadResManager[_0x47c4("0xc8")][_0x47c4("0x296")][_0x47c4("0xf6")](x);continue;case"2":var i=c[_0x47c4("0xf6")](s[_0x47c4("0x30d")]);continue;case"3":if(s[_0x47c4("0x30e")](o,a.PAUSE))return void cc[_0x47c4("0x30f")][_0x47c4("0x310")](this[_0x47c4("0x30a")]);continue;case"4":cc[_0x47c4("0x30f")][_0x47c4("0x311")](r,i);continue;case"5":s.WWYZH(o,a[_0x47c4("0x302")])&&this.stop();continue;case"6":this[_0x47c4("0x30a")]=r;continue;case"7":if(!u[_0x47c4("0x1e3")][_0x47c4("0xc8")][_0x47c4("0x296")][_0x47c4("0xf4")](x))return void u[_0x47c4("0x94")].instance[_0x47c4("0x96")](u[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7a")],s[_0x47c4("0x312")](x,s[_0x47c4("0x313")]));continue;case"8":var r=cc[_0x47c4("0x30f")][_0x47c4("0x314")](_,n);continue;case"9":var o=cc[_0x47c4("0x30f")][_0x47c4("0x315")](this.musicID);continue}break}},c.prototype.stop=function(){cc.audioEngine.setVolume(this[_0x47c4("0x30a")],0),cc[_0x47c4("0x30f")][_0x47c4("0x316")](this[_0x47c4("0x30a")])},c.prototype[_0x47c4("0x317")]=function(){cc[_0x47c4("0x30f")].getState(this.musicID)==cc[_0x47c4("0x30f")][_0x47c4("0x318")][_0x47c4("0x302")]&&cc[_0x47c4("0x30f")][_0x47c4("0x317")](this[_0x47c4("0x30a")])},c);function c(){this[_0x47c4("0x30a")]=null}u[_0x47c4("0x319")]=x}(_0x44fb7c=_0x44fb7c||{}),function(s){var _,f={JqHLQ:_0x47c4("0x31a"),HEDFy:_0x47c4("0x303"),rtSzD:function(x,c){return x==c},THEld:function(x,c){return x+c},klhYN:_0x47c4("0x304"),onNcG:function(x,c){return x===c}},x=(_={eQgso:function(x,c){return x(c)}},c[_0x47c4("0x6")].play=function(x,c){for(var e,t=f.JqHLQ[_0x47c4("0x12")]("|"),n=0;;){switch(t[n++]){case"0":var _=s[_0x47c4("0x1e3")].instance[_0x47c4("0x296")][_0x47c4("0xf6")](x);continue;case"1":var i=c.get(f[_0x47c4("0x31c")]);continue;case"2":cc.audioEngine[_0x47c4("0x311")](o,u);continue;case"3":var r=c.get(_0x47c4("0x31d"));continue;case"4":e=!f[_0x47c4("0x31e")](cc.audioEngine[_0x47c4("0x315")](a),cc.audioEngine.AudioState[_0x47c4("0x31f")]);continue;case"5":var o=cc[_0x47c4("0x30f")][_0x47c4("0x320")](_,i);continue;case"6":continue;case"7":this.effectID[_0x47c4("0x141")](x,o);continue;case"8":if(r===s[_0x47c4("0x58")].AudioStateType.NOT_PLAYING&&e)return;continue;case"9":var u=c[_0x47c4("0xf6")](_0x47c4("0x308"));continue;case"10":if(!s.LoadResManager[_0x47c4("0xc8")].musicRes.has(x))return void s[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](s[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7a")],f[_0x47c4("0x321")](x,f.klhYN));continue;case"11":f[_0x47c4("0x322")](r,s[_0x47c4("0x58")][_0x47c4("0x103")][_0x47c4("0xfc")])&&e&&cc[_0x47c4("0x30f")].stop(a);continue;case"12":var a=this[_0x47c4("0x31b")].get(x);continue}break}},c[_0x47c4("0x6")][_0x47c4("0x316")]=function(x){this[_0x47c4("0x31b")][_0x47c4("0xf4")](x)&&(cc[_0x47c4("0x30f")][_0x47c4("0x316")](this.effectID[_0x47c4("0xf6")](x)),this[_0x47c4("0x31b")][_0x47c4("0x17f")](x))},c[_0x47c4("0x6")].stopAll=function(){var c,x;try{for(var e=_[_0x47c4("0x323")](_0x9fa626,this[_0x47c4("0x31b")][_0x47c4("0x2a8")]()),t=e[_0x47c4("0x16")]();!t[_0x47c4("0x17")];t=e.next()){var n=t.value;cc[_0x47c4("0x30f")][_0x47c4("0x316")](this.effectID[_0x47c4("0xf6")](n))}}catch(x){c={error:x}}finally{try{t&&!t.done&&(x=e.return)&&x[_0x47c4("0x8")](e)}finally{if(c)throw c[_0x47c4("0x1a")]}}this[_0x47c4("0x31b")][_0x47c4("0x182")]()},c);function c(){this[_0x47c4("0x31b")]=new Map}s[_0x47c4("0x324")]=x}(_0x44fb7c=_0x44fb7c||{}),function(r){var x,o={mtcGn:"volume",CMdZN:function(x,c){return x===c},mvzUb:_0x47c4("0x303"),XlpoW:function(x,c){return x===c},ecZJt:_0x47c4("0x325"),krfKn:_0x47c4("0x31d"),PHtVs:function(x,c){return x===c}},c=(x={luWhc:o[_0x47c4("0x326")],kUKNN:_0x47c4("0x308"),Mmawq:o[_0x47c4("0x327")]},e[_0x47c4("0x6")][_0x47c4("0x32d")]=function(){this[_0x47c4("0x32e")]=new Map,this.effectNormalData=new Map,this.musicNormalData[_0x47c4("0x141")](_0x47c4("0x308"),this[_0x47c4("0x21c")]),this.musicNormalData[_0x47c4("0x141")]("loop",this[_0x47c4("0x303")]),this.effectNormalData[_0x47c4("0x141")](x[_0x47c4("0x32f")],r[_0x47c4("0x58")].AudioStateType[_0x47c4("0xfc")]),this.effectNormalData[_0x47c4("0x141")](x[_0x47c4("0x330")],this[_0x47c4("0x21d")]),this[_0x47c4("0x331")][_0x47c4("0x141")](x[_0x47c4("0x332")],this[_0x47c4("0x303")])},e.prototype[_0x47c4("0x333")]=function(x,c,e){for(var t=_0x47c4("0x334")[_0x47c4("0x12")]("|"),n=0;;){switch(t[n++]){case"0":_.set(o[_0x47c4("0x335")],c);continue;case"1":var _=new Map;continue;case"2":o[_0x47c4("0x336")](e,void 0)&&(e=this[_0x47c4("0x303")]);continue;case"3":this.musicData[_0x47c4("0x141")](x,_);continue;case"4":_[_0x47c4("0x141")](o[_0x47c4("0x327")],e);continue;case"5":o[_0x47c4("0x337")](c,void 0)&&(c=this[_0x47c4("0x21c")]);continue}break}},e[_0x47c4("0x6")][_0x47c4("0x338")]=function(x,c,e,t){for(var n=o[_0x47c4("0x339")][_0x47c4("0x12")]("|"),_=0;;){switch(n[_++]){case"0":o.XlpoW(e,void 0)&&(e=this[_0x47c4("0x21c")]);continue;case"1":i.set(o[_0x47c4("0x327")],t);continue;case"2":i[_0x47c4("0x141")](_0x47c4("0x308"),e);continue;case"3":i[_0x47c4("0x141")](o.krfKn,c);continue;case"4":var i=new Map;continue;case"5":o[_0x47c4("0x33a")](c,void 0)&&(c=r[_0x47c4("0x58")][_0x47c4("0x103")][_0x47c4("0xfd")]);continue;case"6":this[_0x47c4("0x33b")][_0x47c4("0x141")](x,i);continue;case"7":void 0===t&&(t=this[_0x47c4("0x303")]);continue}break}},e.prototype[_0x47c4("0x33c")]=function(x){x[_0x47c4("0x33d")]()&&(this[_0x47c4("0x328")].musicOnMute||(this[_0x47c4("0x32a")].has(x)?this[_0x47c4("0x32b")][_0x47c4("0x156")](x,this.musicData[_0x47c4("0xf6")](x)):(this[_0x47c4("0x32a")][_0x47c4("0x141")](x,this[_0x47c4("0x32e")]),this.musicController[_0x47c4("0x156")](x,this[_0x47c4("0x32e")]))))},e[_0x47c4("0x6")][_0x47c4("0x33e")]=function(x){x[_0x47c4("0x33d")]()&&(this[_0x47c4("0x328")][_0x47c4("0x33f")]||(this[_0x47c4("0x33b")].has(x)?this.effectController[_0x47c4("0x156")](x,this[_0x47c4("0x33b")].get(x)):(this[_0x47c4("0x33b")][_0x47c4("0x141")](x,this[_0x47c4("0x331")]),this.effectController.play(x,this[_0x47c4("0x331")]))))},e.prototype.musicStop=function(){this[_0x47c4("0x32b")].stop()},e[_0x47c4("0x6")][_0x47c4("0x340")]=function(){this[_0x47c4("0x32b")][_0x47c4("0x317")]()},e[_0x47c4("0x6")][_0x47c4("0x341")]=function(x){this.effectController.stop(x)},e[_0x47c4("0x6")][_0x47c4("0x342")]=function(){this.effectController[_0x47c4("0x343")]()},e[_0x47c4("0x6")][_0x47c4("0x344")]=function(x){return this.musicData[_0x47c4("0xf6")](x)},e[_0x47c4("0x6")][_0x47c4("0x345")]=function(x){return this[_0x47c4("0x33b")][_0x47c4("0xf6")](x)},e);function e(x,c){this[_0x47c4("0x328")]=x,this[_0x47c4("0x6e")]=c,this.musicVolume=this[_0x47c4("0x6e")][_0x47c4("0x21c")],this[_0x47c4("0x21d")]=this[_0x47c4("0x6e")].effectVolume,this.canSuperimpose=!1,this[_0x47c4("0x329")]=this[_0x47c4("0x6e")][_0x47c4("0x21f")],this.effectOnMute=this[_0x47c4("0x6e")][_0x47c4("0x242")],this.loop=!1,this[_0x47c4("0x32a")]=new Map,this.effectData=new Map,this[_0x47c4("0x32b")]=new r[_0x47c4("0x319")],this[_0x47c4("0x32c")]=new r[_0x47c4("0x324")],this[_0x47c4("0x32d")]()}r[_0x47c4("0x346")]=c}(_0x44fb7c=_0x44fb7c||{}),function(n){var x,r={ELsMh:function(x,c){return x===c},PyhfK:_0x47c4("0xec"),APChJ:"instance",jgaFD:_0x47c4("0x33f"),dgqYm:_0x47c4("0x329"),EjQlP:function(x,c){return x<c},kRfxy:function(x,c,e){return x(c,e)},GQOMS:function(x,c){return x(c)},gCUCo:function(x,c){return x<c},AzIaG:function(x,c){return x<c}},o=(x={hStRm:r.PyhfK},c[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this[_0x47c4("0xd4")]=new c(x),n[_0x47c4("0x348")]=this[_0x47c4("0xd4")])},Object[_0x47c4("0xd6")](c,r[_0x47c4("0x349")],{get:function(){if(this[_0x47c4("0xd4")])return this[_0x47c4("0xd4")];n[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](n.type[_0x47c4("0x57")][_0x47c4("0x7a")],x.hStRm)},enumerable:!1,configurable:!0}),c.prototype.settingMusic=function(x,c,e){return this.factory[_0x47c4("0x333")](x,c,e),this},c[_0x47c4("0x6")][_0x47c4("0x338")]=function(x,c,e,t){return r.ELsMh(c,n[_0x47c4("0x58")][_0x47c4("0x103")][_0x47c4("0x34a")])&&t&&n[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](n.type[_0x47c4("0x57")][_0x47c4("0x7a")],x+" 使用疊加效果時不建議使用循環撥放"),this[_0x47c4("0x2d6")][_0x47c4("0x338")](x,c,e,t),this},c[_0x47c4("0x6")][_0x47c4("0x33c")]=function(x){this[_0x47c4("0x2d6")][_0x47c4("0x33c")](x)},c[_0x47c4("0x6")][_0x47c4("0x33e")]=function(x){this.factory[_0x47c4("0x33e")](x)},c[_0x47c4("0x6")][_0x47c4("0x34b")]=function(){this[_0x47c4("0x2d6")].musicStop()},c[_0x47c4("0x6")][_0x47c4("0x340")]=function(){this[_0x47c4("0x2d6")].musicPause()},c[_0x47c4("0x6")][_0x47c4("0x341")]=function(x){this[_0x47c4("0x2d6")][_0x47c4("0x341")](x)},c[_0x47c4("0x6")][_0x47c4("0x342")]=function(){this[_0x47c4("0x2d6")][_0x47c4("0x342")]()},c.prototype[_0x47c4("0x344")]=function(x){return this[_0x47c4("0x2d6")][_0x47c4("0x344")](x)},c[_0x47c4("0x6")][_0x47c4("0x345")]=function(x){return this[_0x47c4("0x2d6")].getEffectState(x)},c[_0x47c4("0x6")][_0x47c4("0x34c")]=function(){return this[_0x47c4("0x34d")]=!this[_0x47c4("0x34d")],this[_0x47c4("0x34d")]&&this[_0x47c4("0x2d6")].effectStopAll(),this[_0x47c4("0x34d")]},c[_0x47c4("0x6")][_0x47c4("0x34e")]=function(){return this[_0x47c4("0x347")]=!this[_0x47c4("0x347")],this[_0x47c4("0x347")]&&this[_0x47c4("0x340")](),this._musicOnMute},Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],r.jgaFD,{get:function(){return this[_0x47c4("0x34d")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](c[_0x47c4("0x6")],r[_0x47c4("0x34f")],{get:function(){return this[_0x47c4("0x347")]},enumerable:!1,configurable:!0}),c);function c(x){this.configManager=x,this.factory=new n[_0x47c4("0x346")](this,x),this._effectOnMute=this[_0x47c4("0x6e")][_0x47c4("0x242")],this[_0x47c4("0x347")]=this[_0x47c4("0x6e")][_0x47c4("0x21f")]}n[_0x47c4("0x239")]=o,n[_0x47c4("0x355")]=function(n){var _={KUDAo:function(x,c){return r[_0x47c4("0x350")](x,c)},UzWUi:function(x,c,e){return r.kRfxy(x,c,e)},BJech:function(x,c){return r.GQOMS(x,c)}};return function(x,c,e){e[_0x47c4("0x351")]=!0;var t=e[_0x47c4("0x26")];e.value=function(){for(var x=[],c=0;_[_0x47c4("0x352")](c,arguments[_0x47c4("0x1c")]);c++)x[c]=arguments[c];return o[_0x47c4("0xc8")].musicPlay(n),t[_0x47c4("0x8")][_0x47c4("0x13f")](t,_[_0x47c4("0x353")](_0x7b847e,[this],_[_0x47c4("0x354")](_0x5589e9,x)))}}},n[_0x47c4("0x357")]=function(){var n={khVtc:function(x,c){return r.GQOMS(x,c)}};return function(x,c,e){e[_0x47c4("0x351")]=!0;var t=e.value;e[_0x47c4("0x26")]=function(){for(var x=[],c=0;c<arguments[_0x47c4("0x1c")];c++)x[c]=arguments[c];return o[_0x47c4("0xc8")][_0x47c4("0x34b")](),t.call[_0x47c4("0x13f")](t,_0x7b847e([this],n[_0x47c4("0x356")](_0x5589e9,x)))}}},n[_0x47c4("0x360")]=function(){for(var _={DCiig:function(x,c){return r.EjQlP(x,c)},eHBMs:function(x,c,e){return r[_0x47c4("0x358")](x,c,e)}},i=[],x=0;r[_0x47c4("0x359")](x,arguments.length);x++)i[x]=arguments[x];return function(x,c,e){var t={tMMNB:function(x,c){return _[_0x47c4("0x35a")](x,c)},xASTH:function(x,c,e){return _[_0x47c4("0x35b")](x,c,e)},GnCxa:function(x,c){return x(c)}};e[_0x47c4("0x351")]=!0;var n=e[_0x47c4("0x26")];e[_0x47c4("0x26")]=function(){for(var x=[],c=0;t[_0x47c4("0x35c")](c,arguments[_0x47c4("0x1c")]);c++)x[c]=arguments[c];return i[_0x47c4("0x35d")](function(x){o[_0x47c4("0xc8")][_0x47c4("0x33e")](x)}),n[_0x47c4("0x8")][_0x47c4("0x13f")](n,t[_0x47c4("0x35e")](_0x7b847e,[this],t[_0x47c4("0x35f")](_0x5589e9,x)))}}},n[_0x47c4("0x365")]=function(){for(var _=[],x=0;x<arguments[_0x47c4("0x1c")];x++)_[x]=arguments[x];return function(x,c,e){var t={ZFhEu:function(x,c){return r[_0x47c4("0x361")](x,c)},GQnXV:function(x,c,e){return r.kRfxy(x,c,e)},gQsWm:function(x,c){return x(c)}};e[_0x47c4("0x351")]=!0;var n=e[_0x47c4("0x26")];e[_0x47c4("0x26")]=function(){for(var x=[],c=0;t[_0x47c4("0x362")](c,arguments[_0x47c4("0x1c")]);c++)x[c]=arguments[c];return _.forEach(function(x){o.instance[_0x47c4("0x341")](x)}),n[_0x47c4("0x8")].apply(n,t[_0x47c4("0x363")](_0x7b847e,[this],t[_0x47c4("0x364")](_0x5589e9,x)))}}}}(_0x44fb7c=_0x44fb7c||{}),function(s){var f,t={iinLK:_0x47c4("0x366"),UyozD:_0x47c4("0xec"),jDnRG:function(x,c){return x!=c},qoKWR:"window.language_Mode 查找不到該語系",eBqEg:function(x,c){return x(c)},tASQm:_0x47c4("0x367"),VNook:_0x47c4("0x368")},x={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:t[_0x47c4("0x369")]},c={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:_0x47c4("0x367")},e={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:t.VNook},n={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:t.VNook},_=(t[_0x47c4("0x36a")],{fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:t[_0x47c4("0x36a")]}),i={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:t[_0x47c4("0x36a")]},r=(f={jaiMo:t[_0x47c4("0x36b")],RRNQE:function(x,c){return t[_0x47c4("0x36c")](x,c)},bxyeH:t[_0x47c4("0x36d")],HvYeH:function(x,c){return t.eBqEg(x,c)}},o[_0x47c4("0xd3")]=function(x){this[_0x47c4("0xd4")]||(this._instance=new o(x),s[_0x47c4("0x372")]=this[_0x47c4("0xd4")])},Object.defineProperty(o,_0x47c4("0xc8"),{get:function(){if(this[_0x47c4("0xd4")])return this[_0x47c4("0xd4")];s[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](s[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7a")],f[_0x47c4("0x373")])},enumerable:!1,configurable:!0}),o[_0x47c4("0x6")][_0x47c4("0x371")]=function(){this[_0x47c4("0x1d5")].set(s[_0x47c4("0x58")][_0x47c4("0x218")][_0x47c4("0x214")],c),this[_0x47c4("0x1d5")][_0x47c4("0x141")](s[_0x47c4("0x58")][_0x47c4("0x218")][_0x47c4("0x200")],x),this.style[_0x47c4("0x141")](s[_0x47c4("0x58")][_0x47c4("0x218")][_0x47c4("0x204")],e),this[_0x47c4("0x1d5")][_0x47c4("0x141")](s[_0x47c4("0x58")][_0x47c4("0x218")][_0x47c4("0x374")],_),this[_0x47c4("0x1d5")][_0x47c4("0x141")](s[_0x47c4("0x58")][_0x47c4("0x218")][_0x47c4("0x214")],c),this[_0x47c4("0x1d5")][_0x47c4("0x141")](s[_0x47c4("0x58")][_0x47c4("0x218")][_0x47c4("0x217")],i),this[_0x47c4("0x1d5")][_0x47c4("0x141")](s.type[_0x47c4("0x218")][_0x47c4("0x209")],n)},o[_0x47c4("0x6")][_0x47c4("0x375")]=function(x,c){this[_0x47c4("0x1d5")][_0x47c4("0x141")](x,c)},o[_0x47c4("0x6")][_0x47c4("0x376")]=function(x){var c,e;if(f.RRNQE(this[_0x47c4("0x370")],x)){this[_0x47c4("0x370")]=x;try{for(var t=_0x9fa626(this[_0x47c4("0x36f")][_0x47c4("0x2a8")]()),n=t.next();!n[_0x47c4("0x17")];n=t[_0x47c4("0x16")]()){var _=n.value,i=this.nowLanguageLabel[_0x47c4("0xf6")](_);this.updateText(_,i)}}catch(x){c={error:x}}finally{try{n&&!n[_0x47c4("0x17")]&&(e=t[_0x47c4("0x19")])&&e[_0x47c4("0x8")](t)}finally{if(c)throw c.error}}}},o[_0x47c4("0x6")].setLanguage=function(){this[_0x47c4("0x377")]||this.reLoadNowLanguage()},o[_0x47c4("0x6")].getLanguage=function(){return this.nowLang},o[_0x47c4("0x6")][_0x47c4("0x378")]=function(x){return this.languageCache[x]},o[_0x47c4("0x6")][_0x47c4("0x379")]=function(){return this[_0x47c4("0x377")]},o[_0x47c4("0x6")].reLoadNowLanguage=function(){try{this.languageCache=window[_0x47c4("0x37a")][this[_0x47c4("0x370")]]}catch(x){console[_0x47c4("0x6b")](f[_0x47c4("0x37b")],x)}},o[_0x47c4("0x6")][_0x47c4("0x37c")]=function(){},o[_0x47c4("0x6")].updateText=function(x,c){return x[_0x47c4("0x92")]=this.getText(c),this.labelCache.push(x),this},o[_0x47c4("0x6")][_0x47c4("0x37d")]=function(){for(var c,x,e=_0x47c4("0x37e")[_0x47c4("0x12")]("|"),t=0;;){switch(e[t++]){case"0":var n=this.nowLang;continue;case"1":var _=this[_0x47c4("0x1d5")].get(n)[_0x47c4("0x37f")];continue;case"2":var i=this[_0x47c4("0x1d5")][_0x47c4("0xf6")](n).fontSize;continue;case"3":this[_0x47c4("0x1d5")][_0x47c4("0xf4")](this[_0x47c4("0x370")])||(n=s.type[_0x47c4("0x218")].AMERICA);continue;case"4":continue;case"5":try{for(var r=f[_0x47c4("0x380")](_0x9fa626,this[_0x47c4("0x381")]),o=r.next();!o[_0x47c4("0x17")];o=r[_0x47c4("0x16")]()){var u=o[_0x47c4("0x26")];u[_0x47c4("0x37f")]=_,u[_0x47c4("0x382")]=i,u.lineHeight=a}}catch(x){c={error:x}}finally{try{o&&!o[_0x47c4("0x17")]&&(x=r.return)&&x[_0x47c4("0x8")](r)}finally{if(c)throw c[_0x47c4("0x1a")]}}continue;case"6":var a=this[_0x47c4("0x1d5")].get(n).lineHeight;continue;case"7":this[_0x47c4("0x381")][_0x47c4("0x1c")]=0;continue}break}},o);function o(x){for(var c=t[_0x47c4("0x36e")][_0x47c4("0x12")]("|"),e=0;;){switch(c[e++]){case"0":this.style=new Map;continue;case"1":this[_0x47c4("0x36f")]=new Map;continue;case"2":this[_0x47c4("0x370")]=this[_0x47c4("0x6e")].language;continue;case"3":this[_0x47c4("0x371")]();continue;case"4":this[_0x47c4("0x6e")]=x;continue}break}}s[_0x47c4("0x23a")]=r}(_0x44fb7c=_0x44fb7c||{}),function(c){var e={VIYip:" :  該key尚未加入推撥事件中,你需先執行 setNotification(type:IBaseNotification)方法"},x=(t.instance=function(){return this[_0x47c4("0xd4")]||(this._instance=new t),this[_0x47c4("0xd4")]},t.prototype[_0x47c4("0x384")]=function(x){return this[_0x47c4("0x383")][_0x47c4("0xf4")](x[_0x47c4("0x198")])||this.notificationToMap[_0x47c4("0x141")](x[_0x47c4("0x198")],x),this},t[_0x47c4("0x6")][_0x47c4("0x1b9")]=function(x){if(this[_0x47c4("0x383")][_0x47c4("0xf4")](x))return this.notificationToMap[_0x47c4("0xf6")](x);c[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](c[_0x47c4("0x58")][_0x47c4("0x57")][_0x47c4("0x7d")],x+e[_0x47c4("0x385")])},t.prototype[_0x47c4("0x1a6")]=function(x){return this[_0x47c4("0x383")][_0x47c4("0xf4")](x)},t[_0x47c4("0x6")][_0x47c4("0x386")]=function(){return this[_0x47c4("0x383")]},t);function t(){this[_0x47c4("0x383")]=new Map}c[_0x47c4("0x1a5")]=x}(_0x44fb7c=_0x44fb7c||{}),function(x){x.configMgr=x.SlotConfigManager[_0x47c4("0xc8")],x[_0x47c4("0x387")]=function(){return null},x[_0x47c4("0x388")]=function(){return x.NotificationManager.instance()}}(_0x44fb7c=_0x44fb7c||{}),function(x){function c(){}x=x[_0x47c4("0x121")]||(x[_0x47c4("0x121")]={}),c[_0x47c4("0x38a")]=function(x,c,e,t){var n=e[_0x47c4("0x1be")],_=cc.js[_0x47c4("0x38b")](e),e=new cc[_0x47c4("0x38c")][_0x47c4("0x38d")];e.target=n,e[_0x47c4("0x38e")]=_,e[_0x47c4("0xd1")]=c,!t&&0!=t||(e[_0x47c4("0x38f")]=t),x[_0x47c4("0x390")][_0x47c4("0x18")](e)},c[_0x47c4("0x391")]=function(x){x[_0x47c4("0x392")]=!1},c[_0x47c4("0x393")]=function(x){x.interactable=!0},c[_0x47c4("0x394")]=function(x,c,e,t){x.on(cc[_0x47c4("0x395")][_0x47c4("0x396")][_0x47c4("0x397")],c,e,t)},c[_0x47c4("0x398")]=function(x,c,e,t){x[_0x47c4("0x144")](cc.Node.EventType[_0x47c4("0x397")],c,e,t)},x.Button=c}(_0x44fb7c=(globalThis[_0x47c4("0x389")]=_0x44fb7c)||{}),function(x){var _,i,e={DzWrp:function(x,c){return x<c},IXIBd:function(x,c){return x<=c},CrzjK:function(x,c){return x+c},lMGUl:function(x,c){return x-c},RrKwS:function(x,c){return x<=c}};function c(){}x=x[_0x47c4("0x121")]||(x[_0x47c4("0x121")]={}),i={ApqZO:function(x,c){return e[_0x47c4("0x399")](x,c)},KumkY:function(x,c){return e.IXIBd(x,c)},TjqhU:function(x,c){return e[_0x47c4("0x39a")](x,c)},oOnsO:function(x,c){return e[_0x47c4("0x39b")](x,c)},PdOyw:function(x,c){return e[_0x47c4("0x39c")](x,c)}},_={KkcQp:function(x,c){return x<c},ocwHj:function(x,c){return i.PdOyw(x,c)}},c[_0x47c4("0x39d")]=function(x){for(var c=new Map,e=0;_[_0x47c4("0x39e")](e,x[_0x47c4("0x39f")]);e++)for(var t=x[_0x47c4("0x3a0")][e],n=0;_[_0x47c4("0x3a1")](n,t.childrenCount);n++)c[_0x47c4("0x141")](x[_0x47c4("0x3a0")][e][_0x47c4("0x291")],t);return c},c.getNodeTowChildren=function(x){for(var c=new Map,e=0;i.ApqZO(e,x[_0x47c4("0x39f")]);e++)for(var t=x[_0x47c4("0x3a0")][e],n=t[_0x47c4("0x3a0")][e][_0x47c4("0x291")],_=0;i.KumkY(_,t[_0x47c4("0x39f")]);_++)0==_?c[_0x47c4("0x141")](t[_0x47c4("0x3a0")][e][_0x47c4("0x291")],t):(n+=i[_0x47c4("0x3a2")]("/",t.children[_-1][_0x47c4("0x291")]),c.set(n,t[_0x47c4("0x3a0")][i.oOnsO(_,1)]),n=t[_0x47c4("0x3a0")][e][_0x47c4("0x291")]);return c},x.Prefab=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var t,e={hhecd:"isPermanent",hEyVk:function(x,c){return x<c}};function c(x,c){this[_0x47c4("0x192")]=!1,this[_0x47c4("0x3a4")]=c,this[_0x47c4("0x3a5")]=x}x=x[_0x47c4("0x184")]||(x[_0x47c4("0x184")]={}),t={GKdQI:function(x,c){return e[_0x47c4("0x3a3")](x,c)},JuJwp:function(x,c,e){return x(c,e)},CdtDb:function(x,c){return x(c)}},c[_0x47c4("0x6")].pushNotification=function(){for(var x,c=[],e=0;t[_0x47c4("0x3a6")](e,arguments[_0x47c4("0x1c")]);e++)c[e]=arguments[e];(x=this._callFun)[_0x47c4("0x8")][_0x47c4("0x13f")](x,t[_0x47c4("0x3a7")](_0x7b847e,[this[_0x47c4("0x3a4")]],t[_0x47c4("0x3a8")](_0x5589e9,c)))},Object[_0x47c4("0xd6")](c.prototype,e[_0x47c4("0x3a9")],{get:function(){return this._isPermanent},set:function(x){this[_0x47c4("0x192")]=x},enumerable:!1,configurable:!0}),x.ABaseObserver=c}(_0x44fb7c=_0x44fb7c||{}),function(){function x(){}(_0x44fb7c||(_0x44fb7c={}))[_0x47c4("0x3aa")]=x}(),function(x){var _={uaTOy:"STANDBY",JnYES:_0x47c4("0x302"),aiKas:"FREEING",CviJp:_0x47c4("0x3ab"),cJTZf:_0x47c4("0x3ac")};!function(x){for(var c,e=_0x47c4("0x3ad")[_0x47c4("0x12")]("|"),t=0;;){switch(e[t++]){case"0":(c=x.ProcessType||(x[_0x47c4("0x3b0")]={}))[n[_0x47c4("0x3ae")]]=n[_0x47c4("0x3ae")],c[n[_0x47c4("0x3af")]]=n.QVHoJ;continue;case"1":continue;case"2":var n={ntPxY:_[_0x47c4("0x3b1")],GPsqc:_[_0x47c4("0x3b2")],uNcFQ:_[_0x47c4("0x3b3")],TUCpj:_[_0x47c4("0x3b4")],QVHoJ:_[_0x47c4("0x3b5")]};continue;case"3":continue;case"4":(c=x[_0x47c4("0x14e")]||(x[_0x47c4("0x14e")]={}))[n[_0x47c4("0x3b6")]]=n.ntPxY,c[n[_0x47c4("0x3b7")]]=n.GPsqc,c[n.uNcFQ]=n[_0x47c4("0x3b8")];continue}break}}(x[_0x47c4("0x58")]||(x[_0x47c4("0x58")]={}))}(_0x44fb7c=_0x44fb7c||{}),function(_){var i,x=(i={mlaAj:{kMxTo:"查找不到該流程,請確認是否已綁定進框架中"}[_0x47c4("0x3b9")],jeHiC:function(x,c){return x(c)},UBjhv:function(x,c){return x+c},SjXlM:function(x,c,e){return x(c,e)}},c[_0x47c4("0x6")].initProcess=function(x){var c,e;if(x)this[_0x47c4("0x3bb")].has(x)?this[_0x47c4("0x3bb")].get(x)[_0x47c4("0x3bd")].onCreate():_[_0x47c4("0x94")][_0x47c4("0xc8")][_0x47c4("0x96")](_.type[_0x47c4("0x57")][_0x47c4("0x43")],i[_0x47c4("0x3bc")]);else{x=this[_0x47c4("0x3bb")].values();try{for(var t=i[_0x47c4("0x3be")](_0x9fa626,x),n=t[_0x47c4("0x16")]();!n[_0x47c4("0x17")];n=t[_0x47c4("0x16")]())n[_0x47c4("0x26")][_0x47c4("0x3bd")][_0x47c4("0x3bf")]()}catch(x){c={error:x}}finally{try{n&&!n[_0x47c4("0x17")]&&(e=t[_0x47c4("0x19")])&&e.call(t)}finally{if(c)throw c[_0x47c4("0x1a")]}}}},c[_0x47c4("0x6")][_0x47c4("0x152")]=function(x,c){this[_0x47c4("0x3bb")][_0x47c4("0x141")](x,c)},c.prototype[_0x47c4("0x3c0")]=function(x){return this[_0x47c4("0x3bb")][_0x47c4("0xf6")](x)},c.prototype[_0x47c4("0x3c1")]=function(){return this[_0x47c4("0x3bb")]},c[_0x47c4("0x6")][_0x47c4("0x155")]=function(x){this[_0x47c4("0x3bb")][_0x47c4("0xf4")](x)?this[_0x47c4("0x3c2")]=this[_0x47c4("0x3bb")][_0x47c4("0xf6")](x):_.ErrorManager.instance[_0x47c4("0x96")](_[_0x47c4("0x58")].ErrorType[_0x47c4("0x43")],i.UBjhv(x," 搜尋不到此流程,請檢查流程是否添加"))},c.prototype[_0x47c4("0x159")]=function(){return _0x26f3e4(this,void 0,void 0,function(){return i[_0x47c4("0x3c3")](_0x32ef64,this,function(x){switch(x[_0x47c4("0x2e")]){case 0:return[4,this[_0x47c4("0x3c2")][_0x47c4("0x3c4")]()];case 1:return x.sent(),[2]}})})},c);function c(x){this[_0x47c4("0x3ba")]=x,this[_0x47c4("0x3bb")]=new Map}_[_0x47c4("0x14c")]=x}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={oYwhq:_0x47c4("0x3c5")};((x=x[_0x47c4("0x58")]||(x.type={}))[_0x47c4("0x3c7")]||(x[_0x47c4("0x3c7")]={}))[c[_0x47c4("0x3c6")]]=c.oYwhq}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={kRHwY:"BET_RESULT",KANfo:_0x47c4("0x3c8"),GIPyC:_0x47c4("0x3c9"),IPeYT:_0x47c4("0x3ca"),WJihV:_0x47c4("0x3cb"),hlNRg:"GROUP_ID",fKlOn:_0x47c4("0x3cc"),oXwZB:_0x47c4("0x3cd")};(x=(x=x[_0x47c4("0x58")]||(x[_0x47c4("0x58")]={}))[_0x47c4("0x3d4")]||(x.ServerEventType={}))[c[_0x47c4("0x3ce")]]=c[_0x47c4("0x3ce")],x[c.KANfo]=c[_0x47c4("0x3cf")],x[_0x47c4("0x3c9")]=c[_0x47c4("0x3d0")],x[c.IPeYT]=c[_0x47c4("0x3d1")],x[_0x47c4("0x3cb")]=c.WJihV,x[c[_0x47c4("0x3d2")]]=c[_0x47c4("0x3d2")],x[c[_0x47c4("0x3d3")]]=c[_0x47c4("0x3d3")],x[c.oXwZB]=_0x47c4("0x3cd")}(_0x44fb7c=_0x44fb7c||{}),function(x){var e,_={CXbCe:function(x,c){return x(c)},WsvmB:function(x,c,e,t,n){return x(c,e,t,n)}},c=(e={zbHVz:function(x,c){return _[_0x47c4("0x3d5")](x,c)},BKLJQ:function(x,c,e,t,n){return _.WsvmB(x,c,e,t,n)}},t[_0x47c4("0x6")].onExecution=function(){return this[_0x47c4("0x3d7")].add(this[_0x47c4("0x3d6")][_0x47c4("0x3d8")]),this},t.prototype[_0x47c4("0x3d9")]=function(){return this._process[_0x47c4("0x17d")](this[_0x47c4("0x3d6")][_0x47c4("0x3d9")]),this},t[_0x47c4("0x6")].onChangeStatus=function(){return this._process[_0x47c4("0x17d")](this._executionContainer.onChangeStatus),this},t[_0x47c4("0x6")].start=function(){var _=function(x,c){return e[_0x47c4("0x3da")](x,c)};return e[_0x47c4("0x3db")](_0x26f3e4,this,void 0,void 0,function(){var c,e,t,n;return _0x32ef64(this,function(x){switch(x.label){case 0:x[_0x47c4("0x30")][_0x47c4("0x18")]([0,5,6,7]),c=_(_0x9fa626,this[_0x47c4("0x3d7")]),e=c.next(),x[_0x47c4("0x2e")]=1;case 1:return e[_0x47c4("0x17")]?[3,4]:[4,e[_0x47c4("0x26")].apply(this[_0x47c4("0x3d6")])];case 2:x[_0x47c4("0x15a")](),x.label=3;case 3:return e=c.next(),[3,1];case 4:return[3,7];case 5:return t=x.sent(),t={error:t},[3,7];case 6:try{e&&!e[_0x47c4("0x17")]&&(n=c[_0x47c4("0x19")])&&n[_0x47c4("0x8")](c)}finally{if(t)throw t[_0x47c4("0x1a")]}return[7];case 7:return[2]}})})},Object[_0x47c4("0xd6")](t.prototype,_0x47c4("0x3c2"),{get:function(){return this[_0x47c4("0x3d7")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](t[_0x47c4("0x6")],"executionContainer",{get:function(){return this[_0x47c4("0x3d6")]},enumerable:!1,configurable:!0}),t);function t(x){this[_0x47c4("0x3d6")]=x,this[_0x47c4("0x3d7")]=new Set}x[_0x47c4("0x3dc")]=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var i,e={vcnGr:function(x,c){return x(c)},jvZBZ:_0x47c4("0x3bd"),xVbCK:_0x47c4("0x3c2")},c=(i={xdxRn:function(x,c,e){return x(c,e)}},t[_0x47c4("0x6")][_0x47c4("0x3dd")]=function(){return this[_0x47c4("0x3d7")].add(this[_0x47c4("0x3d6")][_0x47c4("0x3dd")]),this},t.prototype[_0x47c4("0x3de")]=function(){return this._process[_0x47c4("0x17d")](this[_0x47c4("0x3d6")][_0x47c4("0x3de")]),this},t[_0x47c4("0x6")].onRunning=function(){return this[_0x47c4("0x3d7")][_0x47c4("0x17d")](this._executionContainer[_0x47c4("0x3df")]),this},t.prototype.onCustomizeEnd=function(){return this[_0x47c4("0x3d7")].add(this._executionContainer.onCustomizeEnd),this},t.prototype[_0x47c4("0x3e0")]=function(){return this._process[_0x47c4("0x17d")](this[_0x47c4("0x3d6")].onShowAnswer),this},t.prototype.onChangeStatus=function(){return this[_0x47c4("0x3d7")][_0x47c4("0x17d")](this[_0x47c4("0x3d6")].onChangeStatus),this},t[_0x47c4("0x6")].start=function(){var _={rhyWK:function(x,c){return e.vcnGr(x,c)}};return _0x26f3e4(this,void 0,void 0,function(){var c,e,t,n;return i[_0x47c4("0x3e1")](_0x32ef64,this,function(x){switch(x.label){case 0:x[_0x47c4("0x30")][_0x47c4("0x18")]([0,5,6,7]),c=_[_0x47c4("0x3e2")](_0x9fa626,this[_0x47c4("0x3d7")]),e=c.next(),x[_0x47c4("0x2e")]=1;case 1:return e.done?[3,4]:[4,e.value[_0x47c4("0x13f")](this[_0x47c4("0x3d6")])];case 2:x[_0x47c4("0x15a")](),x.label=3;case 3:return e=c[_0x47c4("0x16")](),[3,1];case 4:return[3,7];case 5:return t=x[_0x47c4("0x15a")](),t={error:t},[3,7];case 6:try{e&&!e[_0x47c4("0x17")]&&(n=c[_0x47c4("0x19")])&&n[_0x47c4("0x8")](c)}finally{if(t)throw t[_0x47c4("0x1a")]}return[7];case 7:return[2]}})})},Object[_0x47c4("0xd6")](t[_0x47c4("0x6")],e[_0x47c4("0x3e3")],{get:function(){return this[_0x47c4("0x3d6")]},enumerable:!1,configurable:!0}),Object.defineProperty(t[_0x47c4("0x6")],e[_0x47c4("0x3e4")],{get:function(){return this[_0x47c4("0x3d7")]},enumerable:!1,configurable:!0}),t);function t(x){this[_0x47c4("0x3d6")]=x,this[_0x47c4("0x3d7")]=new Set}x[_0x47c4("0x3e5")]=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var c={jcFQF:"gridNodeToMap",wcVIu:_0x47c4("0x3e6"),Zooag:_0x47c4("0x3e7"),ZGiyz:_0x47c4("0x3e8"),DTIAC:_0x47c4("0x3e9"),uDbej:_0x47c4("0x3ea"),eipGD:_0x47c4("0x3eb")};function e(x){this._slotStyleManager=x}x=x[_0x47c4("0x184")]||(x.ABS={}),c={alOUH:c[_0x47c4("0x3ec")],rDMHs:c[_0x47c4("0x3ed")],jAJvT:c[_0x47c4("0x3ee")],gJPXS:c[_0x47c4("0x3ef")],NPiHZ:_0x47c4("0x3f0"),vPvaz:c[_0x47c4("0x3f1")],yHARK:c.uDbej,ZKUWO:c.eipGD},e[_0x47c4("0x6")][_0x47c4("0x3f2")]=function(x){return this[_0x47c4("0x3f3")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x3f4")]=function(x){return this[_0x47c4("0x3f5")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x3f6")]=function(x){return this[_0x47c4("0x3f7")]=x,this},e[_0x47c4("0x6")].setSpeedUpMultiple=function(x){return this[_0x47c4("0x3f8")]=x,this},e[_0x47c4("0x6")][_0x47c4("0x3f9")]=function(x){return this._slotRowGridCount=x,this},e[_0x47c4("0x6")][_0x47c4("0x3fa")]=function(x){return this[_0x47c4("0x3fb")]=x,this},e.prototype[_0x47c4("0x3fc")]=function(x){return this[_0x47c4("0x3fd")]=x,this},e[_0x47c4("0x6")].setGridNodeToMap=function(x){return this._gridNodeToMap=x,this},e[_0x47c4("0x6")][_0x47c4("0x3fe")]=function(x){return this[_0x47c4("0x3ff")]=x,this},e.prototype[_0x47c4("0x400")]=function(x){return this._freeResult=x,this},e[_0x47c4("0x6")][_0x47c4("0x401")]=function(){this[_0x47c4("0x402")][_0x47c4("0x1ec")](this)},Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],_0x47c4("0x403"),{get:function(){return this[_0x47c4("0x3fb")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x404")],{get:function(){return this._gridNodeToMap},enumerable:!1,configurable:!0}),Object.defineProperty(e[_0x47c4("0x6")],c[_0x47c4("0x405")],{get:function(){return this[_0x47c4("0x3fd")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,c[_0x47c4("0x406")],{get:function(){return this[_0x47c4("0x3f7")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],"slotGridHeight",{get:function(){return this._slotGridHeight},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x407")],{get:function(){return this[_0x47c4("0x408")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x409")],{get:function(){return this[_0x47c4("0x3f3")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,c.vPvaz,{get:function(){return this[_0x47c4("0x3f8")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],c[_0x47c4("0x40a")],{get:function(){return this[_0x47c4("0x402")]},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e[_0x47c4("0x6")],_0x47c4("0x40b"),{get:function(){return this._freeResult},enumerable:!1,configurable:!0}),Object[_0x47c4("0xd6")](e.prototype,c.ZKUWO,{get:function(){return this[_0x47c4("0x3ff")]},enumerable:!1,configurable:!0}),c=e,x[_0x47c4("0x40c")]=c}(_0x44fb7c=_0x44fb7c||{}),function(x){var c,e,t={qewvi:function(x,c){return x!==c},FPEIL:function(x,c,e){return x(c,e)},twvyu:_0x47c4("0x40d"),cqeDQ:_0x47c4("0x40e")},n=(c=x[_0x47c4("0x184")][_0x47c4("0x40c")],e={rYfEa:function(x,c){return t.qewvi(x,c)}},t[_0x47c4("0x40f")](_0x146e9c,_,c),_[_0x47c4("0x6")].setGridImg=function(x){return this[_0x47c4("0x411")]=x,this},_[_0x47c4("0x6")][_0x47c4("0x412")]=function(x){return this[_0x47c4("0x413")]=x,this},Object[_0x47c4("0xd6")](_[_0x47c4("0x6")],t.twvyu,{get:function(){return this[_0x47c4("0x413")]},enumerable:!1,configurable:!0}),Object.defineProperty(_.prototype,t[_0x47c4("0x414")],{get:function(){return this[_0x47c4("0x411")]},enumerable:!1,configurable:!0}),_);function _(){return e[_0x47c4("0x410")](c,null)&&c[_0x47c4("0x13f")](this,arguments)||this}x.SlotImgSetting=n}(_0x44fb7c=_0x44fb7c||{}),function(x){var c,e={XQOng:function(x,c){return x!==c},ltchR:function(x,c,e){return x(c,e)}},t=(c=x.ABS[_0x47c4("0x40c")],e[_0x47c4("0x415")](_0x146e9c,n,c),n[_0x47c4("0x6")][_0x47c4("0x417")]=function(x){return this[_0x47c4("0x411")]=x,this},n.prototype[_0x47c4("0x412")]=function(x){return this[_0x47c4("0x413")]=x,this},n.prototype[_0x47c4("0x418")]=function(x){return this[_0x47c4("0x419")]=x,this},n);function n(){return e[_0x47c4("0x416")](c,null)&&c[_0x47c4("0x13f")](this,arguments)||this}x[_0x47c4("0x41a")]=t}(_0x44fb7c=_0x44fb7c||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_31e3a74b.js","/")
},{"2ionoC":5,"buffer":3}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\base64-js\\lib\\b64.js","/..\\node_modules\\gulp-browserify\\node_modules\\base64-js\\lib")
},{"2ionoC":5,"buffer":3}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\buffer\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\buffer")
},{"2ionoC":5,"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\ieee754\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\ieee754")
},{"2ionoC":5,"buffer":3}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\process\\browser.js","/..\\node_modules\\gulp-browserify\\node_modules\\process")
},{"2ionoC":5,"buffer":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
