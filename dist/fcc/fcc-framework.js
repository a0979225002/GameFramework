(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var __read=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(n=i.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a},__spreadArray=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e},__awaiter=this&&this.__awaiter||function(e,a,s,c){return new(s=s||Promise)(function(r,t){function n(e){try{i(c.next(e))}catch(e){t(e)}}function o(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(n,o)}i((c=c.apply(e,a||[])).next())})},__generator=this&&this.__generator||function(r,n){var o,i,a,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(a=2&t[0]?i.return:t[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,t[1])).done)return a;switch(i=0,(t=a?[2&t[0],a.value]:t)[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=n.call(r,s)}catch(e){t=[6,e],i=0}finally{o=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},__extends=this&&this.__extends||function(){var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),__values=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return{value:(e=e&&n>=e.length?void 0:e)&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};!function(e){(e=(e=e.type||(e.type={})).ErrorType||(e.ErrorType={})).TYPE_FW="傳入的Type 錯誤 ,請檢察該Type是否非FarmWork內的Type",e.IS_RUNNING_FW="遊戲正在執行中,請勿重複呼叫",e.UNDEFINED_FW="變數為undefined,流程無法繼續",e.LOAD_FW="加載的資源有問題",e.ANIMATION_FW="Animation 類中方法有錯誤 : ",e.WEB_REQUEST_FW="WebRequest 類有錯誤 : ",e.WEB_RESPONSE_FW="WebResponse 類有錯誤 : ",e.AUDIO_FW="AUDIO 類有錯誤 :",e.SCENE_FW="Scene 類有錯誤 :",e.PROCESS_FW="process 類有錯誤 :",e.LISTENER_FW="Event 類有錯誤 :",e.SLOT_STYLE_FW="SlotStyleFW類有錯誤 :",e.TEMPLATE_FW="模板類有錯誤 :"}(fcc=fcc||{}),function(e){var t=(r.prototype.checkErrorType=function(e,t){throw new Error("例外錯誤 : "+e)},r);function r(e){this.configManager=e}e.UnknownError=t}(fcc=fcc||{}),function(r){var e=(t.prototype.checkErrorType=function(e,t){if(this.configManager.isFrameworkDebug)switch(e){case r.type.ErrorType.IS_RUNNING_FW:throw new Error(r.type.ErrorType.IS_RUNNING_FW+" "+t);case r.type.ErrorType.UNDEFINED_FW:throw new Error(r.type.ErrorType.UNDEFINED_FW+" "+t);case r.type.ErrorType.TYPE_FW:throw new Error(r.type.ErrorType.TYPE_FW+" "+t);case r.type.ErrorType.ANIMATION_FW:throw new Error(r.type.ErrorType.ANIMATION_FW+" "+t);case r.type.ErrorType.LOAD_FW:throw new Error(r.type.ErrorType.LOAD_FW+" "+t);case r.type.ErrorType.WEB_REQUEST_FW:throw new Error(r.type.ErrorType.WEB_REQUEST_FW+" "+t);case r.type.ErrorType.AUDIO_FW:throw new Error(r.type.ErrorType.AUDIO_FW+" "+t);case r.type.ErrorType.WEB_RESPONSE_FW:throw new Error(r.type.ErrorType.WEB_RESPONSE_FW+" "+t);case r.type.ErrorType.SCENE_FW:throw new Error(r.type.ErrorType.SCENE_FW+" "+t);case r.type.ErrorType.PROCESS_FW:throw new Error(r.type.ErrorType.PROCESS_FW+" "+t);case r.type.ErrorType.LISTENER_FW:throw new Error(r.type.ErrorType.LISTENER_FW+" "+t);case r.type.ErrorType.SLOT_STYLE_FW:throw new Error(r.type.ErrorType.SLOT_STYLE_FW+" "+t);case r.type.ErrorType.TEMPLATE_FW:throw new Error(r.type.ErrorType.TEMPLATE_FW+" "+t);default:this.unknownError.checkErrorType(e)}else console.log("有例外錯誤,但你未開啟框架Debug,無法查看")},t);function t(e){this.unknownError=new r.UnknownError(e),this.configManager=e}r.FrameWorkError=e}(fcc=fcc||{}),function(t){var e=(r.prototype.checkErrorType=function(e,t){if("string"==typeof e)this.frameWorkError.checkErrorType(e,t);else if(null===e)return this.checkObjectType(t)},r.prototype.checkObjectType=function(e){if(e&&0!=e)return typeof e;throw new Error("該物件為null")},r);function r(e){this.frameWorkError=new t.FrameWorkError(e)}t.ObjectError=e}(fcc=fcc||{}),function(o){var e=(t.prototype.showError=function(e,t,r){var n=this;null!=this.timeOut&&clearTimeout(this.timeOut),this.errorManager.errorNode||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorNode為空"),this.errorManager.errorLabel||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorLabel為空"),this.errorManager.errorButton||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorButton為空"),o.ErrorManager.errorState=!0,this.errorManager.errorNode.active=!0,this.errorManager.errorLabel.string=t,this.errorManager.errorButton.active=this.errorManager.isShowBackHomeButton,this.errorManager.errorButton.active&&(this.errorManager.errorButtonLabel.string=r),e||(this.timeOut=window.setTimeout(function(){o.ErrorManager.errorState=!1,n.errorManager.errorNode.active=!1,n.errorManager.errorButton.active=!1,n.timeOut=null},this.errorManager.errorDelayTime))},t);function t(e){this.timeOut=null,this.errorManager=e}o.ServerError=e}(fcc=fcc||{}),function(o){var e=(t.prototype.showError=function(e,t,r){var n=this;null!=this.timeout&&clearTimeout(this.timeout),this.errorManager.warningNode||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningNode為空"),this.errorManager.warningLabel||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningLabel為空"),0==this.errorManager.warningDelayTime&&this.errorManager.executeError("當前DelayTime = 0 : 請給予值"),o.ErrorManager.warningState=!0,this.errorManager.warningNode.active=!0,this.errorManager.warningLabel.string=t,e||(this.timeout=window.setTimeout(function(){o.ErrorManager.warningState=!1,n.errorManager.warningNode.active=!1},this.errorManager.warningDelayTime))},t.prototype.showErrorBet=function(e){var t=this;this.errorManager.errorNode||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorNode為空"),this.errorManager.errorLabel||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorLabel為空"),this.errorManager.errorButton||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorButton為空"),0==this.errorManager.errorDelayTime&&this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager errorDelayTime為空 無法顯示"),o.ErrorManager.errorState||(o.ErrorManager.errorState=!0,this.errorManager.errorNode.active=!0,this.errorManager.errorLabel.string=e,window.setTimeout(function(){o.ErrorManager.errorState=!1,t.errorManager.errorNode.active=!1},this.errorManager.errorDelayTime))},t);function t(e){this.timeout=null,this.errorManager=e}o.WarningError=e}(fcc=fcc||{}),function(r){var e=(t.prototype.checkErrorType=function(e,t){return this.objectError.checkErrorType(e,t)},t.prototype.checkServerError=function(e,t,r){this.serverError.showError(e,t,r)},t.prototype.checkWarning=function(e,t,r){this.warningError.showError(e,t,r)},t);function t(e,t){this.objectError=new r.ObjectError(e),this.serverError=new r.ServerError(t),this.warningError=new r.WarningError(t)}r.ErrorHandler=e}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.errorMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(!this._instance)throw new Error("ErrorManager類錯誤 :  該類尚未實例化");return this._instance},enumerable:!1,configurable:!0}),r.prototype.executeError=function(e,t){return this.handler.checkErrorType(e,t)},r.prototype.showErrorDialog=function(e,t,r){this.handler.checkServerError(e,t,r)},r.prototype.showWarningDialog=function(e,t,r){this.handler.checkWarning(e,t,r)},r.prototype.setErrorNode=function(e){return this._errorNode=e,this},r.prototype.setErrorLabel=function(e){return this._errorLabel=e,this},r.prototype.setErrorButton=function(e){return this._errorButton=e,this},r.prototype.setErrorDelayTime=function(e){return this._errorDelayTime=e,this},r.prototype.setWarningDelayTime=function(e){return this._warningDelayTime=e,this},r.prototype.setWarningNode=function(e){return this._warningNode=e,this},r.prototype.setWarningLabel=function(e){return this._warningLabel=e,this},r.prototype.setErrorButtonLabel=function(e){return this._errorButtonLabel=e,this},Object.defineProperty(r,"errorState",{get:function(){return this._errorState},set:function(e){this._errorState=e},enumerable:!1,configurable:!0}),Object.defineProperty(r,"warningState",{get:function(){return this._warningState},set:function(e){this._warningState=e},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorNode",{get:function(){return this._errorNode},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"warningNode",{get:function(){return this._warningNode},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorButton",{get:function(){return this._errorButton},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"warningLabel",{get:function(){return this._warningLabel},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorLabel",{get:function(){return this._errorLabel},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorDelayTime",{get:function(){return this._errorDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"warningDelayTime",{get:function(){return this._warningDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isShowBackHomeButton",{get:function(){return this._isShowBackHomeButton},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"errorButtonLabel",{get:function(){return this._errorButtonLabel},enumerable:!1,configurable:!0}),r);function r(e){this.handler=new t.ErrorHandler(e,this),this.configManager=e,this._errorNode=null,this._errorLabel=null,this._errorDelayTime=2e3,this._warningDelayTime=1e3,r._errorState=!1,r._warningState=!1,this._isShowBackHomeButton=!!this.configManager.backHomeURL}t.ErrorManager=e}(fcc=fcc||{}),function(e){var t=(r.prototype.updateSpineAnimationName=function(e,t,r){var n=new Map;n.set(t,r),this.animationManager.spineName.set(e,n)},r);function r(e){this.animationManager=e}e.AnimationHandler=t}(fcc=fcc||{}),function(r){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),r.animationMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;r.ErrorManager.instance.executeError(r.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.getSpineName=function(e,t){return this._spineName.has(e)?r.ErrorManager.instance.executeError(r.type.ErrorType.ANIMATION_FW,"resources 資源名錯誤"):this._spineName.get(e).has(""+t)&&r.ErrorManager.instance.executeError(r.type.ErrorType.ANIMATION_FW,"尚未獲取資源,請查看 AnimationManager.instance.spineName"),this.spineName.get(e).get(""+t)},Object.defineProperty(t.prototype,"spineName",{get:function(){return this._spineName},set:function(e){this._spineName=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"handler",{get:function(){return this._handler},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this._spineName=new Map,this._handler=new r.AnimationHandler(this)}r.AnimationManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AudioStateType||(e.AudioStateType={})).CLEAR_TO_REPLAY="CLEAR_TO_REPLAY",e.NOT_PLAYING="NOT_PLAYING",e.SUPERIMPOSE="SUPERIMPOSE"}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.roundOff=function(e,t){return Math.round(Math.round(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundDown=function(e,t){return Math.floor(Math.floor(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundUp=function(e,t){return Math.ceil(Math.ceil(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.decimalsCount=function(e){var t=String(e).indexOf(".")+1,e=String(e).length-t;return 0==t?0:e},t.numberFormat=function(e){return e<1e3?e+"":1e3<e?e/1e3+"K":void 0},t.format=function(e){return this.formatting.format(e)},t.formatting=new Intl.NumberFormat,e.Util=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LoadType||(e.LoadType={})).IMG="IMG",e.IMG_ATLAS="IMG_ATLAS",e.SPINE="SPINE",e.PREFAB="PREFAB",e.MUSIC="MUSIC",e.TEXT="TEXT",e.SCENE="SCENE",e.SCRIPT="SCRIPT",e.CSS="CSS"}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.eventMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),r.prototype.emitEvent=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this.target).emit.apply(t,__spreadArray([e],__read(r)))},r.prototype.eventListener=function(e,t,r,n){this._eventCount+=1,this._eventsCurrentlyBeing.set("severEvent",e),r?this.target.on(e,t,n):this.target.once(e,t,n)},r.prototype.destroyEvent=function(e,t){this.target.off(e,t,this.target)},r.prototype.hasListening=function(e){return this.target.hasEventListener(e)},Object.defineProperty(r.prototype,"eventCount",{get:function(){return this._eventCount},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"eventsCurrentlyBeing",{get:function(){return this._eventsCurrentlyBeing},enumerable:!1,configurable:!0}),r);function r(e){this.configManager=e,this._eventCount=0,this._eventsCurrentlyBeing=new Map,this.target=new cc.EventTarget}t.EventManager=e}(fcc=fcc||{}),function(r){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),r.processMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;r.ErrorManager.instance.executeError(r.type.ErrorType.PROCESS_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.setProcess=function(e,t){return this.gameProcessFactory.setProcess(e,t),this},t.prototype.initProcess=function(e){this.gameProcessFactory.initProcess(e)},t.prototype.setDefaultProcess=function(e){this.gameProcessFactory.changeProcess(e)},t.prototype.changeProcess=function(e){this.gameProcessFactory.changeProcess(e)},t.prototype.play=function(){var e=this;return new Promise(function(t){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.isStartProcess?[3,2]:(this.updateProcessState(!0),[4,this.gameProcessFactory.useProcess()]);case 1:return e.sent(),this.updateProcessState(!1),t(),[3,3];case 2:r.ErrorManager.instance.executeError(r.type.ErrorType.PROCESS_FW,"流程尚未結束,請勿重複執行"),e.label=3;case 3:return[2]}})})})},t.prototype.updateProcessState=function(e){this.isStartProcess=e},t.prototype.remake=function(){this.isStartProcess=!1},Object.defineProperty(t.prototype,"gameState",{get:function(){return this._gameState},set:function(e){this._gameState=e},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.gameProcessFactory=new r.GameProcessFactory(this),this._gameState=r.type.GameStateType.STANDBY,this.isStartProcess=!1}r.ProcessManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneStyleType||(e.SceneStyleType={})).AUTO="AUTO",e.HORIZONTAL="HORIZONTAL",e.VERTICAL="VERTICAL"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneDirectionType||(e.SceneDirectionType={})).PORTRAIT="PORTRAIT",e.LANDSCAPE="LANDSCAPE"}(fcc=fcc||{}),function(e){var t=(r.prototype.designSceneEventListener=function(t){var e=this;cc.view.on("canvas-resize",function(){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.makeDesignScene(t)];case 1:return e.sent(),cc.log("更新畫面完畢......"),[2]}})})})},r.prototype.makeDesignScene=function(r){var n=this;return new Promise(function(e,t){n._isCanUpdateScene?(n._isCanUpdateScene=!1,setTimeout(function(){n.sceneManager.updateSize(),n._isCanUpdateScene=!0,e()},r)):n.configManager.isFrameworkDebug&&t("正在UpdateScene中 請稍後......")})},r);function r(e,t){this._isCanUpdateScene=!0,this.configManager=e,this.sceneManager=t}e.SceneSizeChangeListener=t}(fcc=fcc||{}),function(r){var e;function t(){this.observer=new Set}e=r.ABS||(r.ABS={}),t.prototype.subscribe=function(e,t){this.observer.has(e)?r.ErrorManager.instance.executeError(r.type.ErrorType.SCENE_FW,e+" 該IBaseObserver已註冊過自動狀態改變時事件,請檢查"):(e.isPermanent=t,this.observer.add(e))},t.prototype.unsubscribe=function(e){this.observer.has(e)?this.observer.delete(e):r.ErrorManager.instance.executeError(r.type.ErrorType.PROCESS_FW,e+" : 該觀察類尚未綁定過,無須移除觀察對象")},t.prototype.removeAll=function(){this.observer.clear()},t.prototype.getSubscribeCount=function(){return this.observer.size},t.prototype.getAllSubscribe=function(){return this.observer},e.ABaseNotification=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).NotificationType||(e.NotificationType={})).AUTO_CHANGE="AUTO_CHANGE",e.SPEED_CHANGE="SPEED_CHANGE",e.USER_MONEY_CHANGE="USER_MONEY_CHANGE",e.USER_BET_CHANGE="USER_BET_CHANGE",e.USER_GET_WIN="USER_GET_WIN",e.SCENE_DIRECTION_CHANGE="SCENE_DIRECTION_CHANGE",e.RESPONSE_RESULT="RESPONSE_RESULT",e.SCROLL_FOCUS_STATE="SCROLL_FOCUS_STATE",e.STOP_NOW="STOP_NOW"}(fcc=fcc||{}),function(e){var t=(r.prototype.pushNotification=function(e){this.callFun.call(this.self,e)},Object.defineProperty(r.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),r);function r(e,t){this._isPermanent=!1,this.self=t,this.callFun=e}e.SceneDirectionChangeObserver=t}(fcc=fcc||{}),function(t){var r,e=(r=t.ABS.ABaseNotification,__extends(n,r),n.prototype.subscribe=function(e,t){r.prototype.subscribe.call(this,e,t)},n.prototype.notify=function(e){var t,r;if(0<this.observer.size)try{for(var n=__values(this.observer),o=n.next();!o.done;o=n.next()){var i=o.value;i.pushNotification(e),i.isPermanent||this.unsubscribe(i)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},n);function n(){var e=r.call(this)||this;return e.TAG_NAME=t.type.NotificationType.SCENE_DIRECTION_CHANGE,e}t.SceneDirectionChangeNotification=e}(fcc=fcc||{}),function(t){var e=(r.prototype.executionStyle=function(e,t){var r,n;this.updateSceneDirection(),cc.view.getFrameSize().width/cc.view.getFrameSize().height>=e/t?(r=cc.view.getFrameSize().width*(e/cc.view.getFrameSize().height),cc.view.setDesignResolutionSize(r,t,cc.ResolutionPolicy.FIXED_HEIGHT)):cc.view.getFrameSize().width>cc.view.getFrameSize().height?(n=cc.view.getFrameSize().height*(e/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(e,n,cc.ResolutionPolicy.FIXED_WIDTH)):cc.view.getFrameSize().width/cc.view.getFrameSize().height>=1e3/1777?(n=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,n,cc.ResolutionPolicy.FIXED_HEIGHT)):(n=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,n,cc.ResolutionPolicy.FIXED_WIDTH))},r.prototype.updateSceneDirection=function(){cc.view.getFrameSize().width<cc.view.getFrameSize().height?this.sceneManager.sceneDirection!=t.type.SceneDirectionType.PORTRAIT&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.PORTRAIT,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.PORTRAIT)):this.sceneManager.sceneDirection!=t.type.SceneDirectionType.LANDSCAPE&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.LANDSCAPE,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.LANDSCAPE))},r);function r(e){this.sceneManager=e,t.NotificationManager.instance().hasNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE)?this.eventLock=!1:(this.eventLock=!0,console.log("你尚未綁定當遊戲方向更動時的推播事件,因此不會觸發方向改變的推播事件"))}t.AutoStyle=e}(fcc=fcc||{}),function(e){var t=(r.prototype.executionStyle=function(e,t){var r=cc.find("Canvas").getComponent(cc.Canvas);this.curDR||(this.curDR=cc.size(e,t));var n=this.curDR,o=cc.view.getFrameSize(),i=o.width,e=o.height,t=i,o=e;i/e>n.width/n.height?(r.fitHeight=!0,r.fitWidth=!1,t=(o=n.height)*i/e):(r.fitHeight=!1,r.fitWidth=!0,o=e/i*(t=n.width)),r.designResolution=cc.size(t,o),r.node.width=t,r.node.height=o},r);function r(){}e.HorizontalStyle=t}(fcc=fcc||{}),function(r){var e=(t.prototype.executionStyle=function(e,t){r.ErrorManager.instance.executeError("尚未完成直向是配模式")},t);function t(){}r.VerticalStyle=e}(fcc=fcc||{}),function(n){var e=(t.prototype.getStyle=function(e,t,r){switch(e){case n.type.SceneStyleType.AUTO:this.autoStyle||(this.autoStyle=new n.AutoStyle(this.sceneManager)),this.autoStyle.executionStyle(t,r);break;case n.type.SceneStyleType.HORIZONTAL:this.horizontalStyle||(this.horizontalStyle=new n.HorizontalStyle),this.horizontalStyle.executionStyle(t,r);break;case n.type.SceneStyleType.VERTICAL:this.verticalStyle||(this.verticalStyle=new n.VerticalStyle),this.verticalStyle.executionStyle(t,r);break;default:e.executionStyle(t,r)}},t);function t(e){this.sceneManager=e}n.SceneStyleHandler=e}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.sceneMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),r.prototype.setDesignWidth=function(e){return this._designWidth=e,this},r.prototype.setDesignHeight=function(e){return this._designHeight=e,this},r.prototype.updateSize=function(e){if(e)switch(this.style=e){case t.type.SceneStyleType.HORIZONTAL:this._sceneDirection=t.type.SceneDirectionType.PORTRAIT;break;case t.type.SceneStyleType.VERTICAL:this._sceneDirection=t.type.SceneDirectionType.LANDSCAPE;break;case t.type.SceneStyleType.AUTO:break;default:console.log("該更新模式尚未包含在框架中,請確認是否有實作ISceneStyle")}return this.sceneStyleHandler.getStyle(this.style,this._designWidth,this._designHeight),this},r.prototype.startListener=function(e){this.sceneSizeChangeListener.designSceneEventListener(e)},r.prototype.changeScene=function(e){t.LoadResManager.instance.sceneRes.has(e)||t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"加載不到你的Scene資源,請檢查該資源名是否正確"),cc.director.runScene(t.LoadResManager.instance.sceneRes.get(e))},r.prototype.removeScene=function(e){e.destroy()},Object.defineProperty(r.prototype,"sceneDirection",{get:function(){return this._sceneDirection},set:function(e){this._sceneDirection=e},enumerable:!1,configurable:!0}),r);function r(e){this.configManager=e,this._designWidth=1280,this._designHeight=720,this.sceneSizeChangeListener=new t.SceneSizeChangeListener(e,this),this.sceneStyleHandler=new t.SceneStyleHandler(this),this.style=t.type.SceneStyleType.HORIZONTAL}t.SceneManager=e}(fcc=fcc||{}),function(t){var e=(r.setInstance=function(e){this._instance||(this._instance=new r(e),t.slotStyleMgr=this._instance)},Object.defineProperty(r,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.SLOT_STYLE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),r.prototype.setSlotTemplate=function(e){return this.template=e,this},r.prototype.setSlotStyle=function(e){return new e(this)},r.prototype.build=function(e){this.template||t.ErrorManager.instance.executeError(t.type.ErrorType.UNDEFINED_FW,"Slot Template 未賦予,需幫定或實做一個SlotTemplate"),this._slot=new this.template(e,this.configManager)},Object.defineProperty(r.prototype,"slot",{get:function(){return this._slot},enumerable:!1,configurable:!0}),r);function r(e){this.configManager=e}t.SlotStyleManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AutoType||(e.AutoType={}))[e.AUTO=-1]="AUTO",e[e.FREE_END=-2]="FREE_END",e[e.AUTO_50=50]="AUTO_50",e[e.AUTO_100=100]="AUTO_100",e[e.AUTO_500=500]="AUTO_500",e[e.AUTO_1000=1e3]="AUTO_1000"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LanguageType||(e.LanguageType={})).TAIWAN="NTD",e.CHINESE="CNY",e.THAILAND="THB",e.AMERICA="USD",e.VIETNAM="VND",e.INDONESIA="IDR",e.MALAYSIA="MYR"}(fcc=fcc||{}),function(e){var t=(Object.defineProperty(r,"instance",{get:function(){return this._instance||(this._instance=new r),this._instance},enumerable:!1,configurable:!0}),r.prototype.setGameNumber=function(e){return this._gameNumber=e,this},r.prototype.setMusicVolume=function(e){return this._musicVolume=e,this},r.prototype.setEffectVolume=function(e){return this._effectVolume=e,this},r.prototype.setMusicOnMute=function(e){return this._isMusicOnMute=e,this},r.prototype.setEffectOnMute=function(e){return this._isEffectOnMute=e,this},r.prototype.setAutoCont=function(e){return this._autoCount=e,this},r.prototype.setExternallyLoadURL=function(e){return this._externallyLoadURL=e,this},r.prototype.setLanguage=function(e){return this._language=e,this},r.prototype.setAutoState=function(e){return this._isAuto=e,this},r.prototype.setSpeedState=function(e){return this._isSpeedUp=e,this},r.prototype.setFrameWorkDebug=function(e){return this._isFrameworkDebug=e,this},r.prototype.setCocosDebug=function(e){return this._cocosDebugSetting=e,this},r.prototype.setBackHomeURL=function(e){return this._backHomeURL=e,this},r.prototype.build=function(){cc.debug._resetDebugSetting(this._cocosDebugSetting),e.ErrorManager.setInstance(this),e.AudioManager.setInstance(this),e.LanguageManager.setInstance(this),e.EventManager.setInstance(this),e.LoadResManager.setInstance(this),e.ProcessManager.setInstance(this),e.SceneManager.setInstance(this),e.SlotStyleManager.setInstance(this)},Object.defineProperty(r.prototype,"externallyLoadURL",{get:function(){return this._externallyLoadURL},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"gameNumber",{get:function(){return this._gameNumber},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isAuto",{get:function(){return this._isAuto},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"autoCount",{get:function(){return this._autoCount},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isSpeedUp",{get:function(){return this._isSpeedUp},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"musicVolume",{get:function(){return this._musicVolume},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"effectVolume",{get:function(){return this._effectVolume},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"language",{get:function(){return this._language},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isFrameworkDebug",{get:function(){return this._isFrameworkDebug},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isEffectOnMute",{get:function(){return this._isEffectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"isMusicOnMute",{get:function(){return this._isMusicOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"backHomeURL",{get:function(){return this._backHomeURL},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"cocosDebugSetting",{get:function(){return this._cocosDebugSetting},enumerable:!1,configurable:!0}),r);function r(){this._gameNumber=null,this._externallyLoadURL="",this._isAuto=!1,this._isSpeedUp=!1,this._autoCount=e.type.AutoType.AUTO,this._musicVolume=1,this._effectVolume=1,this._isMusicOnMute=!1,this._isEffectOnMute=!1,this._language=e.type.LanguageType.CHINESE,this._backHomeURL=null,this._cocosDebugSetting=cc.debug.DebugMode.INFO,this._isFrameworkDebug=!0}e.SlotConfigManager=t}(fcc=fcc||{}),function(e){function t(e,t,r,n){this.scriptName=e,this.type=t,this.url=r,this.parameter=n}e=e.ABS||(e.ABS={}),t.head=document.getElementsByTagName("head")[0],e.ALoadScriptType=t}(fcc=fcc||{}),function(r){var o,e=(o=r.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=r.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".css"+this.parameter;r.LoadResManager.instance.scriptRes.has(t)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.rel="stylesheet",this.linkElem.type=this.type,this.linkElem.href=t,this.linkElem.onload=function(){r.LoadResManager.instance.scriptRes.add(t),r.ABS.ALoadScriptType.head.appendChild(e.linkElem),r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)}},t);function t(e,t,r,n){n=o.call(this,e,t,r,n)||this;return n.linkElem=document.createElement("link"),n}r.CSSLoad=e}(fcc=fcc||{}),function(r){var o,e=(o=r.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=r.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".js"+this.parameter;r.LoadResManager.instance.scriptRes.has(t)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.type=this.type,this.linkElem.src=t,this.linkElem.onload=function(){r.LoadResManager.instance.scriptRes.add(t),r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){r.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},r.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,r,n){n=o.call(this,e,t,r,n)||this;return n.linkElem=document.createElement("script"),n}r.ScriptLoad=e}(fcc=fcc||{}),function(n){var e;function t(e,t,r,n){this.type=t,this.url=r,this.dataName=e,this.folder=n,this.beforeProgress=0,this.assetBundle=cc.assetManager.getBundle(this.folder)}e=n.ABS||(n.ABS={}),t.prototype.loadResources=function(){this.type!==cc.SceneAsset?this.assetBundle.loadDir(this.url,this.type,this.loadResProgress.bind(this),this.loadResCallBack.bind(this)):this.assetBundle.loadScene(this.dataName,cc.SceneAsset,this.loadResProgress.bind(this),this.loadResCallBack.bind(this))},t.prototype.loadResCallBack=function(e,t){e?n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e):t instanceof cc.SceneAsset||0!=t.length||n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"無載入任何資源 "+this.url+" "),this.setResToManager(this.dataName,t)},t.prototype.loadResProgress=function(e,t){t=n.global.Util.roundDown(e/t,2);t>this.beforeProgress&&(this.updateManagerState(this.dataName,t=1<=t?.99:t,t-this.beforeProgress),this.beforeProgress=t)},t.prototype.updateProgressEnd=function(){"resources"===this.folder?(n.LoadResManager.instance.initialLoadState.set(this.dataName,1),n.LoadResManager.instance.loadMainEventCallback(this.dataName,.01,1)):(n.LoadResManager.instance.secondaryLoadState.set(this.dataName,1),n.LoadResManager.instance.loadSecondaryEventCallback(this.dataName,1))},t.prototype.updateManagerState=function(e,t,r){"resources"===this.folder?(n.LoadResManager.instance.initialLoadState.set(e,t),n.LoadResManager.instance.loadMainEventCallback(e,r,t)):(n.LoadResManager.instance.secondaryLoadState.set(e,t),n.LoadResManager.instance.loadSecondaryEventCallback(e,t))},e.ALoadType=t}(fcc=fcc||{}),function(c){var o,e=(o=c.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var r,n,o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s=a.value;o.set(s.name,s)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}c.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}c.ImgLoad=e}(fcc=fcc||{}),function(c){var o,e=(o=c.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var r,n;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value,s=a.name;c.LoadResManager.instance.musicRes.has(s)&&c.ErrorManager.instance.executeError(c.type.ErrorType.LOAD_FW,s+" 鍵值重複,請檢查該音樂資源是否已加載過"),c.LoadResManager.instance.musicRes.set(s,a)}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}c.MusicLoad=e}(fcc=fcc||{}),function(s){var o,e=(o=s.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var r,n;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value;if(s.LoadResManager.instance.prefabRes.has(a.name))return void s.ErrorManager.instance.executeError(s.type.ErrorType.LOAD_FW,a.name+" prefab名稱重複,請檢查是否有相同名稱prefab");s.LoadResManager.instance.prefabRes.set(a.name,a)}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}s.PrefabLoad=e}(fcc=fcc||{}),function(r){var o,e=(o=r.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){r.LoadResManager.instance.scriptRes.has(e)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e+" 鍵值重複,請檢查該資源是否已加載過"),r.LoadResManager.instance.sceneRes.set(e,t),this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}r.SceneLoad=e}(fcc=fcc||{}),function(d){var o,e=(o=d.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var r,n,o,i;d.LoadResManager.instance.spineRes.has(e)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,"請檢察資源是否以載入過,鍵值重複"),d.LoadResManager.instance.spineRes.set(e,t[0]);var a=e.toLowerCase().match("grid");try{for(var s=__values(t),c=s.next();!c.done;c=s.next()){var u=c.value,p=Object.keys(u.skeletonJson.animations),l=new Map;try{for(var f=(o=void 0,__values(p)),h=f.next();!h.done;h=f.next()){var y,g=h.value;!a||""===(y=g.replace(/[^0-9]/gi,""))?l.set(g,g):(l.has(y)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,g+" spine動畫取number有誤,請檢查該spine Animation是否有重複數字情況"),l.set(y,g))}}catch(e){o={error:e}}finally{try{h&&!h.done&&(i=f.return)&&i.call(f)}finally{if(o)throw o.error}}}}catch(e){r={error:e}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}d.SpineLoad=e}(fcc=fcc||{}),function(l){var o,e=(o=l.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var r,n,t=t[0].text.split(/[\s\n]/),o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s,c=a.value.split(","),u=c[0],p=c[1];""!=u&&(s=p.replace(/['"]/g,""),o.set(u,s))}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}l.LoadResManager.instance.readFileRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}l.TextLoad=e}(fcc=fcc||{}),function(i){var e=(t.prototype.loadBundle=function(e,t,n){var o=this;if(!this.assetBundle)return this.promise=new Promise(function(){}),new Promise(function(r){o.isLoadBundle?!o.assetBundle&&o.isLoadBundle&&o.assetMethod.push(o.checkLoadType.bind(o,e,t,n,"secondaryRes")):(o.isLoadBundle=!0,cc.assetManager.loadBundle("secondaryRes",function(e,t){e&&i.ErrorManager.instance.executeError(i.type.ErrorType.LOAD_FW,e),o.assetBundle=t,r()}))})},t.prototype.executeLoad=function(e,t,r){this.checkLoadType(e,t,r,"resources")},t.prototype.executeLoadBundle=function(t,r,n){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadBundle(t,r,n)];case 1:if(e.sent(),this.checkLoadType(t,r,n,"secondaryRes"),0!=this.assetMethod.length)for(;this.assetMethod.length;)this.assetMethod[0](),this.assetMethod.shift();return[2]}})})},t.prototype.checkLoadType=function(e,t,r,n){switch(t){case i.type.LoadType.IMG:new i.ImgLoad(e,cc.SpriteFrame,r,n).loadResources();break;case i.type.LoadType.IMG_ATLAS:new i.ImgAtlasLoad(e,cc.SpriteAtlas,r,n).loadResources();break;case i.type.LoadType.MUSIC:new i.MusicLoad(e,cc.AudioClip,r,n).loadResources();break;case i.type.LoadType.PREFAB:new i.PrefabLoad(e,cc.Prefab,r,n).loadResources();break;case i.type.LoadType.SPINE:new i.SpineLoad(e,sp.SkeletonData,r,n).loadResources();break;case i.type.LoadType.SCENE:new i.SceneLoad(e,cc.SceneAsset,null,n).loadResources();break;case i.type.LoadType.TEXT:new i.TextLoad(e,cc.TextAsset,r,n).loadResources();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"資源類型錯誤,尚無此類型載入方法")}},t.prototype.executeLoadExternalScript=function(e,t,r,n){switch(t){case i.type.LoadType.CSS:new i.CSSLoad(e,"text/css",r,n).loadScript();break;case i.type.LoadType.SCRIPT:new i.ScriptLoad(e,"text/javascript",r,n).loadScript();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"LoadType 無法偵測")}},t);function t(e,t){this.assetMethod=new Array,this.configManager=t,this.loadResManager=e}i.LoadTypeFactory=e}(fcc=fcc||{}),function(r){var e=(t.prototype.executeLoad=function(e,t,r){this.checkRepeatTheName(e),this.loadResManager.initialLoadState.set(e,null),this.factory.executeLoad(e,t,r)},t.prototype.executeLoadBundle=function(t,r,n){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t),this.loadResManager.secondaryLoadState.set(t,null),[4,this.factory.executeLoadBundle(t,r,n)];case 1:return e.sent(),[2]}})})},t.prototype.checkRepeatTheName=function(e){this.loadResManager.initialLoadState.has(e)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e+" 此(主資源)已載入過了,或名稱重複,請檢察"),this.loadResManager.secondaryLoadState.has(e)&&r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e+" 此(次資源)已載入過了,或名稱重複,請檢察")},t.prototype.executeLoadExternalScript=function(e,t,r,n){this.factory.executeLoadExternalScript(e,t,r,n)},t);function t(e,t){this.loadResManager=e,this.factory=new r.LoadTypeFactory(e,t)}r.LoadTypeHandler=e}(fcc=fcc||{}),function(n){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),n.loadMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.loadMainEventCallback=function(e,t,r){this.onlyResEventCallback(e,r),this.allProgress+=t/this.count,1<=this.allProgress&&(this.allProgress=.99),1==r&&(this.allProgressEndCount+=1,this.allProgressEndCount==this.count&&(this.allProgress=1)),this.callFun.has(null)&&(n.global.Util.roundDown(this.beforeProgress,2)==n.global.Util.roundDown(this.allProgress,2)||(this.beforeProgress=this.allProgress,this.callFun.get(null)(n.global.Util.roundDown(this.allProgress,2)),1<=this.allProgress&&(this.count=0,this.callFun.delete(null))))},t.prototype.loadSecondaryEventCallback=function(e,t){this.onlyResEventCallback(e,t)},t.prototype.loadScriptEventCallback=function(e,t){this.onlyResEventCallback(e,1,t)},t.prototype.onlyResEventCallback=function(e,t,r){var n;this.callFun.has(e)&&(n=this.callFun.get(e),1==t&&this.callFun.delete(e),r?n(t,r):n(t))},t.prototype.loadAsset=function(e,t,r,n){return this.count+=1,n&&(r=r+"/"+this.configManager.language),this.loadTypeHandler.executeLoad(e,t,r),this},t.prototype.loadBundle=function(e,t,r,n){return n&&(r=r+"/"+this.configManager.language),this.loadTypeHandler.executeLoadBundle(e,t,r).then(),this},t.prototype.callback=function(e,t){if(t){if(!this.callFun.has(t))return this.callFun.set(t,e),this;n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"如果拿取該資源進度,請勿重複callback")}else this.callFun.has(null)?n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"如果拿取總進度,請勿在之前資源尚未加載完前,重複callback"):this.callFun.set(null,e)},t.prototype.getLoadState=function(e,t){return 1==this._initialLoadState.get(e)},t.prototype.loadExternalScript=function(e,t,r,n){return this.loadTypeHandler.executeLoadExternalScript(e,t,r,n=void 0===n?"":n),this},t.prototype.remove=function(e){switch(e){case n.type.LoadType.SPINE:this.spineRes.clear();break;case n.type.LoadType.MUSIC:this.musicRes.clear();break;case n.type.LoadType.PREFAB:this.prefabRes.clear();break;case n.type.LoadType.SCENE:this.sceneRes.clear();break;case n.type.LoadType.TEXT:this.readFileRes.clear()}},Object.defineProperty(t.prototype,"initialLoadState",{get:function(){return this._initialLoadState},set:function(e){this._initialLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"secondaryLoadState",{get:function(){return this._secondaryLoadState},set:function(e){this._secondaryLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"imgRes",{get:function(){return this._imgRes},set:function(e){this._imgRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spineRes",{get:function(){return this._spineRes},set:function(e){this._spineRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"readFileRes",{get:function(){return this._readFileRes},set:function(e){this._readFileRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"prefabRes",{get:function(){return this._prefabRes},set:function(e){this._prefabRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicRes",{get:function(){return this._musicRes},set:function(e){this._musicRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptRes",{get:function(){return this._scriptRes},set:function(e){this._scriptRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sceneRes",{get:function(){return this._sceneRes},set:function(e){this._sceneRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptLoadState",{get:function(){return this._scriptLoadState},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.loadTypeHandler=new n.LoadTypeHandler(this,e),this._initialLoadState=new Map,this._secondaryLoadState=new Map,this._scriptLoadState=new Map,this._imgRes=new Map,this._spineRes=new Map,this._readFileRes=new Map,this._prefabRes=new Map,this.callFun=new Map,this._musicRes=new Map,this._scriptRes=new Set,this._sceneRes=new Map,this.count=0,this.allProgress=0,this.beforeProgress=0,this.allProgressEndCount=0}n.LoadResManager=e}(fcc=fcc||{}),function(o){var i;(e=i=i||{})[e.STOP=-1]="STOP",e[e.PLAYING=1]="PLAYING",e[e.PAUSE=2]="PAUSE";var e=(t.prototype.play=function(e,t){var r=t.get("volume"),n=t.get("loop"),t=cc.audioEngine.getState(this.musicID);o.LoadResManager.instance.musicRes.has(e)?t!=i.PAUSE?(t==i.PLAYING&&this.stop(),t=o.LoadResManager.instance.musicRes.get(e),n=cc.audioEngine.playMusic(t,n),cc.audioEngine.setVolume(n,r),this.musicID=n):cc.audioEngine.resume(this.musicID):o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(){cc.audioEngine.setVolume(this.musicID,0),cc.audioEngine.stop(this.musicID)},t.prototype.pause=function(){cc.audioEngine.getState(this.musicID)==cc.audioEngine.AudioState.PLAYING&&cc.audioEngine.pause(this.musicID)},t);function t(){this.musicID=null}o.MusicController=e}(fcc=fcc||{}),function(a){var e=(t.prototype.play=function(e,t){var r=t.get("volume"),n=t.get("canSuperimpose"),o=t.get("loop"),i=this.effectID.get(e),t=cc.audioEngine.getState(i)!=cc.audioEngine.AudioState.ERROR;a.LoadResManager.instance.musicRes.has(e)?n===a.type.AudioStateType.NOT_PLAYING&&t||(n===a.type.AudioStateType.CLEAR_TO_REPLAY&&t&&cc.audioEngine.stop(i),i=a.LoadResManager.instance.musicRes.get(e),o=cc.audioEngine.playEffect(i,o),cc.audioEngine.setVolume(o,r),this.effectID.set(e,o)):a.ErrorManager.instance.executeError(a.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(e){this.effectID.has(e)&&(cc.audioEngine.stop(this.effectID.get(e)),this.effectID.delete(e))},t.prototype.stopAll=function(){var t,e;try{for(var r=__values(this.effectID.keys()),n=r.next();!n.done;n=r.next()){var o=n.value;cc.audioEngine.stop(this.effectID.get(o))}}catch(e){t={error:e}}finally{try{n&&!n.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}this.effectID.clear()},t);function t(){this.effectID=new Map}a.EffectController=e}(fcc=fcc||{}),function(i){var e=(t.prototype.initializeData=function(){this.musicNormalData=new Map,this.effectNormalData=new Map,this.musicNormalData.set("volume",this.musicVolume),this.musicNormalData.set("loop",this.loop),this.effectNormalData.set("canSuperimpose",i.type.AudioStateType.NOT_PLAYING),this.effectNormalData.set("volume",this.effectVolume),this.effectNormalData.set("loop",this.loop)},t.prototype.settingMusic=function(e,t,r){void 0===t&&(t=this.musicVolume),void 0===r&&(r=this.loop);var n=new Map;n.set("volume",t),n.set("loop",r),this.musicData.set(e,n)},t.prototype.settingEffect=function(e,t,r,n){void 0===t&&(t=i.type.AudioStateType.NOT_PLAYING),void 0===r&&(r=this.musicVolume),void 0===n&&(n=this.loop);var o=new Map;o.set("canSuperimpose",t),o.set("volume",r),o.set("loop",n),this.effectData.set(e,o)},t.prototype.musicPlay=function(e){e.trim()&&(this.audioManager.musicOnMute||(this.musicData.has(e)?this.musicController.play(e,this.musicData.get(e)):(this.musicData.set(e,this.musicNormalData),this.musicController.play(e,this.musicNormalData))))},t.prototype.effectPlay=function(e){e.trim()&&(this.audioManager.effectOnMute||(this.effectData.has(e)?this.effectController.play(e,this.effectData.get(e)):(this.effectData.set(e,this.effectNormalData),this.effectController.play(e,this.effectNormalData))))},t.prototype.musicStop=function(){this.musicController.stop()},t.prototype.musicPause=function(){this.musicController.pause()},t.prototype.effectStop=function(e){this.effectController.stop(e)},t.prototype.effectStopAll=function(){this.effectController.stopAll()},t.prototype.getMusicState=function(e){return this.musicData.get(e)},t.prototype.getEffectState=function(e){return this.effectData.get(e)},t);function t(e,t){this.audioManager=e,this.configManager=t,this.musicVolume=this.configManager.musicVolume,this.effectVolume=this.configManager.effectVolume,this.canSuperimpose=!1,this.musicOnMute=this.configManager.isMusicOnMute,this.effectOnMute=this.configManager.isEffectOnMute,this.loop=!1,this.musicData=new Map,this.effectData=new Map,this.musicController=new i.MusicController,this.effectController=new i.EffectController,this.initializeData()}i.AudioFactory=e}(fcc=fcc||{}),function(o){var i=(t.setInstance=function(e){this._instance||(this._instance=new t(e),o.audioMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.settingMusic=function(e,t,r){return this.factory.settingMusic(e,t,r),this},t.prototype.settingEffect=function(e,t,r,n){return t===o.type.AudioStateType.SUPERIMPOSE&&n&&o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 使用疊加效果時不建議使用循環撥放"),this.factory.settingEffect(e,t,r,n),this},t.prototype.musicPlay=function(e){this.factory.musicPlay(e)},t.prototype.effectPlay=function(e){this.factory.effectPlay(e)},t.prototype.musicStop=function(){this.factory.musicStop()},t.prototype.musicPause=function(){this.factory.musicPause()},t.prototype.effectStop=function(e){this.factory.effectStop(e)},t.prototype.effectStopAll=function(){this.factory.effectStopAll()},t.prototype.getMusicState=function(e){return this.factory.getMusicState(e)},t.prototype.getEffectState=function(e){return this.factory.getEffectState(e)},t.prototype.updateEffectOnMute=function(){return this._effectOnMute=!this._effectOnMute,this._effectOnMute&&this.factory.effectStopAll(),this._effectOnMute},t.prototype.updateMusicOnMute=function(){return this._musicOnMute=!this._musicOnMute,this._musicOnMute&&this.musicPause(),this._musicOnMute},Object.defineProperty(t.prototype,"effectOnMute",{get:function(){return this._effectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicOnMute",{get:function(){return this._musicOnMute},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.factory=new o.AudioFactory(this,e),this._effectOnMute=this.configManager.isEffectOnMute,this._musicOnMute=this.configManager.isMusicOnMute}o.AudioManager=i,o.Music=function(o){return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicPlay(o),n.call.apply(n,__spreadArray([this],__read(e)))}}},o.MusicStop=function(){return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicStop(),n.call.apply(n,__spreadArray([this],__read(e)))}}},o.Effect=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectPlay(e)}),n.call.apply(n,__spreadArray([this],__read(e)))}}},o.EffectStop=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,r){r.enumerable=!0;var n=r.value;r.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectStop(e)}),n.call.apply(n,__spreadArray([this],__read(e)))}}}}(fcc=fcc||{}),function(p){var e={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},t={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},r={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},n={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},o={fontSize:30,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},i={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},a={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},s=(c.setInstance=function(e){this._instance||(this._instance=new c(e),p.languageMgr=this._instance)},Object.defineProperty(c,"instance",{get:function(){if(this._instance)return this._instance;p.ErrorManager.instance.executeError(p.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),c.prototype.initDefaultStyle=function(){this._style.set(p.type.LanguageType.TAIWAN,t),this._style.set(p.type.LanguageType.CHINESE,e),this._style.set(p.type.LanguageType.AMERICA,r),this._style.set(p.type.LanguageType.INDONESIA,i),this._style.set(p.type.LanguageType.THAILAND,o),this._style.set(p.type.LanguageType.MALAYSIA,a),this._style.set(p.type.LanguageType.VIETNAM,n)},c.prototype.addStyle=function(e,t){this._style.set(e,t)},c.prototype.updateLanguage=function(e){var t,r,n,o;if(this._nowLang!=e){this._nowLang=e;try{for(var i=__values(this.allLanguageLabel),a=i.next();!a.done;a=i.next()){var s=a.value;try{for(var c=(n=void 0,__values(s.keys())),u=c.next();!u.done;u=c.next()){var p=u.value,l=s.get(p);this.updateText(p,l)}}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=c.return)&&o.call(c)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}this.updateStyle(!1)}},c.prototype.setLanguage=function(){this.languageCache||this.reTakeLanguageBuffer()},c.prototype.getLanguage=function(){return this._nowLang},c.prototype.getText=function(e){return this.languageCache[e]},c.prototype.getAllText=function(){return this.languageCache},c.prototype.reTakeLanguageBuffer=function(e){try{this.languageCache=e?window.language_Mode[e]:window.language_Mode[this._nowLang]}catch(e){console.log("window.language_Mode 查找不到該語系",e)}},c.prototype.removeStringBuffer=function(){},c.prototype.updateText=function(e,t){return t&&(e.string=this.getText(t)),this._nowLanguageLabels.set(e,t),this},c.prototype.updateStyle=function(e){var t,r,n=this._nowLang;this._style.has(this._nowLang)||(n=p.type.LanguageType.AMERICA);var o=this._style.get(n).fontFamily,i=this._style.get(n).fontSize,a=this._style.get(n).lineHeight;try{for(var s=__values(this._nowLanguageLabels.keys()),c=s.next();!c.done;c=s.next()){var u=c.value;u.fontFamily=o,u.fontSize=i,u.lineHeight=a}}catch(e){t={error:e}}finally{try{c&&!c.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}e&&this.allLanguageLabel.push(this._nowLanguageLabels),this._nowLanguageLabels.clear()},c);function c(e){this.configManager=e,this._style=new Map,this.allLanguageLabel=new Array,this._nowLanguageLabels=new Map,this.initDefaultStyle(),this._nowLang=this.configManager.language}p.LanguageManager=s}(fcc=fcc||{}),function(t){var e=(r.instance=function(){return this._instance||(this._instance=new r),this._instance},r.prototype.setNotification=function(e){return this.notificationToMap.has(e.TAG_NAME)||this.notificationToMap.set(e.TAG_NAME,e),this},r.prototype.getNotification=function(e){if(this.notificationToMap.has(e))return this.notificationToMap.get(e);t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,e+" :  該key尚未加入推撥事件中,你需先執行 setNotification(type:IBaseNotification)方法")},r.prototype.hasNotification=function(e){return this.notificationToMap.has(e)},r.prototype.getAllNotifications=function(){return this.notificationToMap},r);function r(){this.notificationToMap=new Map}t.NotificationManager=e}(fcc=fcc||{});var fcc,FCC_VERSION=.04;!function(e){e.configMgr=e.SlotConfigManager.instance,e.networkMgr=function(){return null},e.notificationMgr=function(){return e.NotificationManager.instance()}}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.addButtonEvent=function(e,t,r,n){var o=r.node,i=cc.js.getClassName(r),r=new cc.Component.EventHandler;r.target=o,r.component=i,r.handler=t,!n&&0!=n||(r.customEventData=n),e.clickEvents.push(r)},t.disableButton=function(e){e.interactable=!1},t.enableButton=function(e){e.interactable=!0},t.addTouchStartEvent=function(e,t,r,n){e.on(cc.Node.EventType.TOUCH_START,t,r,n)},t.offTouchStartEvent=function(e,t,r,n){e.off(cc.Node.EventType.TOUCH_START,t,r,n)},e.Button=t}(fcc=(globalThis.fcc=fcc)||{}),function(e){function t(){}e=e.global||(e.global={}),t.getNodeOneChildren=function(e){for(var t=new Map,r=0;r<e.childrenCount;r++)for(var n=e.children[r],o=0;o<=n.childrenCount;o++)t.set(e.children[r].name,n);return t},t.getNodeTowChildren=function(e){for(var t=new Map,r=0;r<e.childrenCount;r++)for(var n=e.children[r],o=n.children[r].name,i=0;i<=n.childrenCount;i++)0==i?t.set(n.children[r].name,n):(o+="/"+n.children[i-1].name,t.set(o,n.children[i-1]),o=n.children[r].name);return t},e.Prefab=t}(fcc=fcc||{}),function(e){function t(e,t){this._isPermanent=!1,this._self=t,this._callFun=e}e=e.ABS||(e.ABS={}),t.prototype.pushNotification=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];(e=this._callFun).call.apply(e,__spreadArray([this._self],__read(t)))},Object.defineProperty(t.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),e.ABaseObserver=t}(fcc=fcc||{}),(fcc||(fcc={})).SmartFoxLink=function(){},function(e){var t;t=e.type||(e.type={}),(e=t.GameStateType||(t.GameStateType={})).STANDBY="STANDBY",e.PLAYING="PLAYING",e.FREEING="FREEING",(t=t.ProcessType||(t.ProcessType={})).FREE="FREE",t.NORMAL="NORMAL"}(fcc=fcc||{}),function(i){var e=(t.prototype.initProcess=function(e){var t,r;if(e)this.processToMap.has(e)?this.processToMap.get(e).executionContent.onCreate():i.ErrorManager.instance.executeError(i.type.ErrorType.PROCESS_FW,"查找不到該流程,請確認是否已綁定進框架中");else{e=this.processToMap.values();try{for(var n=__values(e),o=n.next();!o.done;o=n.next())o.value.executionContent.onCreate()}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}}},t.prototype.setProcess=function(e,t){this.processToMap.set(e,t)},t.prototype.getProcess=function(e){return this.processToMap.get(e)},t.prototype.getAllProcess=function(){return this.processToMap},t.prototype.changeProcess=function(e){this.processToMap.has(e)?this.process=this.processToMap.get(e):i.ErrorManager.instance.executeError(i.type.ErrorType.PROCESS_FW,e+" 搜尋不到此流程,請檢查流程是否添加")},t.prototype.useProcess=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.process.start()];case 1:return e.sent(),[2]}})})},t);function t(e){this.gameManager=e,this.processToMap=new Map}i.GameProcessFactory=e}(fcc=fcc||{}),function(e){((e=e.type||(e.type={})).GameEventType||(e.GameEventType={})).TEST="TEST"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).ServerEventType||(e.ServerEventType={})).BET_RESULT="BET_RESULT",e.FREE_SPIN_RESULT="FREE_SPIN_RESULT",e.CAN_PLAY_GAME="CAN_PLAY_GAME",e.GET_GAME_HISTORY_RESULT="GET_GAME_HISTORY_RESULT",e.GET_HISTORY_DETAIL_RESULT="GET_HISTORY_DETAIL_RESULT",e.GROUP_ID="GROUP_ID",e.TABLE_INFO="TABLE_INFO",e.WARNING="WARNING"}(fcc=fcc||{}),function(p){var o,e=(o=p.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var r,n,o=new Map;try{for(var i=__values(t[0].getSpriteFrames()),a=i.next();!a.done;a=i.next()){var s,c,u=a.value;-1!=e.toLowerCase().indexOf("grid")?(s=u.name.replace(/[^0-9]/gi,""),o.set(s,u)):(c=u.name,o.set(c,u))}}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}p.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,r,n){return o.call(this,e,t,r,n)||this}p.ImgAtlasLoad=e}(fcc=fcc||{}),function(e){var t=(r.prototype.onExecution=function(){return this._process.add(this._executionContent.onExecution),this},r.prototype.onEnd=function(){return this._process.add(this._executionContent.onEnd),this},r.prototype.onChangeStatus=function(){return this._process.add(this._executionContent.onChangeStatus),this},r.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var t,r,n,o;return __generator(this,function(e){switch(e.label){case 0:e.trys.push([0,5,6,7]),t=__values(this._process),r=t.next(),e.label=1;case 1:return r.done?[3,4]:[4,r.value.apply(this._executionContent)];case 2:e.sent(),e.label=3;case 3:return r=t.next(),[3,1];case 4:return[3,7];case 5:return n=e.sent(),n={error:n},[3,7];case 6:try{r&&!r.done&&(o=t.return)&&o.call(t)}finally{if(n)throw n.error}return[7];case 7:return[2]}})})},Object.defineProperty(r.prototype,"process",{get:function(){return this._process},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"executionContent",{get:function(){return this._executionContent},enumerable:!1,configurable:!0}),r);function r(e){this._executionContent=e,this._process=new Set}e.GameProcess=t}(fcc=fcc||{}),function(e){var t=(r.prototype.onCustomizeStart=function(){return this._process.add(this._executionContainer.onCustomizeStart),this},r.prototype.onSineInGrid=function(){return this._process.add(this._executionContainer.onSineInGrid),this},r.prototype.onRunning=function(){return this._process.add(this._executionContainer.onRunning),this},r.prototype.onCustomizeEnd=function(){return this._process.add(this._executionContainer.onCustomizeEnd),this},r.prototype.onShowAnswer=function(){return this._process.add(this._executionContainer.onShowAnswer),this},r.prototype.onChangeStatus=function(){return this._process.add(this._executionContainer.onChangeStatus),this},r.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var t,r,n,o;return __generator(this,function(e){switch(e.label){case 0:e.trys.push([0,5,6,7]),t=__values(this._process),r=t.next(),e.label=1;case 1:return r.done?[3,4]:[4,r.value.apply(this._executionContainer)];case 2:e.sent(),e.label=3;case 3:return r=t.next(),[3,1];case 4:return[3,7];case 5:return n=e.sent(),n={error:n},[3,7];case 6:try{r&&!r.done&&(o=t.return)&&o.call(t)}finally{if(n)throw n.error}return[7];case 7:return[2]}})})},Object.defineProperty(r.prototype,"executionContent",{get:function(){return this._executionContainer},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"process",{get:function(){return this._process},enumerable:!1,configurable:!0}),r);function r(e){this._executionContainer=e,this._process=new Set}e.SlotGameProcess=t}(fcc=fcc||{}),function(e){function t(e){this._slotStyleManager=e}e=e.ABS||(e.ABS={}),t.prototype.setLookAtCount=function(e){return this._lookAtCount=e,this},t.prototype.setSlotTurnCount=function(e){return this._slotTurnCount=e,this},t.prototype.setSlotGridHeight=function(e){return this._slotGridHeight=e,this},t.prototype.setSlotGirdSpeed=function(e){return this._slotGirdSpeed=e,this},t.prototype.setSpeedUpMultiple=function(e){return this._speedUpMultiple=e,this},t.prototype.setSlotRowGridCount=function(e){return this._slotRowGridCount=e,this},t.prototype.setColumnIntervalTime=function(e){return this._columnIntervalTime=e,this},t.prototype.setSlotColumnToTween=function(e){return this._slotColumnToTween=e,this},t.prototype.setGridNodeToMap=function(e){return this._gridNodeToMap=e,this},t.prototype.setNormalResult=function(e){return this._normalResult=e,this},t.prototype.setFreeResult=function(e){return this._freeResult=e,this},t.prototype.complete=function(){this._slotStyleManager.build(this)},Object.defineProperty(t.prototype,"columnIntervalTime",{get:function(){return this._columnIntervalTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gridNodeToMap",{get:function(){return this._gridNodeToMap},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotColumnToTween",{get:function(){return this._slotColumnToTween},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGirdSpeed",{get:function(){return this._slotGirdSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGridHeight",{get:function(){return this._slotGridHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowGridCount",{get:function(){return this._slotRowGridCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotTurnCount",{get:function(){return this._slotTurnCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"speedUpMultiple",{get:function(){return this._speedUpMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyleManager",{get:function(){return this._slotStyleManager},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"freeResult",{get:function(){return this._freeResult},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"normalResult",{get:function(){return this._normalResult},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtCount",{get:function(){return this._lookAtCount},enumerable:!1,configurable:!0}),e.ASlotSetting=t}(fcc=fcc||{}),function(e){var t,r=(t=e.ABS.ASlotSetting,__extends(n,t),n.prototype.setGridImg=function(e){return this._gridImg=e,this},n.prototype.setGirdSpriteToMap=function(e){return this._gridSpriteToMap=e,this},Object.defineProperty(n.prototype,"gridSpriteToMap",{get:function(){return this._gridSpriteToMap},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"gridImg",{get:function(){return this._gridImg},enumerable:!1,configurable:!0}),n);function n(){return null!==t&&t.apply(this,arguments)||this}e.SlotImgSetting=r}(fcc=fcc||{}),function(e){var t,r=(t=e.SlotImgSetting,__extends(n,t),n.prototype.setGridBurredImg=function(e){return this._gridBurredImg=e,this},Object.defineProperty(n.prototype,"gridBurredImg",{get:function(){return this._gridBurredImg},enumerable:!1,configurable:!0}),n);function n(){return null!==t&&t.apply(this,arguments)||this}e.SlotBurredImgSetting=r}(fcc=fcc||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_29a51786.js","/")
},{"2ionoC":5,"buffer":3}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\base64-js\\lib\\b64.js","/..\\node_modules\\gulp-browserify\\node_modules\\base64-js\\lib")
},{"2ionoC":5,"buffer":3}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\buffer\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\buffer")
},{"2ionoC":5,"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\ieee754\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\ieee754")
},{"2ionoC":5,"buffer":3}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\process\\browser.js","/..\\node_modules\\gulp-browserify\\node_modules\\process")
},{"2ionoC":5,"buffer":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
