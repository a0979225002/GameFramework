(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 各種錯誤類型
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var ErrorType;
        (function (ErrorType) {
            ErrorType["TYPE_FW"] = "\u50B3\u5165\u7684Type \u932F\u8AA4 ,\u8ACB\u6AA2\u5BDF\u8A72Type\u662F\u5426\u975EFarmWork\u5167\u7684Type";
            ErrorType["IS_RUNNING_FW"] = "\u904A\u6232\u6B63\u5728\u57F7\u884C\u4E2D,\u8ACB\u52FF\u91CD\u8907\u547C\u53EB";
            ErrorType["UNDEFINED_FW"] = "\u8B8A\u6578\u70BAundefined,\u6D41\u7A0B\u7121\u6CD5\u7E7C\u7E8C";
            ErrorType["LOAD_FW"] = "\u52A0\u8F09\u7684\u8CC7\u6E90\u6709\u554F\u984C";
            ErrorType["ANIMATION_FW"] = "Animation \u985E\u4E2D\u65B9\u6CD5\u6709\u932F\u8AA4 : ";
            ErrorType["WEB_REQUEST_FW"] = "WebRequest \u985E\u6709\u932F\u8AA4 : ";
            ErrorType["WEB_RESPONSE_FW"] = "WebResponse \u985E\u6709\u932F\u8AA4 : ";
            ErrorType["PREFAB_FW"] = "Prefab \u985E\u6709\u932F\u8AA4 :";
            ErrorType["AUDIO_FW"] = "AUDIO \u985E\u6709\u932F\u8AA4 :";
            ErrorType["SCENE_FW"] = "Scene \u985E\u6709\u932F\u8AA4 :";
            ErrorType["PROCESS_FW"] = "process \u985E\u6709\u932F\u8AA4 :";
            ErrorType["LISTENER_FW"] = "Event \u985E\u6709\u932F\u8AA4 :";
            ErrorType["SlotStyleFW"] = "SlotStyleFW\u985E\u6709\u932F\u8AA4 : ";
        })(ErrorType = type.ErrorType || (type.ErrorType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="../Enum/ErrorType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 無從判斷該錯誤類型
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var UnknownError = /** @class */ (function () {
        function UnknownError(configManager) {
            this.configManager = configManager;
        }
        UnknownError.prototype.checkErrorType = function (message, obj) {
            throw new Error("\u4F8B\u5916\u932F\u8AA4 : " + message);
        };
        return UnknownError;
    }());
    fcc.UnknownError = UnknownError;
})(fcc || (fcc = {}));
/// <reference path="../Enum/ErrorType.ts" />
/// <reference path="./UnknownError.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 檢測該錯誤是否為框架錯誤
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var FrameWorkError = /** @class */ (function () {
        function FrameWorkError(configManager) {
            this.unknownError = new fcc.UnknownError(configManager);
            this.configManager = configManager;
        }
        FrameWorkError.prototype.checkErrorType = function (message, obj) {
            if (this.configManager.isFrameworkDebug) {
                switch (message) {
                    case fcc.type.ErrorType.IS_RUNNING_FW:
                        throw new Error(fcc.type.ErrorType.IS_RUNNING_FW + " " + obj);
                    case fcc.type.ErrorType.UNDEFINED_FW:
                        throw new Error(fcc.type.ErrorType.UNDEFINED_FW + " " + obj);
                    case fcc.type.ErrorType.TYPE_FW:
                        throw new Error(fcc.type.ErrorType.TYPE_FW + " " + obj);
                    case fcc.type.ErrorType.ANIMATION_FW:
                        throw new Error(fcc.type.ErrorType.ANIMATION_FW + " " + obj);
                    case fcc.type.ErrorType.LOAD_FW:
                        throw new Error(fcc.type.ErrorType.LOAD_FW + " " + obj);
                    case fcc.type.ErrorType.WEB_REQUEST_FW:
                        throw new Error(fcc.type.ErrorType.WEB_REQUEST_FW + " " + obj);
                    case fcc.type.ErrorType.PREFAB_FW:
                        throw new Error(fcc.type.ErrorType.PREFAB_FW + " " + obj);
                    case fcc.type.ErrorType.AUDIO_FW:
                        throw new Error(fcc.type.ErrorType.AUDIO_FW + " " + obj);
                    case fcc.type.ErrorType.WEB_RESPONSE_FW:
                        throw new Error(fcc.type.ErrorType.WEB_RESPONSE_FW + " " + obj);
                    case fcc.type.ErrorType.SCENE_FW:
                        throw new Error(fcc.type.ErrorType.SCENE_FW + " " + obj);
                    case fcc.type.ErrorType.PROCESS_FW:
                        throw new Error(fcc.type.ErrorType.PROCESS_FW + " " + obj);
                    case fcc.type.ErrorType.LISTENER_FW:
                        throw new Error(fcc.type.ErrorType.LISTENER_FW + " " + obj);
                    case fcc.type.ErrorType.SlotStyleFW:
                        throw new Error(fcc.type.ErrorType.SlotStyleFW + " " + obj);
                    default:
                        this.unknownError.checkErrorType(message);
                }
            }
            else {
                console.log("有例外錯誤,但你未開啟框架Debug,無法查看");
            }
        };
        return FrameWorkError;
    }());
    fcc.FrameWorkError = FrameWorkError;
})(fcc || (fcc = {}));
/// <reference path="../Enum/ErrorType.ts" />
/// <reference path="./FrameWorkError.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 檢測該錯誤是否為物件錯誤
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var ObjectError = /** @class */ (function () {
        function ObjectError(configManager) {
            this.frameWorkError = new fcc.FrameWorkError(configManager);
        }
        ObjectError.prototype.checkErrorType = function (message, obj) {
            if (typeof message === "string") {
                this.frameWorkError.checkErrorType(message, obj);
            }
            else if (message === null) {
                return this.checkObjectType(obj);
            }
        };
        ObjectError.prototype.checkObjectType = function (obj) {
            if (obj && obj != 0) {
                return typeof obj;
            }
            else {
                throw new Error("\u8A72\u7269\u4EF6\u70BAnull");
            }
        };
        return ObjectError;
    }());
    fcc.ObjectError = ObjectError;
})(fcc || (fcc = {}));
/// <reference path="../Enum/ErrorType.ts" />
/// <reference path="../ErrorManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 顯示server回傳的錯誤
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var ServerError = /** @class */ (function () {
        function ServerError(errorManager) {
            this.timeOut = null;
            this.errorManager = errorManager;
        }
        /**
         *  顯示server回傳的錯誤事件
         * @param {boolean} permanentState - 是否持續顯示
         * @param {string} message - 顯示錯誤訊息文字
         * @param {string} buttonText - 按鈕文字
         */
        ServerError.prototype.showError = function (permanentState, message, buttonText) {
            var _this = this;
            if (this.timeOut != null)
                clearTimeout(this.timeOut);
            //確認當前有無該物件,如無該物件,將會throw中斷
            if (!this.errorManager.errorNode)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorNode為空");
            if (!this.errorManager.errorLabel)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorLabel為空");
            if (!this.errorManager.errorButton)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorButton為空");
            fcc.ErrorManager.errorState = true;
            this.errorManager.errorNode.active = true;
            this.errorManager.errorLabel.string = message;
            this.errorManager.errorButton.active = this.errorManager.isShowBackHomeButton;
            if (this.errorManager.errorButton.active) {
                this.errorManager.errorButtonLabel.string = buttonText;
            }
            if (!permanentState) {
                this.timeOut = window.setTimeout(function () {
                    fcc.ErrorManager.errorState = false;
                    _this.errorManager.errorNode.active = false;
                    _this.errorManager.errorButton.active = false;
                    _this.timeOut = null;
                }, this.errorManager.errorDelayTime);
            }
        };
        return ServerError;
    }());
    fcc.ServerError = ServerError;
})(fcc || (fcc = {}));
/// <reference path="../Enum/ErrorType.ts" />
/// <reference path="../ErrorManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 顯示警告錯誤
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var WarningError = /** @class */ (function () {
        function WarningError(errorManager) {
            this.timeout = null;
            this.errorManager = errorManager;
        }
        /**
         * 顯示警告 Dialog
         * @param {boolean} permanentState - 是否持續顯示
         * @param {string} message - 顯示錯誤訊息文字
         * @param {string} buttonText - 按鈕文字
         */
        WarningError.prototype.showError = function (permanentState, message, buttonText) {
            var _this = this;
            if (this.timeout != null)
                clearTimeout(this.timeout);
            //確認當前有無該物件,如無該物件,將會throw中斷
            if (!this.errorManager.warningNode)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager warningNode為空");
            if (!this.errorManager.warningLabel)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager warningLabel為空");
            if (this.errorManager.warningDelayTime == 0) {
                this.errorManager.executeError("\u7576\u524DDelayTime = 0 : \u8ACB\u7D66\u4E88\u503C");
            }
            fcc.ErrorManager.warningState = true;
            this.errorManager.warningNode.active = true;
            this.errorManager.warningLabel.string = message;
            if (permanentState)
                return;
            this.timeout = window.setTimeout(function () {
                fcc.ErrorManager.warningState = false;
                _this.errorManager.warningNode.active = false;
            }, this.errorManager.warningDelayTime);
        };
        /**
         * XXX :
         * 當前暫時無使用,一樣保留
         * 顯示金額不足無法下注
         * @param obj 顯示在label的文字
         */
        WarningError.prototype.showErrorBet = function (obj) {
            var _this = this;
            //確認當前有無該物件,如無該物件,將會throw中斷
            if (!this.errorManager.errorNode)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorNode為空");
            if (!this.errorManager.errorLabel)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorLabel為空");
            if (!this.errorManager.errorButton)
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorButton為空");
            if (this.errorManager.errorDelayTime == 0) {
                this.errorManager.executeError(fcc.type.ErrorType.UNDEFINED_FW, "ErrorManager errorDelayTime為空 無法顯示");
            }
            if (fcc.ErrorManager.errorState)
                return;
            fcc.ErrorManager.errorState = true;
            this.errorManager.errorNode.active = true;
            this.errorManager.errorLabel.string = obj;
            window.setTimeout(function () {
                fcc.ErrorManager.errorState = false;
                _this.errorManager.errorNode.active = false;
            }, this.errorManager.errorDelayTime);
        };
        return WarningError;
    }());
    fcc.WarningError = WarningError;
})(fcc || (fcc = {}));
/// <reference path="./Enum/ErrorType.ts" />
/// <reference path="./Enum/ErrorType.ts" />
/// <reference path="./ErrorType/ObjectError.ts" />
/// <reference path="./ErrorType/ServerError.ts" />
/// <reference path="./ErrorType/WarningError.ts" />
/// <reference path="./IErrorHandler.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description Error管理器 錯誤事件中介者
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var ErrorHandler = /** @class */ (function () {
        function ErrorHandler(configManager, errorManager) {
            this.objectError = new fcc.ObjectError(configManager);
            this.serverError = new fcc.ServerError(errorManager);
            this.warningError = new fcc.WarningError(errorManager);
        }
        /**
         * 確認錯誤類型
         * @summary - 責任鏈模式 : Overload
         * @throws (null,any) - return 該物件 or throw ("該物件為null")
         * @throws (fcc.type.ErrorType,string) - throw (`ErrorType + ${string}`)
         * @throws (string,any) - throw (`${string}`)
         * @param {string | fcc.type.ErrorType} message
         * @param obj
         */
        ErrorHandler.prototype.checkErrorType = function (message, obj) {
            return this.objectError.checkErrorType(message, obj);
        };
        /**
         * 確認server回傳錯誤類型
         * @param {boolean} permanentState - 是否持續顯示
         * @param {string} message - 顯示錯誤訊息文字
         * @param {string} buttonText - 按鈕文字
         */
        ErrorHandler.prototype.checkServerError = function (permanentState, message, buttonText) {
            this.serverError.showError(permanentState, message, buttonText);
        };
        /**
         * 確認警告類型
         * @param {boolean} permanentState - 是否持續顯示
         * @param {string} message - 顯示錯誤訊息文字
         * @param {string} buttonText - 按鈕文字
         */
        ErrorHandler.prototype.checkWarning = function (permanentState, message, buttonText) {
            this.warningError.showError(permanentState, message, buttonText);
        };
        return ErrorHandler;
    }());
    fcc.ErrorHandler = ErrorHandler;
})(fcc || (fcc = {}));
/// <reference path="./Enum/ErrorType.ts" />
/// <reference path="./Enum/ErrorType.ts" />
/// <reference path="./ErrorHandler.ts" />
/// <reference path="./IErrorHandler.ts" />
/// <reference path="./IErrorManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 錯誤管理器 : 框架錯誤管理
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var ErrorManager = /** @class */ (function () {
        function ErrorManager(configManager) {
            this.handler = new fcc.ErrorHandler(configManager, this);
            this.configManager = configManager;
            this._errorNode = null;
            this._errorLabel = null;
            this._errorDelayTime = 2000; //錯誤訊息顯示時間 : 2秒
            this._warningDelayTime = 1000; //警告訊息顯示時間 : 1秒
            ErrorManager._errorState = false; //當前是否正在顯示 Error
            ErrorManager._warningState = false; //當前是否正在顯示警告
            this._isShowBackHomeButton = !!this.configManager.backHomeURL; //檢查當前是否回首頁URL,將之賦予true:false
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案產生一次該class
         */
        ErrorManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new ErrorManager(configManager);
                fcc.errorMgr = this._instance;
            }
        };
        Object.defineProperty(ErrorManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    throw new Error("ErrorManager\u985E\u932F\u8AA4 :  \u8A72\u985E\u5C1A\u672A\u5BE6\u4F8B\u5316");
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 責任鏈模式
         * 顯示錯誤訊息,能做多個物件檢測
         * @param{string | ErrorType }message
         * @param obj
         */
        ErrorManager.prototype.executeError = function (message, obj) {
            return this.handler.checkErrorType(message, obj);
        };
        /**
         * 顯示錯誤視窗
         * @param {boolean} permanentState - 是否常駐
         * @param {string} message  - 錯誤訊息
         * @param {string} buttonText - button文字
         */
        ErrorManager.prototype.serverError = function (permanentState, message, buttonText) {
            this.handler.checkServerError(permanentState, message, buttonText);
        };
        /**
         * 顯示警告,將會調用已保存的警告Node
         * @param {boolean} permanentState - 是否常駐
         * @param {string} message  - 錯誤訊息
         * @param {string} buttonText - button文字
         */
        ErrorManager.prototype.warning = function (permanentState, message, buttonText) {
            this.handler.checkWarning(permanentState, message, buttonText);
        };
        /**
         * 添加要綁定的Error組件
         * @param node
         */
        ErrorManager.prototype.setErrorNode = function (node) {
            this._errorNode = node;
            return this;
        };
        /**
         * 添加要顯示Error訊息的Label
         * @param label
         */
        ErrorManager.prototype.setErrorLabel = function (label) {
            this._errorLabel = label;
            return this;
        };
        /**
         * 添加errorButton綁定
         * @param node
         */
        ErrorManager.prototype.setErrorButton = function (node) {
            this._errorButton = node;
            return this;
        };
        /**
         * 添加要顯示的時間,目前只對(ErrorType.bet)生效
         * @param time
         */
        ErrorManager.prototype.setErrorDelayTime = function (time) {
            this._errorDelayTime = time;
            return this;
        };
        /**
         * 添加警告要顯示的時間
         */
        ErrorManager.prototype.setWarningDelayTime = function (time) {
            this._warningDelayTime = time;
            return this;
        };
        /**
         * 添加要顯示警告的Node
         * @param node
         */
        ErrorManager.prototype.setWarningNode = function (node) {
            this._warningNode = node;
            return this;
        };
        /**
         * 添加要顯示警告的Node
         * @param label
         */
        ErrorManager.prototype.setWarningLabel = function (label) {
            this._warningLabel = label;
            return this;
        };
        /**
         * 添加要顯示錯誤視窗中按鈕的label
         * @param {cc.Label} label
         * @return {this}
         */
        ErrorManager.prototype.setErrorButtonLabel = function (label) {
            this._errorButtonLabel = label;
            return this;
        };
        Object.defineProperty(ErrorManager, "errorState", {
            get: function () {
                return this._errorState;
            },
            /**
             * 當前 error dialog 狀態
             * @param {boolean} value
             */
            set: function (value) {
                this._errorState = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager, "warningState", {
            get: function () {
                return this._warningState;
            },
            /**
             * 當前 warning dialog 狀態
             * @param {boolean} value
             */
            set: function (value) {
                this._warningState = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "errorNode", {
            get: function () {
                return this._errorNode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "warningNode", {
            get: function () {
                return this._warningNode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "errorButton", {
            get: function () {
                return this._errorButton;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "warningLabel", {
            get: function () {
                return this._warningLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "errorLabel", {
            get: function () {
                return this._errorLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "errorDelayTime", {
            get: function () {
                return this._errorDelayTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "warningDelayTime", {
            get: function () {
                return this._warningDelayTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "isShowBackHomeButton", {
            get: function () {
                return this._isShowBackHomeButton;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ErrorManager.prototype, "errorButtonLabel", {
            get: function () {
                return this._errorButtonLabel;
            },
            enumerable: false,
            configurable: true
        });
        return ErrorManager;
    }());
    fcc.ErrorManager = ErrorManager;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 動畫處理,處理後的動畫回傳給予manager保存
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var AnimationHandler = /** @class */ (function () {
        function AnimationHandler(animationManager) {
            this.animationManager = animationManager;
        }
        /**
         * 更新動畫管理器內的spineName數據
         * @param resName
         * @param keyName
         * @param spineName
         */
        AnimationHandler.prototype.updateSpineAnimationName = function (resName, keyName, spineName) {
            var spineMap = new Map();
            spineMap.set(keyName, spineName);
            this.animationManager.spineName.set(resName, spineMap);
        };
        return AnimationHandler;
    }());
    fcc.AnimationHandler = AnimationHandler;
})(fcc || (fcc = {}));
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="./AnimationHandler.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description TODO : 動畫管理器
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var AnimationManager = /** @class */ (function () {
        function AnimationManager(configManager) {
            this.configManager = configManager;
            this._spineName = new Map();
            this._handler = new fcc.AnimationHandler(this);
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案只有一次產生此class
         */
        AnimationManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new AnimationManager(configManager);
                fcc.animationMgr = this._instance;
            }
        };
        Object.defineProperty(AnimationManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.AUDIO_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        AnimationManager.prototype.getSpineName = function (resName, key) {
            if (this._spineName.has(resName)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.ANIMATION_FW, "resources 資源名錯誤");
            }
            else if (this._spineName.get(resName).has("" + key)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.ANIMATION_FW, "尚未獲取資源,請查看 AnimationManager.instance.spineName");
            }
            return this.spineName.get(resName).get("" + key);
        };
        Object.defineProperty(AnimationManager.prototype, "spineName", {
            get: function () {
                return this._spineName;
            },
            set: function (value) {
                this._spineName = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnimationManager.prototype, "handler", {
            get: function () {
                return this._handler;
            },
            enumerable: false,
            configurable: true
        });
        return AnimationManager;
    }());
    fcc.AnimationManager = AnimationManager;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 音樂撥放疊加時,各種狀態設定
         * @Date 2021-05-13 上午 10:24
         * @Version 1.0
         */
        var AudioStateType;
        (function (AudioStateType) {
            /**
             *檢測到該音樂正在撥放時,清除正在撥放的音樂,後重新播放該音樂
             * @type {AudioStateType.CLEAR_TO_REPLAY}
             */
            AudioStateType["CLEAR_TO_REPLAY"] = "CLEAR_TO_REPLAY";
            /**
             * 檢測到該音樂正在撥放時,不做任何事情
             * @type {AudioStateType.NOT_PLAYING}
             */
            AudioStateType["NOT_PLAYING"] = "NOT_PLAYING";
            /**
             * 檢測到該音樂正在撥放時,將可疊加撥放
             * @type {AudioStateType.SUPERIMPOSE}
             */
            AudioStateType["SUPERIMPOSE"] = "SUPERIMPOSE";
        })(AudioStateType = type.AudioStateType || (type.AudioStateType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="../Enum/AudioStateType.ts" />
/// <reference path="../Enum/AudioStateType.ts" />
var fcc;
(function (fcc) {
    var global;
    (function (global) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 共用:操作數字{number}類方法
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var Util = /** @class */ (function () {
            function Util() {
            }
            /**
             * 四捨五入到小數點第N位
             * @param {number} float - 浮點數
             * @param {number} number - 要四捨五入到哪一位
             * @return {number}
             */
            Util.roundOff = function (float, number) {
                return Math.round(Math.round(float * Math.pow(10, (number || 0) + 1)) / 10) / Math.pow(10, (number || 0));
            };
            /**
             * 無條件捨去到小數點第N位
             * @param {number} float - 浮點數
             * @param {number} number - 要無條件捨去到哪一位
             * @return {number}
             */
            Util.roundDown = function (float, number) {
                return Math.floor(Math.floor(float * Math.pow(10, (number || 0) + 1)) / 10) / Math.pow(10, (number || 0));
            };
            /**
             * 無條件進位到小數點第N位
             * @param {number} float - 浮點數
             * @param {number} number - 要無條件進位到哪一位
             * @return {number}
             */
            Util.roundUp = function (float, number) {
                return Math.ceil(Math.ceil(float * Math.pow(10, (number || 0) + 1)) / 10) / Math.pow(10, (number || 0));
            };
            /**
             * 檢查該數字為小數有幾位
             * @example input(1.03) -> output(2)
             * @param {number}float - 浮點數
             * @return {number}
             */
            Util.decimalsCount = function (float) {
                var decimalsIndex = String(float).indexOf('.') + 1;
                var count = String(float).length - decimalsIndex;
                if (decimalsIndex == 0) {
                    return 0;
                }
                else {
                    return count;
                }
            };
            /**
             * 將該數字轉字串並判斷是否能使用(K)單位取代零
             * @example input(1000) -> output(1K)
             * @param {number} number 需要格式化的數字
             * @return {string} - 格式化後的字串數字
             */
            Util.numberFormat = function (number) {
                if (number < 1000) {
                    return number + "";
                }
                if (number > 1000) {
                    return number / 1000 + "K";
                }
            };
            /**
             * 將該數字格式化,每三個0前方給予','標記
             * @example input(1000000) -> output(1,000,000)
             * @param {number} number - 需要格式化的數字
             * @return {string} - 格式化後的字串數字
             */
            Util.format = function (number) {
                return this.formatting.format(number);
            };
            Util.formatting = new Intl.NumberFormat();
            return Util;
        }());
        global.Util = Util;
    })(global = fcc.global || (fcc.global = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 各種類型資源
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var LoadType;
        (function (LoadType) {
            /**
             * 圖片類型
             * @type {fcc.type.LoadType.img}
             */
            LoadType[LoadType["img"] = 0] = "img";
            /**
             * 骨骼动画類型
             * @type {fcc.type.LoadType.spine}
             */
            LoadType[LoadType["spine"] = 1] = "spine";
            /**
             * 預載資源類型
             * @type {fcc.type.LoadType.prefab}
             */
            LoadType[LoadType["prefab"] = 2] = "prefab";
            /**
             * 音樂類型
             * @type {fcc.type.LoadType.music}
             */
            LoadType[LoadType["music"] = 3] = "music";
            /**
             * 文字類型(注意:目前只接收 .CSV 檔案)
             * @type {fcc.type.LoadType.text}
             */
            LoadType[LoadType["text"] = 4] = "text";
            /**
             * 場景類型(注意:動態載入資源需放入resource資料夾內 or bundle資料夾內)
             * @type {fcc.type.LoadType.scene}
             */
            LoadType[LoadType["scene"] = 5] = "scene";
            /**
             * 外部URL腳本
             * @type {fcc.type.LoadType.script}
             */
            LoadType[LoadType["script"] = 6] = "script";
            /**
             * 外部URL CSS
             * @type {fcc.type.LoadType.script}
             */
            LoadType[LoadType["css"] = 7] = "css";
        })(LoadType = type.LoadType || (type.LoadType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="../Enum/LoadEnum.ts" />
/// <reference path="../Enum/LoadEnum.ts" />
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="./IEventManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 事件管理器,當前綁定的事件,事件數量
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var EventManager = /** @class */ (function (_super) {
        __extends(EventManager, _super);
        function EventManager(configManager) {
            var _this = _super.call(this) || this;
            _this.configManager = configManager;
            _this._eventCount = 0;
            _this._eventsCurrentlyBeing = new Map();
            _this.target = new cc.EventTarget();
            return _this;
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案產生一次該class
         */
        EventManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new EventManager(configManager);
                fcc.eventMgr = this._instance;
            }
        };
        Object.defineProperty(EventManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LISTENER_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 添加事件
         * @param eventTarget
         * @param {string} eventName
         * @param {any} any : 要回傳的物件
         */
        EventManager.prototype.emitEvent = function (eventName) {
            var _a;
            var any = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                any[_i - 1] = arguments[_i];
            }
            any ? (_a = this.target).emit.apply(_a, __spreadArray([eventName], __read(any))) : this.target.emit(eventName);
        };
        /**
         * server監聽回傳接收
         * @param {string} eventName
         * @param {Function} callFun
         * @param isOnce
         */
        EventManager.prototype.eventListener = function (eventName, callFun, isOnce) {
            this._eventCount += 1;
            this._eventsCurrentlyBeing.set("severEvent", eventName);
            if (isOnce) {
                this.target.once(eventName, callFun);
            }
            else {
                this.target.on(eventName, callFun);
            }
        };
        /**
         * 刪除之前用同類型，回調，目標或 useCapture 註冊的事件監聽器，如果只傳遞 type，將會刪除 type 類型的所有事件監聽器。
         * @param {ServerEventType | GameEventType} eventName
         * @param {cc.EventTarget} eventTarget
         * @param callFun?{Function} : 要刪除的方法,如果未傳參數,將默認全部相關的callFun一並刪除
         * @param target?{Object}:調用回調的目標（此對象），如果未指定，則僅刪除沒有目標的回調
         */
        EventManager.prototype.destroyEvent = function (eventName, callFun, target) {
            this.target.off(eventName, callFun, target);
        };
        /**
         * 是否該事件持續監聽中
         */
        EventManager.prototype.hasListening = function (eventName, eventTarget) {
            return eventTarget.hasEventListener(eventName);
        };
        Object.defineProperty(EventManager.prototype, "eventCount", {
            get: function () {
                return this._eventCount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventManager.prototype, "eventsCurrentlyBeing", {
            get: function () {
                return this._eventsCurrentlyBeing;
            },
            enumerable: false,
            configurable: true
        });
        return EventManager;
    }(cc.EventTarget));
    fcc.EventManager = EventManager;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 遊戲流程管理器 : 管理當前流程,執行當前流程
     * @Date 2021-05-14 下午 03:44
     * @Version 1.2
     */
    var ProcessManager = /** @class */ (function () {
        function ProcessManager(configManager) {
            this.configManager = configManager; //獲取ConfigManger,雙向綁定
            this.gameProcessFactory = new fcc.GameProcessFactory(this); //初始化流程工廠
            this._gameState = fcc.type.GameStateType.STANDBY; //初始遊戲狀態
            this.isStartProcess = false; //初始當前執行流程狀態
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案只有一次產生此class
         */
        ProcessManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new ProcessManager(configManager);
                fcc.processMgr = this._instance;
            }
        };
        Object.defineProperty(ProcessManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.PROCESS_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 設定流程
         * @param {fcc.type.ProcessType | string} processName - 可使用預設 ProcessType 或自訂義流程名稱
         * @param {fcc.IF.IProcess} process - 流程
         * @return {this}
         */
        ProcessManager.prototype.setProcess = function (processName, process) {
            this.gameProcessFactory.setProcess(processName, process);
            return this;
        };
        /**
         * 初始流程,執行綁定的流程內的onCreate方法
         * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程
         */
        ProcessManager.prototype.initProcess = function (processName) {
            this.gameProcessFactory.initProcess(processName);
        };
        /**
         * 設定初始要執行的流程
         * @param processName - 流程名稱
         */
        ProcessManager.prototype.setDefaultProcess = function (processName) {
            this.gameProcessFactory.changeProcess(processName);
        };
        /**
         * 更換流程
         * @param {fcc.type.ProcessType | string} processName - 要更換的流程名稱
         */
        ProcessManager.prototype.changeProcess = function (processName) {
            this.gameProcessFactory.changeProcess(processName);
        };
        /**
         * 執行設定好的流程
         */
        ProcessManager.prototype.play = function () {
            var _this = this;
            return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.isStartProcess) return [3 /*break*/, 2];
                            this.updateProcessState(true); //流程開始
                            return [4 /*yield*/, this.gameProcessFactory.useProcess()];
                        case 1:
                            _a.sent();
                            this.updateProcessState(false); //流程循環結束
                            resolve();
                            return [3 /*break*/, 3];
                        case 2:
                            fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.PROCESS_FW, "流程尚未結束,請勿重複執行");
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        ;
        /**
         * 改變當前流程進行狀態
         * @param {boolean} state
         */
        ProcessManager.prototype.updateProcessState = function (state) {
            this.isStartProcess = state;
        };
        /**
         * 清除堵塞狀態
         * 注意:清除該狀態後,該次的流程即使尚未執行完,也能執行下次流程
         */
        ProcessManager.prototype.remake = function () {
            this.isStartProcess = false;
        };
        Object.defineProperty(ProcessManager.prototype, "gameState", {
            get: function () {
                return this._gameState;
            },
            set: function (value) {
                this._gameState = value;
            },
            enumerable: false,
            configurable: true
        });
        return ProcessManager;
    }());
    fcc.ProcessManager = ProcessManager;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 遊戲場景樣式
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var SceneStyleType;
        (function (SceneStyleType) {
            /**
             * 自動模式,將會配合玩家自動切換直式或橫式
             * @type {SceneStyleType.AUTO}
             */
            SceneStyleType["AUTO"] = "AUTO";
            /**
             * 橫式樣式
             * @type {SceneStyleType.HORIZONTAL}
             */
            SceneStyleType["HORIZONTAL"] = "HORIZONTAL";
            /**
             * 直式樣式
             * @type {SceneStyleType.VERTICAL}
             */
            SceneStyleType["VERTICAL"] = "VERTICAL";
        })(SceneStyleType = type.SceneStyleType || (type.SceneStyleType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author 蕭立品
         * @Description 當前方向
         * @Date 2021-06-25 下午 05:17
         * @Version 1.0
         */
        var SceneDirectionType;
        (function (SceneDirectionType) {
            /**
             * 直向
             * @type {SceneDirectionType.PORTRAIT}
             */
            SceneDirectionType["PORTRAIT"] = "PORTRAIT";
            /**
             * 橫向
             * @type {SceneDirectionType.LANDSCAPE}
             */
            SceneDirectionType["LANDSCAPE"] = "LANDSCAPE";
        })(SceneDirectionType = type.SceneDirectionType || (type.SceneDirectionType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="../Enum/SceneStyleType.ts" />
/// <reference path="../Enum/SceneDirectionType.ts" />
/// <reference path="./SceneManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 監聽當前遊戲,玩家是否有更動寬高
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var SceneSizeChangeListener = /** @class */ (function () {
        function SceneSizeChangeListener(configManager, sceneManager) {
            //是否可以更新畫面
            this._isCanUpdateScene = true;
            this.configManager = configManager;
            this.sceneManager = sceneManager;
        }
        /**
         * 監聽是否要更動scene寬高
         * @param {number} delayTime - 更新頻率
         */
        SceneSizeChangeListener.prototype.designSceneEventListener = function (delayTime) {
            var _this = this;
            cc.view.on("canvas-resize", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.makeDesignScene(delayTime)];
                        case 1:
                            _a.sent();
                            cc.log("更新畫面完畢......");
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * 依照designSceneEventListener()參數中的delay時間,更新cavers
         * @param {number} time - 更新頻率
         * @return {Promise<void>}
         * @private
         */
        SceneSizeChangeListener.prototype.makeDesignScene = function (time) {
            var _this = this;
            return new Promise((function (resolve, reject) {
                if (_this._isCanUpdateScene) {
                    _this._isCanUpdateScene = false;
                    setTimeout(function () {
                        _this.sceneManager.updateSize();
                        _this._isCanUpdateScene = true;
                        resolve();
                    }, time);
                }
                else {
                    if (_this.configManager.isFrameworkDebug)
                        reject("正在UpdateScene中 請稍後......");
                }
            }));
        };
        return SceneSizeChangeListener;
    }());
    fcc.SceneSizeChangeListener = SceneSizeChangeListener;
})(fcc || (fcc = {}));
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="../Error/Enum/ErrorType.ts" />
var fcc;
(function (fcc) {
    var ABS;
    (function (ABS) {
        /**
         * @Author XIAO-LI-PIN
         * @Description TODO
         * @Date 2021-06-10 上午 11:12
         * @Version 1.0
         */
        var ABaseNotification = /** @class */ (function () {
            function ABaseNotification() {
                this.observer = new Set();
            }
            /**
             * 訂閱該事件
             * @param {IBaseObserver} observer - 關注者
             * @param {boolean} isPermanent - 是否常駐
             */
            ABaseNotification.prototype.subscribe = function (observer, isPermanent) {
                if (this.observer.has(observer)) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.SCENE_FW, observer + " \u8A72IBaseObserver\u5DF2\u8A3B\u518A\u904E\u81EA\u52D5\u72C0\u614B\u6539\u8B8A\u6642\u4E8B\u4EF6,\u8ACB\u6AA2\u67E5");
                    return;
                }
                observer.isPermanent = isPermanent;
                this.observer.add(observer);
            };
            ;
            /**
             * 移除訂閱
             * @param {IBaseObserver} observer - 關注者
             */
            ABaseNotification.prototype.unsubscribe = function (observer) {
                if (this.observer.has(observer)) {
                    this.observer.delete(observer);
                }
                else {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.PROCESS_FW, observer + " : \u8A72\u89C0\u5BDF\u985E\u5C1A\u672A\u7D81\u5B9A\u904E,\u7121\u9808\u79FB\u9664\u89C0\u5BDF\u5C0D\u8C61");
                }
            };
            ;
            /**
             * 移除所有訂閱
             */
            ABaseNotification.prototype.removeAll = function () {
                this.observer.clear();
            };
            /**
             * 獲取該事件所有訂閱數量
             */
            ABaseNotification.prototype.getSubscribeCount = function () {
                return this.observer.size;
            };
            ;
            /**
             * 獲取該事件所有訂閱者
             */
            ABaseNotification.prototype.getAllSubscribe = function () {
                return this.observer;
            };
            ;
            return ABaseNotification;
        }());
        ABS.ABaseNotification = ABaseNotification;
    })(ABS = fcc.ABS || (fcc.ABS = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description TODO
         * @Date 2021-06-10 下午 04:59
         * @Version 1.0
         */
        var NotificationType;
        (function (NotificationType) {
            NotificationType["AUTO_CHANGE"] = "AUTO_CHANGE";
            NotificationType["SPEED_CHANGE"] = "SPEED_CHANGE";
            NotificationType["USER_MONEY_CHANGE"] = "USER_MONEY_CHANGE";
            NotificationType["USER_BET_CHANGE"] = "USER_BET_CHANGE";
            NotificationType["USER_GET_WIN"] = "USER_GET_WIN";
            NotificationType["SCENE_DIRECTION_CHANGE"] = "SceneDirectionChangeNotification";
            NotificationType["RESPONSE_RESULT"] = "ResponseResultNotification";
            NotificationType["SCROLL_FOCUS_STATE"] = "ScrollFocusStateNotification";
        })(NotificationType = type.NotificationType || (type.NotificationType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="../../../Scene/Enum/SceneDirectionType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 場景方向改變觀察者,當有事件推送時,將會將該事件推播給綁定者
     * @Date 2021-05-19 下午 01:46
     * @Version 1.0
     */
    var SceneDirectionChangeObserver = /** @class */ (function () {
        function SceneDirectionChangeObserver(callFun, self) {
            this._isPermanent = false;
            this.self = self;
            this.callFun = callFun;
        }
        SceneDirectionChangeObserver.prototype.pushNotification = function (type) {
            this.callFun.call(this.self, type);
        };
        Object.defineProperty(SceneDirectionChangeObserver.prototype, "isPermanent", {
            get: function () {
                return this._isPermanent;
            },
            set: function (value) {
                this._isPermanent = value;
            },
            enumerable: false,
            configurable: true
        });
        return SceneDirectionChangeObserver;
    }());
    fcc.SceneDirectionChangeObserver = SceneDirectionChangeObserver;
})(fcc || (fcc = {}));
/// <reference path="../../../Scene/Enum/SceneDirectionType.ts" />
/// <reference path="../../ABaseNotification.ts" />
/// <reference path="../../Enum/NotificationType.ts" />
/// <reference path="../../ObserverType/SceneObserver/SceneDirectionChangeObserver.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 場景方向改變通知管理器
     * @Date 2021-05-19 下午 01:57
     * @Version 1.0
     */
    var SceneDirectionChangeNotification = /** @class */ (function (_super) {
        __extends(SceneDirectionChangeNotification, _super);
        function SceneDirectionChangeNotification() {
            var _this = _super.call(this) || this;
            _this.TAG_NAME = fcc.type.NotificationType.SCENE_DIRECTION_CHANGE;
            return _this;
        }
        Object.defineProperty(SceneDirectionChangeNotification, "instance", {
            /**
             * 懶漢加載,單例模式
             * @returns {SceneDirectionChangeNotification}
             */
            get: function () {
                if (!this._instance) {
                    this._instance = new SceneDirectionChangeNotification();
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        SceneDirectionChangeNotification.prototype.subscribe = function (observer, isPermanent) {
            _super.prototype.subscribe.call(this, observer, isPermanent);
        };
        /**
         * 用戶更換方向時推送通知
         * @param {SceneDirectionType} type : 當前用戶方向
         */
        SceneDirectionChangeNotification.prototype.notify = function (type) {
            var e_1, _a;
            if (this.observer.size > 0) {
                try {
                    for (var _b = __values(this.observer), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.pushNotification(type);
                        if (!observer.isPermanent) {
                            this.unsubscribe(observer);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        return SceneDirectionChangeNotification;
    }(fcc.ABS.ABaseNotification));
    fcc.SceneDirectionChangeNotification = SceneDirectionChangeNotification;
})(fcc || (fcc = {}));
/// <reference path="../Enum/SceneDirectionType.ts" />
/// <reference path="../SceneManager.ts" />
/// <reference path="../../Listener/NotificationType/SceneNotification/SceneDirectionChangeNotification.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 自動模式 : 依照玩家當前的使用方式,自動更新為橫式 or 直式
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var AutoStyle = /** @class */ (function () {
        function AutoStyle(sceneManager) {
            this.sceneManager = sceneManager;
        }
        AutoStyle.prototype.executionStyle = function (width, height) {
            this.updateSceneDirection();
            if ((cc.view.getFrameSize().width / cc.view.getFrameSize().height) >= (width / height)) {
                //宽度超出
                var newWidth = cc.view.getFrameSize().width * (width / cc.view.getFrameSize().height);
                cc.view.setDesignResolutionSize(newWidth, height, cc.ResolutionPolicy.FIXED_HEIGHT);
            }
            else {
                if (cc.view.getFrameSize().width > cc.view.getFrameSize().height) {
                    var newHeight = cc.view.getFrameSize().height * (width / cc.view.getFrameSize().width);
                    cc.view.setDesignResolutionSize(width, newHeight, cc.ResolutionPolicy.FIXED_WIDTH);
                }
                else {
                    if ((cc.view.getFrameSize().width / cc.view.getFrameSize().height) >= (1000 / 1777)) {
                        var newHeight = cc.view.getFrameSize().height * (1000 / cc.view.getFrameSize().width);
                        cc.view.setDesignResolutionSize(1000, newHeight, cc.ResolutionPolicy.FIXED_HEIGHT);
                    }
                    else {
                        var newHeight = cc.view.getFrameSize().height * (1000 / cc.view.getFrameSize().width);
                        cc.view.setDesignResolutionSize(1000, newHeight, cc.ResolutionPolicy.FIXED_WIDTH);
                    }
                }
            }
        };
        /**
         * 更新管理器內的 sceneDirection 變數,並推撥已更新當前場景方向的事件
         *
         * 注意 : 如果當前方向不變,卻更新了遊戲是配度,是不會推波事件的
         *       只有方向改變才會推送推波事件
         */
        AutoStyle.prototype.updateSceneDirection = function () {
            if (cc.view.getFrameSize().width < cc.view.getFrameSize().height) {
                //直向
                if (this.sceneManager.sceneDirection == fcc.type.SceneDirectionType.PORTRAIT)
                    return;
                this.sceneManager.sceneDirection = fcc.type.SceneDirectionType.PORTRAIT;
                fcc.SceneDirectionChangeNotification
                    .instance
                    .notify(fcc.type.SceneDirectionType.PORTRAIT);
            }
            else {
                //橫向
                if (this.sceneManager.sceneDirection == fcc.type.SceneDirectionType.LANDSCAPE)
                    return;
                this.sceneManager.sceneDirection = fcc.type.SceneDirectionType.LANDSCAPE;
                fcc.SceneDirectionChangeNotification
                    .instance
                    .notify(fcc.type.SceneDirectionType.LANDSCAPE);
            }
        };
        return AutoStyle;
    }());
    fcc.AutoStyle = AutoStyle;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 橫式樣式更新
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var HorizontalStyle = /** @class */ (function () {
        function HorizontalStyle() {
        }
        HorizontalStyle.prototype.executionStyle = function (width, height) {
            var cvs = cc.find('Canvas').getComponent(cc.Canvas);
            //保存原始設計分辨率，供屏幕大小變化時使用
            if (!this.curDR) {
                this.curDR = cc.size(width, height);
            }
            var dr = this.curDR;
            var s = cc.view.getFrameSize();
            var rw = s.width;
            var rh = s.height;
            var finalW = rw;
            var finalH = rh;
            if ((rw / rh) > (dr.width / dr.height)) {
                //橫向
                //!#zh: 是否優先將設計分辨率高度撐滿視圖高度 。 */
                cvs.fitHeight = true;
                cvs.fitWidth = false;
                //如果更長，則用定高
                finalH = dr.height;
                finalW = finalH * rw / rh;
            }
            else {
                //直向
                /*!#zh: 是否優先將設計分辨率寬度撐滿視圖寬度 。 */
                cvs.fitHeight = false;
                cvs.fitWidth = true;
                //如果更短，則用定寬
                finalW = dr.width;
                finalH = rh / rw * finalW;
            }
            cvs.designResolution = cc.size(finalW, finalH);
            cvs.node.width = finalW;
            cvs.node.height = finalH;
        };
        return HorizontalStyle;
    }());
    fcc.HorizontalStyle = HorizontalStyle;
})(fcc || (fcc = {}));
/// <reference path="../../Error/ErrorManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 直式樣式更新
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var VerticalStyle = /** @class */ (function () {
        function VerticalStyle() {
        }
        VerticalStyle.prototype.executionStyle = function (width, height) {
            fcc.ErrorManager.instance.executeError("尚未完成直向是配模式");
        };
        return VerticalStyle;
    }());
    fcc.VerticalStyle = VerticalStyle;
})(fcc || (fcc = {}));
/// <reference path="./Enum/SceneStyleType.ts" />
/// <reference path="./SceneStyle/AutoStyle.ts" />
/// <reference path="./SceneStyle/HorizontalStyle.ts" />
/// <reference path="./SceneStyle/VerticalStyle.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 依照初始設定對應的更新模式,更新當前遊戲場景
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var SceneStyleHandler = /** @class */ (function () {
        function SceneStyleHandler(sceneManager) {
            this.autoStyle = new fcc.AutoStyle(sceneManager);
            this.horizontalStyle = new fcc.HorizontalStyle();
            this.verticalStyle = new fcc.VerticalStyle();
        }
        /**
         * 匹對對應的更新類,做相對應的更新
         * @param {fcc.type.SceneStyleType | fcc.IF.ISceneStyle} sceneStyle - 對應的的樣式 or 自訂義樣式
         * @param {number} width - 寬
         * @param {number} height - 高
         */
        SceneStyleHandler.prototype.getStyle = function (sceneStyle, width, height) {
            switch (sceneStyle) {
                case fcc.type.SceneStyleType.AUTO:
                    this.autoStyle.executionStyle(width, height);
                    break;
                case fcc.type.SceneStyleType.HORIZONTAL:
                    this.horizontalStyle.executionStyle(width, height);
                    break;
                case fcc.type.SceneStyleType.VERTICAL:
                    this.verticalStyle.executionStyle(width, height);
                    break;
                default:
                    sceneStyle.executionStyle(width, height);
            }
        };
        return SceneStyleHandler;
    }());
    fcc.SceneStyleHandler = SceneStyleHandler;
})(fcc || (fcc = {}));
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="../Load/LoadResManager.ts" />
/// <reference path="./Enum/SceneStyleType.ts" />
/// <reference path="./Enum/SceneDirectionType.ts" />
/// <reference path="./IScene/ISceneManager.ts" />
/// <reference path="./SceneSizeChangeListener.ts" />
/// <reference path="./SceneStyleHandler.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 場景管理器 : 自動匹配遊戲寬高,監聽當前玩家遊玩模式(橫式or直式)
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var SceneManager = /** @class */ (function () {
        function SceneManager(configManager) {
            this.configManager = configManager;
            this._designWidth = 1280; //初始預設寬度
            this._designHeight = 720; //初始預設高度
            this.sceneSizeChangeListener = new fcc.SceneSizeChangeListener(configManager, this);
            //實例化監聽器
            this.sceneStyleHandler = new fcc.SceneStyleHandler(this); //實例化scene樣式導向器
            this.style = fcc.type.SceneStyleType.HORIZONTAL; //初始預設scene畫面調整的模式
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案產生一次該class
         * @param {fcc.IF.IConfigManager} configManager
         */
        SceneManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new SceneManager(configManager);
                fcc.sceneMgr = this._instance;
            }
        };
        Object.defineProperty(SceneManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.SCENE_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * cavers 設計寬度
         * @param {number} width - 寬度
         * @return {this}
         */
        SceneManager.prototype.setDesignWidth = function (width) {
            this._designWidth = width;
            return this;
        };
        /**
         * cavers 設計高度
         * @param {number} height - 高度
         * @return {this}
         */
        SceneManager.prototype.setDesignHeight = function (height) {
            this._designHeight = height;
            return this;
        };
        /**
         * 更新當前示配寬高,會保存上次的scene更動模式
         * 如不添加參數,第一次將會使用預設模式更動
         * @param {SceneStyleType | Function} style - 可自定義更動樣式,但需實作(介面)ISceneStyle
         * @return {this}
         */
        SceneManager.prototype.updateSize = function (style) {
            if (style) {
                this.style = style;
                switch (style) {
                    case fcc.type.SceneStyleType.HORIZONTAL:
                        this._sceneDirection = fcc.type.SceneDirectionType.PORTRAIT;
                        break;
                    case fcc.type.SceneStyleType.VERTICAL:
                        this._sceneDirection = fcc.type.SceneDirectionType.LANDSCAPE;
                        break;
                    case fcc.type.SceneStyleType.AUTO:
                        break;
                    default:
                        console.log("該更新模式尚未包含在框架中,請確認是否有實作ISceneStyle");
                        break;
                }
            }
            this.sceneStyleHandler.getStyle(this.style, this._designWidth, this._designHeight);
            return this;
        };
        /**
         * 監聽當前cavers是否有更動大小,如果有將會自動更新當前是配寬高
         * 將會比照上次更動的樣式進行更動
         * 如果需求更動樣式,須先更新 updateSize()
         * @param {number} time : 更新的頻率 單位毫秒 ms
         */
        SceneManager.prototype.startListener = function (time) {
            this.sceneSizeChangeListener.designSceneEventListener(time);
        };
        /**
         * 更換場景
         * @param {string} name : 場景資源名稱為你Res動態加載的自訂義的scene名稱
         */
        SceneManager.prototype.changeScene = function (name) {
            if (!fcc.LoadResManager.instance.sceneRes.has(name)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.SCENE_FW, "加載不到你的Scene資源,請檢查該資源名是否正確");
            }
            cc.director.runScene(fcc.LoadResManager.instance.sceneRes.get(name));
        };
        /**
         * 清除該scene所有動作
         * @param scene{cc.Component} - 要清除的scene class
         */
        SceneManager.prototype.removeScene = function (scene) {
            scene.destroy();
        };
        Object.defineProperty(SceneManager.prototype, "sceneDirection", {
            get: function () {
                return this._sceneDirection;
            },
            set: function (value) {
                this._sceneDirection = value;
            },
            enumerable: false,
            configurable: true
        });
        return SceneManager;
    }());
    fcc.SceneManager = SceneManager;
})(fcc || (fcc = {}));
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="./ISlotStyleManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 老虎機管理器 : 管理老虎機樣式,執行速度,效果
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var SlotStyleManager = /** @class */ (function () {
        function SlotStyleManager(configManager) {
            this.configManager = configManager;
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案產生一次該class
         */
        SlotStyleManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new SlotStyleManager(configManager);
                fcc.slotStyleMgr = this._instance;
            }
        };
        Object.defineProperty(SlotStyleManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.SlotStyleFW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 添加執行流程的class 需繼承 ISlot
         * @param {ASlot} slotTemplate
         * @return {this}
         */
        SlotStyleManager.prototype.setSlotTemplate = function (slotTemplate) {
            this.template = slotTemplate;
            return this;
        };
        SlotStyleManager.prototype.setSlotStyle = function (slotSetting) {
            return new slotSetting(this);
        };
        /**
         * 初始化Slot : 將Slot設定參數給予Slot做初始處理
         */
        SlotStyleManager.prototype.build = function (slotSetting) {
            if (!this.template) {
                fcc.ErrorManager
                    .instance
                    .executeError(fcc.type.ErrorType.UNDEFINED_FW, "Slot Template 未賦予,需幫定或實做一個SlotTemplate");
            }
            this._slot = new this.template(slotSetting);
        };
        Object.defineProperty(SlotStyleManager.prototype, "slot", {
            get: function () {
                return this._slot;
            },
            enumerable: false,
            configurable: true
        });
        return SlotStyleManager;
    }());
    fcc.SlotStyleManager = SlotStyleManager;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 遊戲自動狀態種類
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var AutoType;
        (function (AutoType) {
            /**
             * 無限AUTO
             * @type {AutoType.AUTO}
             */
            AutoType[AutoType["AUTO"] = -1] = "AUTO";
            /**
             * 直到Free出現後,結束AUTO狀態
             * @type {AutoType.AUTO}
             */
            AutoType[AutoType["FREE_END"] = -2] = "FREE_END";
            /**
             * AUTO 50次
             * @type {AutoType.AUTO_50}
             */
            AutoType[AutoType["AUTO_50"] = 50] = "AUTO_50";
            /**
             * AUTO 100次
             * @type {AutoType.AUTO_100}
             */
            AutoType[AutoType["AUTO_100"] = 100] = "AUTO_100";
            /**
             * AUTO 500次
             * @type {AutoType.AUTO_100}
             */
            AutoType[AutoType["AUTO_500"] = 500] = "AUTO_500";
            /**
             * AUTO 1000次
             * @type {AutoType.AUTO_1000}
             */
            AutoType[AutoType["AUTO_1000"] = 1000] = "AUTO_1000";
        })(AutoType = type.AutoType || (type.AutoType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description TODO
         * @Date 2021-06-15 下午 06:00
         * @Version 1.0
         */
        var LanguageType;
        (function (LanguageType) {
            /**
             * 台灣
             * @type {LanguageType.TAIWAN}
             */
            LanguageType["TAIWAN"] = "NTD";
            /**
             * 中國
             * @type {LanguageType.CHINESE}
             */
            LanguageType["CHINESE"] = "CNY";
            /**
             * 泰國
             * @type {LanguageType.THAILAND}
             */
            LanguageType["THAILAND"] = "THB";
            /**
             * 美國
             * @type {LanguageType.AMERICA}
             */
            LanguageType["AMERICA"] = "USD";
            /**
             * 越南
             * @type {LanguageType.VIETNAM}
             */
            LanguageType["VIETNAM"] = "VND";
            /**
             * 印尼
             */
            LanguageType["INDONESIA"] = "IDR";
            /**
             * 馬來西亞
             */
            LanguageType["MALAYSIA"] = "MYR";
        })(LanguageType = type.LanguageType || (type.LanguageType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="../Audio/AudioManager.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="../Listener/EventManager.ts" />
/// <reference path="../Load/LoadResManager.ts" />
/// <reference path="../Process/ProcessManager.ts" />
/// <reference path="../Scene/SceneManager.ts" />
/// <reference path="../Slot/SlotStyleManager.ts" />
/// <reference path="../Process/Enum/AutoType.ts" />
/// <reference path="./IConfig/ISlotConfigManager.ts" />
/// <reference path="../Language/Enum/LanguageType.ts" />
/// <reference path="../Process/Enum/AutoType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 遊戲初始設定,並透過builder加載所有Manager
     * @Date 2021-05-13 上午 10:24
     * @Version 1.1
     */
    var SlotConfigManager = /** @class */ (function () {
        function SlotConfigManager() {
            this._gameNumber = null; //該遊戲名稱
            this._externallyLoadURL = ""; //載入外部資源URL
            this._isAuto = false; //是否自動
            this._isSpeedUp = false; //是否加速
            this._autoCount = fcc.type.AutoType.AUTO; //初始自動狀態
            this._musicVolume = 1; //遊戲音量
            this._effectVolume = 1; //效果音量
            this._isMusicOnMute = false; //是否將音樂靜音
            this._isEffectOnMute = false; //是否將音效靜音
            this._language = fcc.type.LanguageType.CHINESE; //初始當前語系,將依據該語系,載入所有耦合圖檔
            this._backHomeURL = null; //初始返回首頁URL
            this._cocosDebugSetting = cc.debug.DebugMode.INFO; //設置cocos debug 模式
            this._isFrameworkDebug = true; //是否要開啟框架的Debug模式
        }
        Object.defineProperty(SlotConfigManager, "instance", {
            /**
             * 懶漢加載
             * 初始化,只讓一個專案只有一次產生此class
             * @returns {SlotConfigManager}
             */
            get: function () {
                if (!this._instance) {
                    this._instance = new SlotConfigManager();
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 添加遊戲名稱
         * @param {number} name - 遊戲名稱
         * @default null
         * @returns {this}
         */
        SlotConfigManager.prototype.setGameNumber = function (name) {
            this._gameNumber = name;
            return this;
        };
        /**
         * 設置初始預設音量
         * @param {number} number - 音量 0~1
         * @default 1
         * @returns {this}
         */
        SlotConfigManager.prototype.setMusicVolume = function (number) {
            this._musicVolume = number;
            return this;
        };
        /**
         * 設置初始預設效果音量
         * @param {number} number - 音量 0~1
         * @default 1
         * @returns {this}
         */
        SlotConfigManager.prototype.setEffectVolume = function (number) {
            this._effectVolume = number;
            return this;
        };
        /**
         * 初始將背景音樂靜音
         * @param {boolean} OnMute - 是否靜音
         * @default false
         * @returns {this}
         */
        SlotConfigManager.prototype.setMusicOnMute = function (OnMute) {
            this._isMusicOnMute = OnMute;
            return this;
        };
        /**
         * 初始是否將效果音效靜音
         * @param {boolean} OnMute - 是否靜音
         * @default false
         * @returns {this}
         */
        SlotConfigManager.prototype.setEffectOnMute = function (OnMute) {
            this._isEffectOnMute = OnMute;
            return this;
        };
        /**
         * 初始遊戲最初的auto次數
         * @param {AutoType} type
         * @default type.AutoType.AUTO
         * @returns {this}
         */
        SlotConfigManager.prototype.setAutoCont = function (type) {
            this._autoCount = type;
            return this;
        };
        /**
         * 初始要從外部拿取資源的URL
         * @param {string} url : 獲取外部資源的URL
         * @default ""
         * @returns {this}
         */
        SlotConfigManager.prototype.setExternallyLoadURL = function (url) {
            this._externallyLoadURL = url;
            return this;
        };
        /**
         * 初始語系
         * @param {LanguageType} languageType - 語系
         * @default LanguageType.CHINESE
         * @returns {this}
         */
        SlotConfigManager.prototype.setLanguage = function (languageType) {
            this._language = languageType;
            return this;
        };
        /**
         * 初始進入遊戲時Auto狀態
         * @param {boolean} isAuto - 是否在遊戲進入後開啟auto狀態
         * @default false
         * @returns {this}
         */
        SlotConfigManager.prototype.setAutoState = function (isAuto) {
            this._isAuto = isAuto;
            return this;
        };
        /**
         * 是否在遊戲進入後是加速的狀態
         * @param {boolean} isSpeedUp
         * @default false
         * @returns {this}
         */
        SlotConfigManager.prototype.setSpeedState = function (isSpeedUp) {
            this._isSpeedUp = isSpeedUp;
            return this;
        };
        /**
         * 是否要開啟Framework Debug模式
         * 注意:遊戲正式上線須關閉
         * @param {boolean} use
         * @default true
         * @returns {this}
         */
        SlotConfigManager.prototype.setFrameWorkDebug = function (use) {
            this._isFrameworkDebug = use;
            return this;
        };
        /**
         * cocos 框架 debug設定
         * @param {cc.debug.DebugMode} type - debug 樣式
         * @default - cc.debug.DebugMode.INFO
         * @return {this}
         */
        SlotConfigManager.prototype.setCocosDebug = function (type) {
            this._cocosDebugSetting = type;
            return this;
        };
        /**
         * 返回首頁URL
         * @param {string} url
         * @default null
         * @returns {this}
         */
        SlotConfigManager.prototype.setBackHomeURL = function (url) {
            this._backHomeURL = url;
            return this;
        };
        /**
         * 實例化所有Manager class;
         */
        SlotConfigManager.prototype.build = function () {
            cc.debug["_resetDebugSetting"](this._cocosDebugSetting);
            fcc.ErrorManager.setInstance(this);
            fcc.AudioManager.setInstance(this);
            fcc.LanguageManager.setInstance(this);
            fcc.EventManager.setInstance(this);
            fcc.LoadResManager.setInstance(this);
            fcc.ProcessManager.setInstance(this);
            fcc.SceneManager.setInstance(this);
            fcc.SlotStyleManager.setInstance(this);
        };
        Object.defineProperty(SlotConfigManager.prototype, "externallyLoadURL", {
            // get -----------------------------------------------------------------
            get: function () {
                return this._externallyLoadURL;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "gameNumber", {
            get: function () {
                return this._gameNumber;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "isAuto", {
            get: function () {
                return this._isAuto;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "autoCount", {
            get: function () {
                return this._autoCount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "isSpeedUp", {
            get: function () {
                return this._isSpeedUp;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "musicVolume", {
            get: function () {
                return this._musicVolume;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "effectVolume", {
            get: function () {
                return this._effectVolume;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "language", {
            get: function () {
                return this._language;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "isFrameworkDebug", {
            get: function () {
                return this._isFrameworkDebug;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "isEffectOnMute", {
            get: function () {
                return this._isEffectOnMute;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "isMusicOnMute", {
            get: function () {
                return this._isMusicOnMute;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "backHomeURL", {
            get: function () {
                return this._backHomeURL;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotConfigManager.prototype, "cocosDebugSetting", {
            get: function () {
                return this._cocosDebugSetting;
            },
            enumerable: false,
            configurable: true
        });
        return SlotConfigManager;
    }());
    fcc.SlotConfigManager = SlotConfigManager;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var ABS;
    (function (ABS) {
        /**
         * @Author XIAO-LI-PIN
         * @Description (抽象類)載入外部腳本
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var ALoadScriptType = /** @class */ (function () {
            function ALoadScriptType(scriptName, type, url) {
                this.scriptName = scriptName;
                this.type = type;
                this.url = url;
            }
            ALoadScriptType.head = document.getElementsByTagName("head")[0];
            return ALoadScriptType;
        }());
        ABS.ALoadScriptType = ALoadScriptType;
    })(ABS = fcc.ABS || (fcc.ABS = {}));
})(fcc || (fcc = {}));
/// <reference path="../../Config/SlotConfigManager.ts" />
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadScriptType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 加載外部css資源
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var CSSLoad = /** @class */ (function (_super) {
        __extends(CSSLoad, _super);
        function CSSLoad(scriptName, type, url) {
            var _this = _super.call(this, scriptName, type, url) || this;
            _this.linkElem = document.createElement("link");
            return _this;
        }
        CSSLoad.prototype.loadScript = function () {
            var url = fcc.SlotConfigManager.instance.externallyLoadURL + "/" + this.url + "/" + this.scriptName + ".css";
            if (fcc.LoadResManager.instance.scriptRes.has(url)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "\u8ACB\u52FF\u91CD\u8907\u52A0\u8F09\u5DF2\u6709\u7684\u5916\u90E8\u8173\u672C : " + url);
            }
            this.linkElem.rel = "stylesheet";
            this.linkElem.type = this.type;
            this.linkElem.href = url;
            fcc.ABS.ALoadScriptType.head.appendChild(this.linkElem);
            fcc.LoadResManager.instance.scriptRes.add(url);
        };
        return CSSLoad;
    }(fcc.ABS.ALoadScriptType));
    fcc.CSSLoad = CSSLoad;
})(fcc || (fcc = {}));
/// <reference path="../../Config/SlotConfigManager.ts" />
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadScriptType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    var ScriptLoad = /** @class */ (function (_super) {
        __extends(ScriptLoad, _super);
        function ScriptLoad(scriptName, type, url) {
            var _this = _super.call(this, scriptName, type, url) || this;
            _this.linkElem = document.createElement("script");
            return _this;
        }
        ScriptLoad.prototype.loadScript = function () {
            var url = fcc.SlotConfigManager.instance.externallyLoadURL + "/" + this.url + "/" + this.scriptName + ".js";
            if (fcc.LoadResManager.instance.scriptRes.has(url)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "\u8ACB\u52FF\u91CD\u8907\u52A0\u8F09\u5DF2\u6709\u7684\u5916\u90E8\u8173\u672C : " + url);
            }
            this.linkElem.type = this.type;
            this.linkElem.src = url;
            fcc.ABS.ALoadScriptType.head.appendChild(this.linkElem);
            fcc.LoadResManager.instance.scriptRes.add(url);
        };
        return ScriptLoad;
    }(fcc.ABS.ALoadScriptType));
    fcc.ScriptLoad = ScriptLoad;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../../Global/Util.ts" />
var fcc;
(function (fcc) {
    var ABS;
    (function (ABS) {
        /**
         * @Author XIAO-LI-PIN
         * @Description (抽象類)載入各類cocos資源
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var ALoadType = /** @class */ (function () {
            function ALoadType(dataName, type, url, folder) {
                this.type = type; //當前要獲取的資源類型
                this.url = url; //獲取的地址
                this.dataName = dataName; //要拿取資源的key
                this.folder = folder; //父資料夾名稱,默認 resources
                this.beforeProgress = 0; //當前上次的載入進度
                this.assetBundle = cc.assetManager.getBundle(this.folder);
            }
            /**
             * 加載資源方法
             */
            ALoadType.prototype.loadResources = function () {
                if (this.type !== cc.SceneAsset) {
                    this.assetBundle
                        .loadDir(this.url, this.type, this.loadResProgress.bind(this), this.loadResCallBack.bind(this));
                }
                else {
                    //載入scene資源,如果名稱錯誤會scene名稱錯誤會無法拿取資源
                    //載入scene資源,無須URL地址,但是2.4.X需要放在Resource底下
                    this.assetBundle
                        .loadScene(this.dataName, cc.SceneAsset, this.loadResProgress.bind(this), this.loadResCallBack.bind(this));
                }
            };
            /**
             * 回傳該加載的資源
             * @param {Error} error - 錯誤訊息
             * @param {[] | cc.SceneAsset} assets - 資源
             * @private
             */
            ALoadType.prototype.loadResCallBack = function (error, assets) {
                if (error) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, error);
                }
                else if (!(assets instanceof cc.SceneAsset) && assets.length == 0) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "\u7121\u8F09\u5165\u4EFB\u4F55\u8CC7\u6E90 " + this.url + " ");
                }
                this.setResToManager(this.dataName, assets);
            };
            /**
             * 回傳當前載入進度
             * @param {number} complete - 以載入完畢的數量
             * @param {number} TotalAmount - 總數量
             * @private
             */
            ALoadType.prototype.loadResProgress = function (complete, TotalAmount) {
                //獲取百分比
                var progress = fcc.global.Util.roundDown((complete / TotalAmount), 2);
                if (progress > this.beforeProgress) {
                    //不從這裡判斷狀態,目的解決異步操作
                    //當資源都載入到LoadManager時才回傳以載入完成的狀態
                    if (progress >= 1) {
                        progress = 0.99;
                    }
                    //回傳上次與這次之間增加了多少進度
                    this.updateManagerState(this.dataName, progress, (progress - this.beforeProgress));
                    this.beforeProgress = progress;
                }
            };
            /**
             * 載入完成後回調
             * @protected
             */
            ALoadType.prototype.updateProgressEnd = function () {
                //目的解決異步操作
                //當資源都載入到LoadManager時才回傳以載入完成的狀態
                if (this.folder === "resources") {
                    fcc.LoadResManager.instance.initialLoadState.set(this.dataName, 1);
                    fcc.LoadResManager.instance.loadMainEventCallback(this.dataName, 0.01, 1);
                }
                else {
                    fcc.LoadResManager.instance.secondaryLoadState.set(this.dataName, 1);
                    fcc.LoadResManager.instance.loadSecondaryEventCallback(this.dataName, 1);
                }
            };
            /**
             * 更新當前進度
             * @param {string} key - 該資源名稱
             * @param {number} state - 當前進度
             * @param {number} update - 更上次進度比起,新增了多少進度
             * @protected
             */
            ALoadType.prototype.updateManagerState = function (key, state, update) {
                if (this.folder === "resources") {
                    fcc.LoadResManager.instance.initialLoadState.set(key, state);
                    fcc.LoadResManager.instance.loadMainEventCallback(key, update, state);
                }
                else {
                    fcc.LoadResManager.instance.secondaryLoadState.set(key, state);
                    fcc.LoadResManager.instance.loadSecondaryEventCallback(key, state);
                }
            };
            return ALoadType;
        }());
        ABS.ALoadType = ALoadType;
    })(ABS = fcc.ABS || (fcc.ABS = {}));
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入圖片資源
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var ImgLoad = /** @class */ (function (_super) {
        __extends(ImgLoad, _super);
        function ImgLoad(dataName, type, url, folder) {
            return _super.call(this, dataName, type, url, folder) || this;
        }
        /**
         * 將資源保存在管理器中
         * @param {string} dataName - 自訂義該資源名稱
         * @param {cc.SpriteAtlas} asset - 資源
         * @protected
         */
        ImgLoad.prototype.setResToManager = function (dataName, asset) {
            var e_2, _a;
            var spriteMap = new Map();
            try {
                for (var _b = __values(asset[0].getSpriteFrames()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sprite = _c.value;
                    //將鍵值轉小寫,如果有使用grid key 作為搜尋資源
                    //將無條件將 key 轉成 純數字 例如 : symbol0~10 = 0~10
                    var lowerCase = dataName.toLowerCase();
                    if (lowerCase.match("grid")) {
                        var gridName = sprite.name.replace(/[a-z A-Z]/g, '');
                        spriteMap.set(gridName, sprite);
                    }
                    else {
                        var spriteName = sprite.name;
                        spriteMap.set(spriteName, sprite);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            fcc.LoadResManager.instance.imgRes.set(dataName, spriteMap);
            //目的解決異步操作
            //當資源都載入到LoadManager時才回傳以載入完成的狀態
            this.updateProgressEnd();
        };
        return ImgLoad;
    }(fcc.ABS.ALoadType));
    fcc.ImgLoad = ImgLoad;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入音樂資源
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var MusicLoad = /** @class */ (function (_super) {
        __extends(MusicLoad, _super);
        function MusicLoad(dataName, type, url, folder) {
            return _super.call(this, dataName, type, url, folder) || this;
        }
        /**
         * 將資源保存在管理器中
         * @param {string} dataName - 自訂義該資源名稱
         * @param {cc.AudioClip} asset - 資源
         * @protected
         */
        MusicLoad.prototype.setResToManager = function (dataName, asset) {
            var e_3, _a;
            try {
                //拿取音樂檔名,當作鍵值
                for (var asset_1 = __values(asset), asset_1_1 = asset_1.next(); !asset_1_1.done; asset_1_1 = asset_1.next()) {
                    var value = asset_1_1.value;
                    var key = value.name;
                    if (fcc.LoadResManager.instance.musicRes.has(key))
                        fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, key + " \u9375\u503C\u91CD\u8907,\u8ACB\u6AA2\u67E5\u8A72\u97F3\u6A02\u8CC7\u6E90\u662F\u5426\u5DF2\u52A0\u8F09\u904E");
                    fcc.LoadResManager.instance.musicRes.set(key, value);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (asset_1_1 && !asset_1_1.done && (_a = asset_1.return)) _a.call(asset_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            //目的解決異步操作
            //當資源都載入到LoadManager時才回傳以載入完成的狀態
            this.updateProgressEnd();
        };
        return MusicLoad;
    }(fcc.ABS.ALoadType));
    fcc.MusicLoad = MusicLoad;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入圖片資源
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var PrefabLoad = /** @class */ (function (_super) {
        __extends(PrefabLoad, _super);
        function PrefabLoad(dataName, type, url, folder) {
            return _super.call(this, dataName, type, url, folder) || this;
        }
        /**
         * 將資源保存在管理器中
         * @param {string} dataName - 自訂義該資源名稱
         * @param {cc.AudioClip} asset - 資源
         * @protected
         */
        PrefabLoad.prototype.setResToManager = function (dataName, asset) {
            var e_4, _a;
            try {
                for (var asset_2 = __values(asset), asset_2_1 = asset_2.next(); !asset_2_1.done; asset_2_1 = asset_2.next()) {
                    var prefab = asset_2_1.value;
                    if (fcc.LoadResManager.instance.prefabRes.has(prefab.name)) {
                        fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, prefab.name + " prefab\u540D\u7A31\u91CD\u8907,\u8ACB\u6AA2\u67E5\u662F\u5426\u6709\u76F8\u540C\u540D\u7A31prefab");
                        return;
                    }
                    else {
                        fcc.LoadResManager.instance.prefabRes.set(prefab.name, prefab);
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (asset_2_1 && !asset_2_1.done && (_a = asset_2.return)) _a.call(asset_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
            //目的解決異步操作
            //當資源都載入到LoadManager時才回傳以載入完成的狀態
            this.updateProgressEnd();
        };
        return PrefabLoad;
    }(fcc.ABS.ALoadType));
    fcc.PrefabLoad = PrefabLoad;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入場景資源
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var SceneLoad = /** @class */ (function (_super) {
        __extends(SceneLoad, _super);
        function SceneLoad(dataName, type, url, folder) {
            return _super.call(this, dataName, type, url, folder) || this;
        }
        /**
         * 將資源保存在管理器中
         * @param {string} dataName - 自訂義該資源名稱
         * @param {cc.AudioClip} asset - 資源
         * @protected
         */
        SceneLoad.prototype.setResToManager = function (dataName, asset) {
            if (fcc.LoadResManager.instance.scriptRes.has(dataName))
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, dataName + " \u9375\u503C\u91CD\u8907,\u8ACB\u6AA2\u67E5\u8A72\u8CC7\u6E90\u662F\u5426\u5DF2\u52A0\u8F09\u904E");
            fcc.LoadResManager.instance.sceneRes.set(dataName, asset);
            //目的解決異步操作
            //當資源都載入到LoadManager時才回傳以載入完成的狀態
            this.updateProgressEnd();
        };
        return SceneLoad;
    }(fcc.ABS.ALoadType));
    fcc.SceneLoad = SceneLoad;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../ILoad/ALoadType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入骨骼动画資源
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var SpineLoad = /** @class */ (function (_super) {
        __extends(SpineLoad, _super);
        function SpineLoad(dataName, type, url, folder) {
            return _super.call(this, dataName, type, url, folder) || this;
        }
        /**
         * 將資源保存在管理器中
         * @param {string} dataName - 自訂義該資源名稱
         * @param {cc.SkeletonData} asset - 資源
         * @protected
         */
        SpineLoad.prototype.setResToManager = function (dataName, asset) {
            var e_5, _a, e_6, _b;
            if (fcc.LoadResManager.instance.spineRes.has(dataName)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "請檢察資源是否以載入過,鍵值重複");
            }
            fcc.LoadResManager.instance.spineRes.set(dataName, asset[0]);
            var lowerCase = dataName.toLowerCase();
            var checkGrid = lowerCase.match("grid");
            try {
                for (var asset_3 = __values(asset), asset_3_1 = asset_3.next(); !asset_3_1.done; asset_3_1 = asset_3.next()) {
                    var spine = asset_3_1.value;
                    var spineNames = Object.keys(spine.skeletonJson.animations);
                    var spineToMap = new Map();
                    try {
                        //取出spine動畫名稱
                        for (var spineNames_1 = (e_6 = void 0, __values(spineNames)), spineNames_1_1 = spineNames_1.next(); !spineNames_1_1.done; spineNames_1_1 = spineNames_1.next()) {
                            var spineName = spineNames_1_1.value;
                            //檢查是否有grid關鍵字,將把取spineName 的key 更換為數字
                            if (checkGrid) {
                                var spineNameToNumber = spineName.replace(/[^0-9]/ig, '');
                                //如果動畫內包含不含數字的的動畫名,將直接將動畫名整個保存成key
                                if (spineNameToNumber === "") {
                                    spineToMap.set(spineName, spineName);
                                }
                                else {
                                    if (spineToMap.has(spineNameToNumber)) {
                                        fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, spineName + " spine\u52D5\u756B\u53D6number\u6709\u8AA4,\u8ACB\u6AA2\u67E5\u8A72spine Animetion\u662F\u5426\u6709\u91CD\u8907\u6578\u5B57\u60C5\u6CC1");
                                    }
                                    spineToMap.set(spineNameToNumber, spineName);
                                }
                            }
                            else {
                                spineToMap.set(spineName, spineName);
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (spineNames_1_1 && !spineNames_1_1.done && (_b = spineNames_1.return)) _b.call(spineNames_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    //TODO:尚未想到要把grid動換資源放在哪
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (asset_3_1 && !asset_3_1.done && (_a = asset_3.return)) _a.call(asset_3);
                }
                finally { if (e_5) throw e_5.error; }
            }
            //目的解決異步操作
            //當資源都載入到LoadManager時才回傳以載入完成的狀態
            this.updateProgressEnd();
        };
        return SpineLoad;
    }(fcc.ABS.ALoadType));
    fcc.SpineLoad = SpineLoad;
})(fcc || (fcc = {}));
/// <reference path="../ILoad/ALoadType.ts" />
/// <reference path="../LoadResManager.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入文本資源,目前只能載入.CSV 檔案
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var TextLoad = /** @class */ (function (_super) {
        __extends(TextLoad, _super);
        function TextLoad(dataName, type, url, folder) {
            return _super.call(this, dataName, type, url, folder) || this;
        }
        /**
         *  目前只能傳入 .CSV 檔案,目前無從判斷該檔案副檔名
         *  因此需自行檢查回傳資料是否正確
         * @param {string} dataName - 自訂義該資源名稱
         * @param {cc.SkeletonData} asset - 資源
         * @protected
         */
        TextLoad.prototype.setResToManager = function (dataName, asset) {
            var e_7, _a;
            //清除回車
            var textArray = asset[0]["text"].split(/[\s\n]/);
            var textMap = new Map();
            try {
                for (var textArray_1 = __values(textArray), textArray_1_1 = textArray_1.next(); !textArray_1_1.done; textArray_1_1 = textArray_1.next()) {
                    var texts = textArray_1_1.value;
                    //切割 CSV特有的 ,
                    var array = texts.split(',');
                    //你可以在第三格放入註解,我只抓前兩格資料
                    var key = array[0];
                    var value = array[1];
                    if (key == "") {
                        continue;
                    }
                    //清除所有包含的 "" '' 等特殊符號
                    var processingvalue = value.replace(/['"]/g, '');
                    textMap.set(key, processingvalue);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (textArray_1_1 && !textArray_1_1.done && (_a = textArray_1.return)) _a.call(textArray_1);
                }
                finally { if (e_7) throw e_7.error; }
            }
            fcc.LoadResManager.instance.readFileRes.set(dataName, textMap);
            //目的解決異步操作
            //當資源都載入到LoadManager時才回傳以載入完成的狀態
            this.updateProgressEnd();
        };
        return TextLoad;
    }(fcc.ABS.ALoadType));
    fcc.TextLoad = TextLoad;
})(fcc || (fcc = {}));
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="./Enum/LoadEnum.ts" />
/// <reference path="./LoadScriptType/CSSLoad.ts" />
/// <reference path="./LoadScriptType/ScriptLoad.ts" />
/// <reference path="./LoadType/ImgLoad.ts" />
/// <reference path="./LoadType/MusicLoad.ts" />
/// <reference path="./LoadType/PrefabLoad.ts" />
/// <reference path="./LoadType/SceneLoad.ts" />
/// <reference path="./LoadType/SpineLoad.ts" />
/// <reference path="./LoadType/TextLoad.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 載入各類資源工廠
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var LoadTypeFactory = /** @class */ (function () {
        function LoadTypeFactory() {
            this.assetMethod = new Array();
        }
        LoadTypeFactory.prototype.loadBundle = function (dataName, type, url) {
            var _this = this;
            if (this.assetBundle)
                return;
            this.promise = new Promise(function () {
            });
            //加載Bundle資源時須先加載Bundle清單
            return new Promise(function (resolve) {
                if (!_this.isLoadBundle) {
                    _this.isLoadBundle = true;
                    cc.assetManager.loadBundle("secondaryRes", function (error, bundle) {
                        if (error) {
                            fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, error);
                        }
                        _this.assetBundle = bundle;
                        resolve();
                    });
                }
                else if (!_this.assetBundle && _this.isLoadBundle) {
                    _this.assetMethod.push(_this.checkLoadType.bind(_this, dataName, type, url, "secondaryRes"));
                }
            });
        };
        /**
         * 檢測當前Type,做各自對應的加載動作
         * @param dataName - 自訂義資源名稱
         * @param type - 資源類型
         * @param url - 資源位置
         */
        LoadTypeFactory.prototype.executeLoad = function (dataName, type, url) {
            this.checkLoadType(dataName, type, url, "resources");
        };
        /**
         * 執行Bundle載入動作
         * @param dataName - 自訂義資源名稱
         * @param type - 資源類型
         * @param url - 資源位置
         */
        LoadTypeFactory.prototype.executeLoadBundle = function (dataName, type, url) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadBundle(dataName, type, url)];
                        case 1:
                            _a.sent();
                            this.checkLoadType(dataName, type, url, "secondaryRes");
                            if (this.assetMethod.length != 0) {
                                while (this.assetMethod.length) {
                                    this.assetMethod[0]();
                                    this.assetMethod.shift();
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 確認當前資源類型,給相對應class 處理
         * @param {string} dataName - 自訂義資源名稱
         * @param {fcc.type.LoadType} type - 資源類型
         * @param {string} url - 資源位置
         * @param {string} folder - 資源父類資料夾,默認 resource
         * @private
         */
        LoadTypeFactory.prototype.checkLoadType = function (dataName, type, url, folder) {
            switch (type) {
                case fcc.type.LoadType.img:
                    new fcc.ImgLoad(dataName, cc.SpriteAtlas, url, folder).loadResources();
                    break;
                case fcc.type.LoadType.music:
                    new fcc.MusicLoad(dataName, cc.AudioClip, url, folder).loadResources();
                    break;
                case fcc.type.LoadType.prefab:
                    new fcc.PrefabLoad(dataName, cc.Prefab, url, folder).loadResources();
                    break;
                case fcc.type.LoadType.spine:
                    new fcc.SpineLoad(dataName, sp.SkeletonData, url, folder).loadResources();
                    break;
                case fcc.type.LoadType.scene:
                    new fcc.SceneLoad(dataName, cc.SceneAsset, null, folder).loadResources();
                    break;
                case fcc.type.LoadType.text:
                    new fcc.TextLoad(dataName, cc.TextAsset, url, folder).loadResources();
                    break;
                default:
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.TYPE_FW, "資源類型錯誤,尚無此類型載入方法");
            }
        };
        /**
         * 加載外部腳本
         * @param name - 檔名
         * @param type - 檔案類型
         * @param url - url地址
         */
        LoadTypeFactory.prototype.executeLoadExternalScript = function (name, type, url) {
            switch (type) {
                case fcc.type.LoadType.css:
                    new fcc.CSSLoad(name, "text/css", url).loadScript();
                    break;
                case fcc.type.LoadType.script:
                    new fcc.ScriptLoad(name, "text/javascript", url).loadScript();
                    break;
                default:
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.TYPE_FW, "LoadType 無法偵測");
            }
        };
        return LoadTypeFactory;
    }());
    fcc.LoadTypeFactory = LoadTypeFactory;
})(fcc || (fcc = {}));
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="./Enum/LoadEnum.ts" />
/// <reference path="./ILoad/ILoadFactory.ts" />
/// <reference path="./ILoad/ILoadResManager.ts" />
/// <reference path="./LoadTypeFactory.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 處理個別類型資源載入
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var LoadTypeHandler = /** @class */ (function () {
        function LoadTypeHandler(loadResManager) {
            this.loadResManager = loadResManager;
            this.factory = new fcc.LoadTypeFactory();
        }
        /**
         * 檢測當前Type,做各自對應的加載動作
         * @param name
         * @param type
         * @param url
         */
        LoadTypeHandler.prototype.executeLoad = function (name, type, url) {
            this.checkRepeatTheName(name);
            this.loadResManager.initialLoadState.set(name, null);
            this.factory.executeLoad(name, type, url);
        };
        /**
         * 執行Bundle載入動作
         * @param name
         * @param type
         * @param url
         */
        LoadTypeHandler.prototype.executeLoadBundle = function (name, type, url) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.checkRepeatTheName(name);
                            this.loadResManager.secondaryLoadState.set(name, null);
                            return [4 /*yield*/, this.factory.executeLoadBundle(name, type, url)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 檢查重複命名
         * @param {string} name
         * @private
         */
        LoadTypeHandler.prototype.checkRepeatTheName = function (name) {
            if (this.loadResManager.initialLoadState.has(name)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, name + " \u6B64(\u4E3B\u8CC7\u6E90)\u5DF2\u8F09\u5165\u904E\u4E86,\u6216\u540D\u7A31\u91CD\u8907,\u8ACB\u6AA2\u5BDF");
            }
            if (this.loadResManager.secondaryLoadState.has(name)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, name + " \u6B64(\u6B21\u8CC7\u6E90)\u5DF2\u8F09\u5165\u904E\u4E86,\u6216\u540D\u7A31\u91CD\u8907,\u8ACB\u6AA2\u5BDF");
            }
        };
        /**
         * 加載外部腳本
         * @param {string} name
         * @param {LoadType} type
         * @param {string} url
         */
        LoadTypeHandler.prototype.executeLoadExternalScript = function (name, type, url) {
            this.factory.executeLoadExternalScript(name, type, url);
        };
        return LoadTypeHandler;
    }());
    fcc.LoadTypeHandler = LoadTypeHandler;
})(fcc || (fcc = {}));
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="../Global/Util.ts" />
/// <reference path="./Enum/LoadEnum.ts" />
/// <reference path="./ILoad/ILoadResManager.ts" />
/// <reference path="./LoadTypeHandler.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 資源管理者 : 加載資源,保存資源,或取當前加載進度
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var LoadResManager = /** @class */ (function () {
        function LoadResManager(configManager) {
            this.configManager = configManager;
            this.loadTypeHandler = new fcc.LoadTypeHandler(this); //配發要用哪個class執行載入動作
            this._initialLoadState = new Map(); //主加載狀態
            this._secondaryLoadState = new Map(); //次加載狀態
            this._imgRes = new Map(); //圖片
            this._spineRes = new Map(); //骨架
            this._readFileRes = new Map(); //text文件
            this._prefabRes = new Map(); //預載體
            this.callFun = new Map(); //callback方法
            this._musicRes = new Map(); //音樂
            this._scriptRes = new Set(); //外部腳本保存URL地址,單存判斷是否重複加載
            this._sceneRes = new Map(); //保存scene場場景資源
            this.count = 0; //初始要載入數量
            this.allProgress = 0; //初始加載進度
            this.beforeProgress = 0; //初始上次加載的進度
            this.allProgressEndCount = 0; //因精準度問題,額外判斷是否所有資源都加載完畢
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案產生一次該class
         */
        LoadResManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new LoadResManager(configManager);
                fcc.loadMgr = this._instance;
            }
        };
        Object.defineProperty(LoadResManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 主資源加載物件,監聽是否有callback,隨之返回該狀態
         * @param name
         * @param progress 又加載了多少
         * @param state 該物件加載到幾趴
         */
        LoadResManager.prototype.loadMainEventCallback = function (name, progress, state) {
            this.onlyResEventCallback(name, state);
            //當前總加載進度
            this.allProgress += progress / this.count;
            if (this.allProgress >= 1)
                this.allProgress = 0.99; //精度問題,不回傳1
            //因為浮點數精度,由這裏額外判斷所有資源已加載完畢時,加載進度等於1
            if (state == 1) {
                this.allProgressEndCount += 1;
                if (this.allProgressEndCount == this.count) {
                    this.allProgress = 1;
                }
            }
            //當前所有加載的總進度
            if (this.callFun.has(null)) {
                //預防多個重複進度回傳
                //判斷與上一個進度是一樣的話,將不執行回傳,等待有新進度近來
                var checkProgress = (fcc.global.Util.roundDown(this.beforeProgress, 2) ==
                    fcc.global.Util.roundDown(this.allProgress, 2));
                if (checkProgress) {
                    return;
                }
                else {
                    this.beforeProgress = this.allProgress;
                    //回傳當前進度,將精度將低為小數點後兩位
                    this.callFun.get(null)(fcc.global.Util.roundDown(this.allProgress, 2));
                    if (this.allProgress >= 1) {
                        //當全部加載完後,清除當前加載多少件東西的計數
                        this.count = 0;
                        //事件結束,清除該是保存的function
                        this.callFun.delete(null);
                    }
                }
            }
        };
        /**
         * 次資源加載物件,監聽是否有callback,隨之返回該狀態
         * 注意,該狀態無總資源監聽回傳事件
         * @param {string} name
         * @param {number} state
         */
        LoadResManager.prototype.loadSecondaryEventCallback = function (name, state) {
            this.onlyResEventCallback(name, state);
        };
        /**
         * 單一資源返回判斷,用戶是否有添加callback參數
         * @param {string} name
         * @param {number} state
         * @private
         */
        LoadResManager.prototype.onlyResEventCallback = function (name, state) {
            //如果有綁訂的回傳方法時,將回傳該資源當前的加載進度
            if (this.callFun.has(name)) {
                this.callFun.get(name)(state);
                if (state == 1) {
                    //事件結束,清除該是保存的function
                    this.callFun.delete(name);
                }
            }
        };
        /**
         * 加載該資料夾底下所有資源 注意: 需存放於 resources中
         * @param {string} name : 自訂義拿取資源時的名稱
         * @param {LoadType} type : 要獲取的資源類型
         * @param {string} url : 要獲取的資源位置
         * @param {boolean} isLanguageUsed : 是否要使用語系位置
         * @return {this}
         */
        LoadResManager.prototype.loadAsset = function (name, type, url, isLanguageUsed) {
            this.count += 1;
            if (isLanguageUsed) {
                url = url + "/" + this.configManager.language;
            }
            this.loadTypeHandler.executeLoad(name, type, url);
            return this;
        };
        /**
         * 加載 該 assetBundle 底下資源
         * 使用此方法者,加載狀態存放次加載中 secondaryLoadState
         * 注意:須於UI勾選配置為Bundle資料夾
         * @param {string} name : 自訂義拿取資源時的名稱
         * @param {LoadType} type : 要獲取的資源類型
         * @param {string} url : 要獲取的資源位置
         * @param {boolean} isLanguageUsed : 是否要使用語系位置
         */
        LoadResManager.prototype.loadBundle = function (name, type, url, isLanguageUsed) {
            if (isLanguageUsed) {
                url = url + "/" + this.configManager.language;
            }
            this.loadTypeHandler.executeLoadBundle(name, type, url).then();
            return this;
        };
        /**
         * 保存使用者要callback的方法,當有回傳進度時將透過 loadEventCallback方法回傳進度
         * @param callFun
         * @param resName
         */
        LoadResManager.prototype.callback = function (callFun, resName) {
            if (resName) {
                if (this.callFun.has(resName)) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "如果拿取該資源進度,請勿重複callback");
                    return;
                }
                this.callFun.set(resName, callFun);
                return this;
            }
            else {
                if (this.callFun.has(null)) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LOAD_FW, "如果拿取總進度,請勿在之前資源尚未加載完前,重複callback");
                    return;
                }
                this.callFun.set(null, callFun);
            }
        };
        /**
         * 查看該資源是否已加載完畢
         * @param name
         * @param isMainResources
         */
        LoadResManager.prototype.getLoadState = function (name, isMainResources) {
            if (isMainResources) {
                return this._initialLoadState.get(name) == 1;
            }
            else {
                return this._initialLoadState.get(name) == 1;
            }
        };
        /**
         * 加載外部腳本
         * @param name
         * @param type
         * @param url
         */
        LoadResManager.prototype.loadExternalScript = function (name, type, url) {
            this.loadTypeHandler.executeLoadExternalScript(name, type, url);
            return this;
        };
        /**
         * 重置
         */
        LoadResManager.prototype.reset = function () {
            LoadResManager._instance = null;
        };
        Object.defineProperty(LoadResManager.prototype, "initialLoadState", {
            //--------------------------------------getter------------------------------------
            get: function () {
                return this._initialLoadState;
            },
            //--------------------------------------setter------------------------------------
            set: function (value) {
                this._initialLoadState = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "secondaryLoadState", {
            get: function () {
                return this._secondaryLoadState;
            },
            set: function (value) {
                this._secondaryLoadState = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "imgRes", {
            get: function () {
                return this._imgRes;
            },
            set: function (value) {
                this._imgRes = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "spineRes", {
            get: function () {
                return this._spineRes;
            },
            set: function (value) {
                this._spineRes = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "readFileRes", {
            get: function () {
                return this._readFileRes;
            },
            set: function (value) {
                this._readFileRes = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "prefabRes", {
            get: function () {
                return this._prefabRes;
            },
            set: function (value) {
                this._prefabRes = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "musicRes", {
            get: function () {
                return this._musicRes;
            },
            set: function (value) {
                this._musicRes = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "scriptRes", {
            get: function () {
                return this._scriptRes;
            },
            set: function (value) {
                this._scriptRes = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LoadResManager.prototype, "sceneRes", {
            get: function () {
                return this._sceneRes;
            },
            set: function (value) {
                this._sceneRes = value;
            },
            enumerable: false,
            configurable: true
        });
        return LoadResManager;
    }());
    fcc.LoadResManager = LoadResManager;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../../Load/LoadResManager.ts" />
var fcc;
(function (fcc) {
    var MusicStateType;
    (function (MusicStateType) {
        MusicStateType[MusicStateType["STOP"] = -1] = "STOP";
        MusicStateType[MusicStateType["PLAYING"] = 1] = "PLAYING";
        MusicStateType[MusicStateType["PAUSE"] = 2] = "PAUSE";
    })(MusicStateType || (MusicStateType = {}));
    /**
     * @Author XIAO-LI-PIN
     * @Description 音樂撥放|暫停控制器,跟音效類稍微不同,只保存當下一個MusicID
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var MusicController = /** @class */ (function () {
        function MusicController() {
            this.musicID = null;
        }
        /**
         * 撥放背景音樂,並配合享元資料,作相對應的撥放模式處理
         * @param {string} name
         * @param {Map<string, any>} data
         */
        MusicController.prototype.play = function (name, data) {
            var volume = data.get("volume"); //音量
            var loop = data.get("loop"); //是否循環
            //獲取當前音樂撥放狀態,-1 無撥放 , 1 撥放中  2 暫停中
            var state = cc.audioEngine.getState(this.musicID);
            if (!fcc.LoadResManager.instance.musicRes.has(name)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.AUDIO_FW, name + " \u7121\u6B64\u8CC7\u6E90,\u8ACB\u6AA2\u5BDF\u8CC7\u6E90\u985E musicRes\u5167\u7684\u8CC7\u6E90\u662F\u5426\u932F\u8AA4");
                return;
            }
            //如果該音樂是暫停模式,回復撥放
            if (state == MusicStateType.PAUSE) {
                cc.audioEngine.resume(this.musicID);
                return;
            }
            //如果上一首背景音樂正在撥放,先暫停
            if (state == MusicStateType.PLAYING) {
                this.stop();
            }
            var audioClip = fcc.LoadResManager.instance.musicRes.get(name);
            var musicID = cc.audioEngine.playMusic(audioClip, loop);
            cc.audioEngine.setVolume(musicID, volume);
            this.musicID = musicID;
        };
        /**
         *停止背景音樂
         */
        MusicController.prototype.stop = function () {
            cc.audioEngine.setVolume(this.musicID, 0);
            cc.audioEngine.stop(this.musicID);
        };
        /**
         * 暫停背景音樂
         */
        MusicController.prototype.pause = function () {
            if (cc.audioEngine.getState(this.musicID) != cc.audioEngine.AudioState.PLAYING)
                return;
            cc.audioEngine.pause(this.musicID);
        };
        return MusicController;
    }());
    fcc.MusicController = MusicController;
})(fcc || (fcc = {}));
/// <reference path="../../Error/Enum/ErrorType.ts" />
/// <reference path="../../Error/ErrorManager.ts" />
/// <reference path="../../Load/LoadResManager.ts" />
/// <reference path="../Enum/AudioStateType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 效果音效撥放|暫停控制器
     * @Date 2021-04-14 下午 20:24
     * @Version 1.1
     */
    var EffectController = /** @class */ (function () {
        function EffectController() {
            this.effectID = new Map();
        }
        /**
         * 撥放效果音效,並配合享元資料,作相對應的撥放模式處理
         * @param {string} name
         * @param {Map<string, any>} data : 撥放模式資料
         */
        EffectController.prototype.play = function (name, data) {
            var volume = data.get("volume"); //音量
            var canSuperimpose = data.get("canSuperimpose"); //可否疊加撥放
            var loop = data.get("loop"); //循環狀態
            var id = this.effectID.get(name); //該音樂ID
            var state;
            cc.audioEngine.getState(id) == cc.audioEngine.AudioState.ERROR ? state = false : state = true; //判斷該音樂是否在正撥放
            if (!fcc.LoadResManager.instance.musicRes.has(name)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.AUDIO_FW, name + " \u7121\u6B64\u8CC7\u6E90,\u8ACB\u6AA2\u5BDF\u8CC7\u6E90\u985E musicRes\u5167\u7684\u8CC7\u6E90\u662F\u5426\u932F\u8AA4");
                return;
            }
            if (canSuperimpose === fcc.type.AudioStateType.NOT_PLAYING && state)
                return; //如果當前正在撥放,將直接離開
            if (canSuperimpose === fcc.type.AudioStateType.CLEAR_TO_REPLAY && state) { //如果當前正在撥放,將直接停止正在撥放的音樂,並重新撥放
                cc.audioEngine.stop(id);
            }
            var audioClip = fcc.LoadResManager.instance.musicRes.get(name);
            var effID = cc.audioEngine.playEffect(audioClip, loop);
            cc.audioEngine.setVolume(effID, volume);
            this.effectID.set(name, effID);
        };
        /**
         * 停止該音樂,並清除該Map effectID
         * @param {string} name
         */
        EffectController.prototype.stop = function (name) {
            if (!this.effectID.has(name)) {
                return;
            }
            cc.audioEngine.stop(this.effectID.get(name));
            this.effectID.delete(name);
        };
        /**
         * 停止所有音效,並清除整個Map effectID
         */
        EffectController.prototype.stopAll = function () {
            var e_8, _a;
            try {
                for (var _b = __values(this.effectID.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    cc.audioEngine.stop(this.effectID.get(key));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_8) throw e_8.error; }
            }
            this.effectID.clear();
        };
        return EffectController;
    }());
    fcc.EffectController = EffectController;
})(fcc || (fcc = {}));
/// <reference path="./IAudio/IAudioFactory.ts" />
/// <reference path="./IAudio/IAudioManager.ts" />
/// <reference path="./AudioType/MusicController.ts" />
/// <reference path="./AudioType/EffectController.ts" />
/// <reference path="./Enum/AudioStateType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 音樂工廠類,派發音樂事件
     * @Date 2021-05-13 上午 10:24
     * @Version 1.1
     */
    var AudioFactory = /** @class */ (function () {
        function AudioFactory(audioManager, configManager) {
            this.audioManager = audioManager; //雙向綁定
            this.configManager = configManager; //雙向綁定
            this.musicVolume = this.configManager.musicVolume; //初始音量
            this.effectVolume = this.configManager.effectVolume; //初始音量
            this.canSuperimpose = false; //初始無Loop的音樂是否可以疊加
            this.musicOnMute = this.configManager.isMusicOnMute; //初始音樂是否打開
            this.effectOnMute = this.configManager.isEffectOnMute; //初始效果音是否打開
            this.loop = false; //初始音樂循環
            this.musicData = new Map(); //初始享元模式的音樂
            this.effectData = new Map(); //初始享元模式的效果音效
            this.musicController = new fcc.MusicController(); //初始播放Music音樂類
            this.effectController = new fcc.EffectController(); //初始播放Effect音效類
            this.initializeData(); //初始化享元預設撥放模式
        }
        /**
         * 初始化享元預設撥放模式
         */
        AudioFactory.prototype.initializeData = function () {
            this.musicNormalData = new Map();
            this.effectNormalData = new Map();
            this.musicNormalData.set("volume", this.musicVolume);
            this.musicNormalData.set("loop", this.loop);
            this.effectNormalData.set("canSuperimpose", fcc.type.AudioStateType.CLEAR_TO_REPLAY);
            this.effectNormalData.set("volume", this.effectVolume);
            this.effectNormalData.set("loop", this.loop);
        };
        /**
         * 保存該背景音樂撥放模式設定
         * @param {string} name - 音樂檔名稱
         * @param {number} volume - 音量
         * @param {boolean} loop - 是否循環
         */
        AudioFactory.prototype.settingMusic = function (name, volume, loop) {
            if (volume === void 0) { volume = this.musicVolume; }
            if (loop === void 0) { loop = this.loop; }
            var data = new Map();
            data.set("volume", volume);
            data.set("loop", loop);
            this.musicData.set(name, data);
        };
        /**
         * 保存該效果音效撥放模式設定
         * @param {string} name -音樂檔名稱
         * @param {AudioStateType} canSuperimpose - 是否疊加撥放
         * @param {number} volume - 音量
         * @param {boolean} loop - 是否循環
         */
        AudioFactory.prototype.settingEffect = function (name, canSuperimpose, volume, loop) {
            if (canSuperimpose === void 0) { canSuperimpose = fcc.type.AudioStateType.NOT_PLAYING; }
            if (volume === void 0) { volume = this.musicVolume; }
            if (loop === void 0) { loop = this.loop; }
            var data = new Map();
            data.set("canSuperimpose", canSuperimpose);
            data.set("volume", volume);
            data.set("loop", loop);
            this.effectData.set(name, data);
        };
        /**
         * 撥放背景音樂
         * 如果拿取不到享元撥放資料,將拿取預設資料
         * @param {string} name - 音樂檔名
         */
        AudioFactory.prototype.musicPlay = function (name) {
            if (!name.trim())
                return; //檔名空值判斷
            if (this.audioManager.musicOnMute)
                return; //如果當前為靜音模式
            if (!this.musicData.has(name)) { //判斷是否該音樂有撥放共用資料
                this.musicData.set(name, this.musicNormalData); //保存預設資料
                this.musicController.play(name, this.musicNormalData);
            }
            else {
                this.musicController.play(name, this.musicData.get(name));
            }
        };
        /**
         * 撥放效果音效
         * 如果拿取不到享元撥放資料,將拿取預設資料
         * @param {string} name - 音樂檔名
         */
        AudioFactory.prototype.effectPlay = function (name) {
            if (!name.trim())
                return; //檔名空值判斷
            if (this.audioManager.effectOnMute)
                return; //如果當前為靜音模式
            if (!this.effectData.has(name)) { //判斷是否該音樂有撥放資料
                this.effectData.set(name, this.effectNormalData); //保存預設資料
                this.effectController.play(name, this.effectNormalData);
            }
            else {
                this.effectController.play(name, this.effectData.get(name));
            }
        };
        /**
         * 停止背景音樂
         */
        AudioFactory.prototype.musicStop = function () {
            this.musicController.stop();
        };
        /**
         * 暫停背景音樂
         */
        AudioFactory.prototype.musicPause = function () {
            this.musicController.pause();
        };
        /**
         * 停止效果音校
         * @param {string} name - 音樂檔名
         */
        AudioFactory.prototype.effectStop = function (name) {
            this.effectController.stop(name);
        };
        /**
         * 停止所有效果音效
         */
        AudioFactory.prototype.effectStopAll = function () {
            this.effectController.stopAll();
        };
        /**
         * 獲取該音樂撥放模式,如果返回NUll將照原預設
         * @param {string} name - 音樂檔名
         * @returns {Map<string, string | boolean | number>}
         */
        AudioFactory.prototype.getMusicState = function (name) {
            return this.musicData.get(name);
        };
        /**
         * 獲取該音效撥放模式,如果返回NUll將照原預設
         * @param {string} name - 音樂檔名
         * @returns {Map<string, string | boolean | number>}
         */
        AudioFactory.prototype.getEffectState = function (name) {
            return this.effectData.get(name);
        };
        return AudioFactory;
    }());
    fcc.AudioFactory = AudioFactory;
})(fcc || (fcc = {}));
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="./AudioFactory.ts" />
/// <reference path="./IAudio/IAudioManager.ts" />
/// <reference path="./Enum/AudioStateType.ts" />
/// <reference path="./Enum/AudioStateType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 音樂管理器,初始設定各音樂狀態,保存當前撥放音量
     * @Date 2021-05-13 上午 10:24
     * @Version 1.1
     */
    var AudioManager = /** @class */ (function () {
        function AudioManager(configManager) {
            this.configManager = configManager;
            this.factory = new fcc.AudioFactory(this, configManager);
            this._effectOnMute = this.configManager.isEffectOnMute;
            this._musicOnMute = this.configManager.isMusicOnMute;
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案只有一次產生此class
         */
        AudioManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new AudioManager(configManager);
                fcc.audioMgr = this._instance;
            }
        };
        Object.defineProperty(AudioManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.AUDIO_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 額外對該音樂做設定,可以不做設定,將會依照默認設定自動設定
         * volume : 默認為 Config 內的音量參數
         * loop : 默認 false
         * @param {string} name : 音樂名稱
         * @param {number} volume : 音量 0~1
         * @param {boolean} loop : 是否重複撥放
         * @return {this}
         */
        AudioManager.prototype.settingMusic = function (name, volume, loop) {
            this.factory.settingMusic(name, volume, loop);
            return this;
        };
        /**
         * 額外對該音效做設定,你可以不做設定,將會依照默認設定自動設定
         * canSuperimpose : 默認 AudioStateType.CLEAR_TO_REPLAY
         * volume : 默認為 Config 內的音量參數
         * loop :默認為 false
         * @param {string} name : 音效檔名
         * @param {AudioStateType} canSuperimpose : 能否疊加
         * @param {number} volume : 音量 0~1
         * @param {boolean} loop : 是否重複撥放
         * @return {this}
         */
        AudioManager.prototype.settingEffect = function (name, canSuperimpose, volume, loop) {
            if (canSuperimpose === fcc.type.AudioStateType.SUPERIMPOSE && loop) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.AUDIO_FW, name + " \u4F7F\u7528\u758A\u52A0\u6548\u679C\u6642\u4E0D\u5EFA\u8B70\u4F7F\u7528\u5FAA\u74B0\u64A5\u653E");
            }
            this.factory.settingEffect(name, canSuperimpose, volume, loop);
            return this;
        };
        /**
         * 撥放音樂,將會依照當初設定的參數進行播放
         * 若無參數設定撥放模式,依照默認參數撥放
         * @param {string} name : 音樂檔名
         */
        AudioManager.prototype.musicPlay = function (name) {
            this.factory.musicPlay(name);
        };
        /**
         * 撥放音效,將會依照當初設定的參數進行播放
         * 若無參數設定撥放模式,依照默認參數撥放
         * @param {string} name : 音效檔名
         */
        AudioManager.prototype.effectPlay = function (name) {
            this.factory.effectPlay(name);
        };
        /**
         * 停止音樂
         */
        AudioManager.prototype.musicStop = function () {
            this.factory.musicStop();
        };
        /**
         * 暫停音樂
         */
        AudioManager.prototype.musicPause = function () {
            this.factory.musicPause();
        };
        /**
         * 停止音效
         * @param {string} name : 音效檔名
         */
        AudioManager.prototype.effectStop = function (name) {
            this.factory.effectStop(name);
        };
        /**
         * 停止所有音效
         */
        AudioManager.prototype.effectStopAll = function () {
            this.factory.effectStopAll();
        };
        /**
         * 獲取撥放的狀態
         * @param {string} name : 音效檔名
         * @return {Map<string, string | boolean | number>} : 撥放設定參數
         */
        AudioManager.prototype.getMusicState = function (name) {
            return this.factory.getMusicState(name);
        };
        /**
         * 獲取撥放的狀態
         * @param {string} name : 音樂檔名
         * @return {Map<string, string | fcc.type.AudioStateType |boolean | number>} : 撥放設定參數
         */
        AudioManager.prototype.getEffectState = function (name) {
            return this.factory.getEffectState(name);
        };
        /**
         * 更新當前是否靜音模式
         * @return {boolean} 當前是否靜音
         */
        AudioManager.prototype.updateEffectOnMute = function () {
            this._effectOnMute = !this._effectOnMute;
            if (this._effectOnMute) {
                this.factory.effectStopAll();
            }
            return this._effectOnMute;
        };
        /**
         * 更新當前是否靜音模式
         * @return {boolean} 當前是否靜音
         */
        AudioManager.prototype.updateMusicOnMute = function () {
            this._musicOnMute = !this._musicOnMute;
            if (this._musicOnMute) {
                this.musicPause();
            }
            return this._musicOnMute;
        };
        Object.defineProperty(AudioManager.prototype, "effectOnMute", {
            /**
             * 當前是否靜音背景音樂
             * @returns {boolean}
             */
            get: function () {
                return this._effectOnMute;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AudioManager.prototype, "musicOnMute", {
            /**
             * 當前是否靜音效果音效
             * @returns {boolean}
             */
            get: function () {
                return this._musicOnMute;
            },
            enumerable: false,
            configurable: true
        });
        return AudioManager;
    }());
    fcc.AudioManager = AudioManager;
    /**
     * 裝飾器
     * 撥放背景音樂
     * @param name {string} : 音樂檔名
     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}
     * @constructor
     */
    function Music(name) {
        return function (target, key, descriptor) {
            descriptor.enumerable = true;
            var method = descriptor.value;
            descriptor.value = function () {
                var any = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    any[_i] = arguments[_i];
                }
                AudioManager.instance.musicPlay(name);
                return method.call.apply(method, __spreadArray([this], __read(any)));
            };
        };
    }
    fcc.Music = Music;
    /**
     * 裝飾器
     * 停止背景音樂
     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}
     * @constructor
     */
    function MusicStop() {
        return function (target, key, descriptor) {
            descriptor.enumerable = true;
            var method = descriptor.value;
            descriptor.value = function () {
                var any = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    any[_i] = arguments[_i];
                }
                AudioManager.instance.musicStop();
                return method.call.apply(method, __spreadArray([this], __read(any)));
            };
        };
    }
    fcc.MusicStop = MusicStop;
    /**
     * 裝飾器
     * 撥放效果音效
     * @param name[] {string} : 音樂檔名
     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}
     * @constructor
     */
    function Effect() {
        var name = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            name[_i] = arguments[_i];
        }
        return function (target, key, descriptor) {
            descriptor.enumerable = true;
            var method = descriptor.value;
            descriptor.value = function () {
                var any = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    any[_i] = arguments[_i];
                }
                name.forEach(function (name) {
                    AudioManager.instance.effectPlay(name);
                });
                return method.call.apply(method, __spreadArray([this], __read(any)));
            };
        };
    }
    fcc.Effect = Effect;
    /**
     * 裝飾器
     * 暫停效果音效
     * @param name[] {string} : 音樂檔名
     * @returns {(target: any, key: string, descriptor: PropertyDescriptor) => void}
     * @constructor
     */
    function EffectStop() {
        var name = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            name[_i] = arguments[_i];
        }
        return function (target, key, descriptor) {
            descriptor.enumerable = true;
            var method = descriptor.value;
            descriptor.value = function () {
                var any = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    any[_i] = arguments[_i];
                }
                name.forEach(function (name) {
                    AudioManager.instance.effectStop(name);
                });
                return method.call.apply(method, __spreadArray([this], __read(any)));
            };
        };
    }
    fcc.EffectStop = EffectStop;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var CNY = {
        fontSize: 36,
        lineHeight: 46,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "微軟正黑體"
    };
    var NTD = {
        fontSize: 36,
        lineHeight: 46,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "微軟正黑體"
    };
    var USD = {
        fontSize: 30,
        lineHeight: 40,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "Arial Unicode MS,Arial"
    };
    var VND = {
        fontSize: 30,
        lineHeight: 40,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "Arial Unicode MS,Arial"
    };
    var THB = {
        fontSize: 30,
        lineHeight: 46,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "Arial Unicode MS,Arial"
    };
    var IDR = {
        fontSize: 30,
        lineHeight: 40,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "Arial Unicode MS,Arial"
    };
    var MYR = {
        fontSize: 30,
        lineHeight: 40,
        textScale: {
            default: 1,
            title: 1.2,
            text: 0.8
        },
        fontFamily: "Arial Unicode MS,Arial"
    };
    /**
     * @Author 蕭立品
     * @Description 語系管理器 : 保存當前語言本,語系樣式
     * @Date 2021-06-28 下午 12:06
     * @Version 1.0
     */
    var LanguageManager = /** @class */ (function () {
        function LanguageManager(configManager) {
            this.configManager = configManager;
            this.style = new Map(); //初始各語系樣式
            this.nowLanguageLabel = new Map(); //初始當前綁定的所有label
            this.initDefaultStyle(); //初始化預設語系樣式
            this.nowLang = this.configManager.language; //初始當前語系
        }
        /**
         *  懶漢加載
         *  初始化,只讓一個專案只有一次產生此class
         */
        LanguageManager.setInstance = function (configManager) {
            if (!this._instance) {
                this._instance = new LanguageManager(configManager);
                fcc.languageMgr = this._instance;
            }
        };
        Object.defineProperty(LanguageManager, "instance", {
            /**
             *  獲取已經初始化的靜態實例class
             */
            get: function () {
                if (!this._instance) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.AUDIO_FW, "該類尚未實例化");
                    return;
                }
                return this._instance;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 添加默認樣式
         * @private
         */
        LanguageManager.prototype.initDefaultStyle = function () {
            this.style.set(fcc.type.LanguageType.TAIWAN, NTD);
            this.style.set(fcc.type.LanguageType.CHINESE, CNY);
            this.style.set(fcc.type.LanguageType.AMERICA, USD);
            this.style.set(fcc.type.LanguageType.INDONESIA, IDR);
            this.style.set(fcc.type.LanguageType.TAIWAN, NTD);
            this.style.set(fcc.type.LanguageType.MALAYSIA, MYR);
            this.style.set(fcc.type.LanguageType.VIETNAM, VND);
        };
        /**
         * 額外添加新的語系樣式
         */
        LanguageManager.prototype.addStyle = function (key, style) {
            this.style.set(key, style);
        };
        /**
         * 更新語系,會更新當前所有已經綁定的 cc.Label
         * @param {string | fcc.type.LanguageType} language - 要更新的語系
         */
        LanguageManager.prototype.updateLanguage = function (language) {
            var e_9, _a;
            if (this.nowLang != language) {
                this.nowLang = language;
                try {
                    for (var _b = __values(this.nowLanguageLabel.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var label = _c.value;
                        var textKey = this.nowLanguageLabel.get(label);
                        this.updateText(label, textKey);
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
            }
        };
        /**
         * 添加當前語系
         */
        LanguageManager.prototype.setLanguage = function () {
            if (!this.languageCache) {
                this.reLoadNowLanguage();
            }
        };
        /**
         * 獲取當前語系
         * @return {string}
         */
        LanguageManager.prototype.getLanguage = function () {
            return this.nowLang;
        };
        LanguageManager.prototype.getText = function (key) {
            if (key) {
                return this.languageCache[key];
            }
            else {
                return this.languageCache;
            }
        };
        /**
         * 重新載入語系
         */
        LanguageManager.prototype.reLoadNowLanguage = function () {
            try {
                this.languageCache = window.language_Mode[this.nowLang];
            }
            catch (e) {
                console.log("window.language_Mode 查找不到該語系", e);
            }
        };
        /**
         * TODO 清除無用的語系緩存
         */
        LanguageManager.prototype.removeStringBuffer = function () {
            //TODO
        };
        LanguageManager.prototype.updateText = function (target, textKey) {
            target.string = this.getText(textKey);
            this.labelCache.push(target);
            return this;
        };
        /**
         * 更新所有透過 updateText更新的組件,更新該組件樣是
         * 注意 : 須配合 updateText 一起使用
         */
        LanguageManager.prototype.updateStyle = function () {
            var e_10, _a;
            var language = this.nowLang;
            if (!this.style.has(this.nowLang)) {
                language = fcc.type.LanguageType.AMERICA;
            }
            var fontFamily = this.style.get(language).fontFamily;
            var fontSize = this.style.get(language).fontSize;
            var lineHeight = this.style.get(language).lineHeight;
            try {
                for (var _b = __values(this.labelCache), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var label = _c.value;
                    label.fontFamily = fontFamily;
                    label.fontSize = fontSize;
                    label.lineHeight = lineHeight;
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_10) throw e_10.error; }
            }
            this.labelCache.length = 0;
        };
        return LanguageManager;
    }());
    fcc.LanguageManager = LanguageManager;
})(fcc || (fcc = {}));
/// <reference path="./Animation/AnimationManager.ts" />
/// <reference path="./Audio/AudioManager.ts" />
/// <reference path="./Config/SlotConfigManager.ts" />
/// <reference path="./Error/ErrorManager.ts" />
/// <reference path="./Language/LanguageManager.ts" />
/// <reference path="./Listener/EventManager.ts" />
/// <reference path="./Load/LoadResManager.ts" />
/// <reference path="./Process/ProcessManager.ts" />
/// <reference path="./Scene/SceneManager.ts" />
/// <reference path="./Slot/SlotStyleManager.ts" />
var fcc;
(function (fcc) {
    /**
     * 遊戲初始設定,並透過builder加載所有Manager
     * @return {fcc.IF.IConfigManager}
     * @private
     */
    fcc.configMgr = fcc.SlotConfigManager.instance;
    // export function LoadMgr(): IF.ILoadResManager {
    //     return LoadResManager.instance;
    // }
    /**
     * 網路管理 : 傳送封包,接收封包
     * @return {fcc.IF.ILoadResManager}
     * @private
     */
    function networkMgr() {
        return null;
    }
    fcc.networkMgr = networkMgr;
})(fcc || (fcc = {}));
//
// /**
//  * 擴展至全域,cocos規定
//  * @type {fcc}
//  */
// globalThis.fcc = fcc;
var fcc;
(function (fcc) {
    var global;
    (function (global) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 共用:按鈕類方法
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var Button = /** @class */ (function () {
            function Button() {
            }
            /**
             * 對該button添加監聽事件
             * @param {cc.Button} buttonNode - 按鈕組件
             * @param {string} methodName - 該按鈕綁定的方法名稱
             * @param self - 該方法存在的位置
             * @param customEventData - 回傳值
             */
            Button.addButtonEvent = function (buttonNode, methodName, self, customEventData) {
                //手動添加監聽事件
                var thisNode = self.node;
                var scriptName = cc.js.getClassName(self);
                var click_event = new cc.Component.EventHandler(); //給予一個事件
                click_event.target = thisNode; //父類節點,注意父類size不能為(0,0)
                click_event.component = scriptName; //該父類的script
                click_event.handler = methodName; //對事件添加function,名稱是字串
                if (customEventData || customEventData == 0) {
                    click_event.customEventData = customEventData; //添加回調參數
                }
                // this.node.clickEvents = [click_event];//一次添加多個監聽事件
                buttonNode.clickEvents.push(click_event); //當點擊後觸發事件
            };
            /**
             * 禁用button
             * @param {cc.Button} button - 按鈕組件
             */
            Button.disableButton = function (button) {
                button.interactable = false;
            };
            /**
             * 啟用button
             * @param {cc.Button}button - 按鈕組件
             */
            Button.enableButton = function (button) {
                button.interactable = true;
            };
            /**
             * 對該node 添加 TOUCH_START 事件
             * @param {cc.Node} node - 要綁定的事件物件
             * @param {function} method - 觸發事件的方法
             * @param {this} self - 該方法存在的位置
             * @param {boolean} useCapture : "是否關閉多點觸控功能"
             */
            Button.addTouchStartEvent = function (node, method, self, useCapture) {
                node.on(cc.Node.EventType.TOUCH_START, method, self, useCapture);
            };
            /**
             * 對該node 關閉 TOUCH_START 事件
             * @param {cc.Node} node - 要綁定的事件物件
             * @param {Function} method - 觸發事件的方法
             * @param {this} self - 該方法存在的位置
             * @param {boolean} useCapture - 是否關閉多點觸控功能
             */
            Button.offTouchStartEvent = function (node, method, self, useCapture) {
                node.off(cc.Node.EventType.TOUCH_START, method, self, useCapture);
            };
            return Button;
        }());
        global.Button = Button;
    })(global = fcc.global || (fcc.global = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var global;
    (function (global) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 共用:Prefab方法
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var Prefab = /** @class */ (function () {
            function Prefab() {
            }
            /**
             * 加載單一一個Prefab,並對該Prefab添加Script
             * @param {cc.Node} parentScene - 父類node
             * @param {string} PrefabURL - 該prefab resources底下的url位置
             * @param {string} ScriptName - 要對該prefab添加的script
             */
            Prefab.onlyPrefabInit = function (parentScene, PrefabURL, ScriptName) {
                cc.loader.loadRes(PrefabURL, cc.Prefab, function (error, Prefab) {
                    if (error) {
                        cc.log("PrefabData.js_onlyPrefab_init():", error);
                        return;
                    }
                    var prefabNode = cc.instantiate(Prefab);
                    parentScene.addChild(prefabNode);
                    prefabNode.addComponent(ScriptName);
                });
            };
            /**
             * 加載Resources底下全部Prefab,並將該prefab轉成node物件
             * @param {string} url - 要載入的資料夾地址
             * @param {Map<string, cc.Node>} prefabMap 要將所有node物件存放的位置
             */
            Prefab.allPrefabInit = function (url, prefabMap) {
                cc.loader.loadResDir(url, cc.Prefab, function (error, Prefab) {
                    if (error) {
                        cc.log("PrefabData.js_allPrefab_init():", error);
                        return;
                    }
                    for (var key in Prefab) {
                        var prefabNode = cc.instantiate(Prefab[key]);
                        prefabMap.set(Prefab[key]._name, prefabNode);
                    }
                });
            };
            /**
             * 尋訪該node底下一層節點內所有物件
             * @param {cc.Node} node - 父節點
             * @return {Map<string, cc.Node>} - Map(key: 該子類node URL, value:該子類node物件)
             */
            Prefab.loadNodeOneChildren = function (node) {
                var allNode = new Map();
                for (var i = 0; i < node.childrenCount; i++) {
                    var n = node.children[i];
                    for (var j = 0; j <= n.childrenCount; j++) { //尋訪node底下是否有子節點
                        allNode.set(node.children[i].name, n); //view[子節點位置,子節點屬性]
                    }
                }
                return allNode;
            };
            /**
             * 尋訪該node底下兩層子節點
             * @param {node : 物件} node - 父節點
             * @return {Map<string, cc.Node>} - Map(key: 該子類node URL, value:該子類node物件)
             */
            Prefab.loadNodeTowChildren = function (node) {
                var allNode = new Map();
                for (var i = 0; i < node.childrenCount; i++) {
                    var n = node.children[i]; //將該父節點屬性儲存
                    var path = n.children[i].name; //將父節點位置儲存
                    for (var j = 0; j <= n.childrenCount; j++) { //尋訪node底下是否有子節點
                        // this.view[root.children[i].name] = n;
                        if (j == 0) { //沒有子節點
                            allNode.set(n.children[i].name, n); //view[父節點位置,父節點屬性]
                        }
                        else { //有子節點
                            path += "/" + n.children[j - 1].name;
                            allNode.set(path, n.children[j - 1]); //view[子節點位置,子節點屬性]
                            path = n.children[i].name;
                        }
                    }
                }
                return allNode;
            };
            return Prefab;
        }());
        global.Prefab = Prefab;
    })(global = fcc.global || (fcc.global = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description TODO
     * @Date 2021-06-11 下午 05:03
     * @Version 1.0
     */
    var ABaseObserver = /** @class */ (function () {
        function ABaseObserver(callFun, self) {
            this._isPermanent = false;
            this._self = self;
            this._callFun = callFun;
        }
        ABaseObserver.prototype.pushNotification = function () {
            var _a;
            var any = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                any[_i] = arguments[_i];
            }
            (_a = this._callFun).call.apply(_a, __spreadArray([this._self], __read(any)));
        };
        Object.defineProperty(ABaseObserver.prototype, "isPermanent", {
            get: function () {
                return this._isPermanent;
            },
            set: function (value) {
                this._isPermanent = value;
            },
            enumerable: false,
            configurable: true
        });
        return ABaseObserver;
    }());
    fcc.ABaseObserver = ABaseObserver;
})(fcc || (fcc = {}));
/// <reference path="../Error/ErrorManager.ts" />
/// <reference path="../Error/Enum/ErrorType.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 綁定自己需要的所有推撥者
     * @Date 2021-06-10 上午 11:02
     * @Version 1.0
     */
    var NotificationHandler = /** @class */ (function () {
        function NotificationHandler() {
            this.notificationToMap = new Map();
        }
        /**
         * 懶漢加載
         * @return {INotificationHandler<T>}
         */
        NotificationHandler.instance = function () {
            if (!this._instance) {
                this._instance = new NotificationHandler();
            }
            return this._instance;
        };
        /**
         * 添加推撥者
         * @param {IBaseNotification} notification
         * @return {this}
         */
        NotificationHandler.prototype.setNotification = function (notification) {
            if (!this.notificationToMap.has(notification.TAG_NAME)) {
                this.notificationToMap.set(notification.TAG_NAME, notification);
            }
            return this;
        };
        /**
         * 獲取以綁定的推播者
         * @param {string} type
         * @return {IBaseNotification}
         */
        NotificationHandler.prototype.getNotification = function (type) {
            if (this.notificationToMap.has(type)) {
                return this.notificationToMap.get(type);
            }
            else {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.LISTENER_FW, type + " :  \u8A72key\u5C1A\u672A\u52A0\u5165\u63A8\u64A5\u4E8B\u4EF6\u4E2D,\u4F60\u9700\u5148\u57F7\u884C setNotification(type:IBaseNotification)\u65B9\u6CD5");
                // throw new Error(`${type} :  該class尚未加入推撥事件中,你需先執行 setNotification(IBaseNotification)方法`);
                return undefined;
            }
        };
        NotificationHandler.prototype.checkAllNotifications = function () {
            return this.notificationToMap;
        };
        return NotificationHandler;
    }());
    fcc.NotificationHandler = NotificationHandler;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author 蕭立品
     * @Description TODO
     * @Date 2021-06-30 下午 05:34
     * @Version 1.0
     */
    var SmartFoxLink = /** @class */ (function () {
        function SmartFoxLink() {
        }
        return SmartFoxLink;
    }());
    fcc.SmartFoxLink = SmartFoxLink;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description 遊戲當下狀態
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var GameStateType;
        (function (GameStateType) {
            /**
             * 無狀態,待機狀態...
             * @type {GameStateType.STANDBY}
             */
            GameStateType["STANDBY"] = "STANDBY";
            /**
             * 一般狀態遊戲中....
             * @type {GameStateType.PLAYING}
             */
            GameStateType["PLAYING"] = "PLAYING";
            /**
             * 免費遊戲中....
             * @type {GameStateType.FREEING}
             */
            GameStateType["FREEING"] = "FREEING";
        })(GameStateType = type.GameStateType || (type.GameStateType = {}));
        /**
         * @Author XIAO-LI-PIN
         * @Description 框架預設的流程
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var ProcessType;
        (function (ProcessType) {
            ProcessType["FREE"] = "FREE";
            ProcessType["NORMAL"] = "NORMAL";
        })(ProcessType = type.ProcessType || (type.ProcessType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
/// <reference path="./Enum/AutoType.ts" />
/// <reference path="./Enum/GameState.ts" />
/// <reference path="./Enum/GameState.ts" />
/// <reference path="../Error/Enum/ErrorType.ts" />
/// <reference path="./Enum/GameState.ts" />
/// <reference path="./IProcessManager.ts" />
/// <reference path="./IGameProcessFactory.ts" />
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 流程工廠 : 更新,獲取,加入,變更等.. 注意:此 class 由 manager 實例化,如果無特殊需求,請勿使用
     * @Date 2021-05-13 下午 06:17
     * @Version 1.1
     */
    var GameProcessFactory = /** @class */ (function () {
        function GameProcessFactory(gameManager) {
            this.gameManager = gameManager;
            this.processToMap = new Map();
        }
        /**
         * 初始流程,執行綁定的流程內的onCreate方法
         * @param {string | fcc.type.ProcessType} processName - 指定只要初始哪個流程 class,如果使用無參方法,將會初始化所有綁定的流程
         */
        GameProcessFactory.prototype.initProcess = function (processName) {
            var e_11, _a;
            if (processName) {
                if (!this.processToMap.has(processName)) {
                    fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.PROCESS_FW, "查找不到該流程,請確認是否已綁定進框架中");
                }
                else {
                    this.processToMap.get(processName).executionContainer.onCreate();
                }
            }
            else {
                var values = this.processToMap.values();
                try {
                    for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                        var value = values_1_1.value;
                        value.executionContainer.onCreate();
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
        };
        /**
         * 添加流程
         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱
         * @param {IProcess} process - 流程 class
         */
        GameProcessFactory.prototype.setProcess = function (processName, process) {
            this.processToMap.set(processName, process);
        };
        /**
         * 獲取該流程
         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱
         * @returns {IProcess}
         */
        GameProcessFactory.prototype.getProcess = function (processName) {
            return this.processToMap.get(processName);
        };
        /**
         * 拿取全部已經綁定的流程
         * @return {Map<string, fcc.IF.IProcess>}
         */
        GameProcessFactory.prototype.getAllProcess = function () {
            return this.processToMap;
        };
        /**
         * 改變流程
         * @param {string | GameType} processName - 可使用預設 ProcessType 或自訂義流程名稱
         */
        GameProcessFactory.prototype.changeProcess = function (processName) {
            if (!this.processToMap.has(processName)) {
                fcc.ErrorManager.instance.executeError(fcc.type.ErrorType.PROCESS_FW, processName + " \u641C\u5C0B\u4E0D\u5230\u6B64\u6D41\u7A0B,\u8ACB\u6AA2\u67E5\u6D41\u7A0B\u662F\u5426\u6DFB\u52A0");
                return;
            }
            this.process = this.processToMap.get(processName);
        };
        /**
         * 執行流程
         * @returns {Promise<void>}
         */
        GameProcessFactory.prototype.useProcess = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.process.start()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return GameProcessFactory;
    }());
    fcc.GameProcessFactory = GameProcessFactory;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * 待刪除
         */
        var GameEventType;
        (function (GameEventType) {
            GameEventType["TEST"] = "TEST";
            // /**
            //  * 加速按鈕監聽
            //  * @type {GameEventType.SPEED_UP}
            //  */
            // SPEED_UP = "SPEED_UP",
            //
            // /**
            //  * 即停監聽
            //  * @type {GameEventType.IMMEDIATE_STOP}
            //  */
            // IMMEDIATE_STOP = "IMMEDIATE_STOP",
            //
            // /**
            //  * 瞇排事件
            //  * @type {GameEventType.LOOK_AT}
            //  */
            // LOOK_AT = 'LOOK_AT',
            //
            // /**
            //  * 玩家金額不足
            //  * @type {GameEventType.USER_POINT_INSUFFICIENT}
            //  */
            // USER_POINT_INSUFFICIENT = "USER_POINT_INSUFFICIENT",
            // /**
            //  * 該次贏分時
            //  */
            // WIN_POINT = 'WIN_POINT',
            //
            // /**
            //  * USER押注面額監聽
            //  */
            // USER_TOTAL_BET = 'USER_TOTAL_BET',
            //
            // /**
            //  * auto事件
            //  */
            // AUTO = 'AUTO',
        })(GameEventType = type.GameEventType || (type.GameEventType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var type;
    (function (type) {
        /**
         * @Author XIAO-LI-PIN
         * @Description server 回傳事件 型
         * @Date 2021-04-14 下午 20:24
         * @Version 1.1
         */
        var ServerEventType;
        (function (ServerEventType) {
            /**
             *  一般獲獎回傳
             */
            ServerEventType["BET_RESULT"] = "BET_RESULT";
            /**
             * 免費模式獲獎
             */
            ServerEventType["FREE_SPIN_RESULT"] = "FREE_SPIN_RESULT";
            /**
             * 底層進遊戲 通知Loading頁面 可以顯示主遊戲場景
             */
            ServerEventType["CAN_PLAY_GAME"] = "CAN_PLAY_GAME";
            /**
             * 獲取遊戲歷史結果
             */
            ServerEventType["GET_GAME_HISTORY_RESULT"] = "GET_GAME_HISTORY_RESULT";
            /**
             * 獲取遊戲祥單
             */
            ServerEventType["GET_HISTORY_DETAIL_RESULT"] = "GET_HISTORY_DETAIL_RESULT";
            /**
             * 該局遊戲序號
             */
            ServerEventType["GROUP_ID"] = "GROUP_ID";
            /**
             * 進入遊戲後初始資訊
             */
            ServerEventType["TABLE_INFO"] = "TABLE_INFO";
            /**
             * 各種錯誤訊息
             */
            ServerEventType["WARNING"] = "WARNING";
        })(ServerEventType = type.ServerEventType || (type.ServerEventType = {}));
    })(type = fcc.type || (fcc.type = {}));
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 任何遊戲皆可用流程
     * @Date 2021-05-14 下午 03:07
     * @Version 1.0
     */
    var GameProcess = /** @class */ (function () {
        function GameProcess(container) {
            this._executionContainer = container;
            this._process = new Set();
        }
        /**
         * 執行流程
         * @return {this}
         */
        GameProcess.prototype.onExecution = function () {
            this._process.add(this._executionContainer.onExecution);
            return this;
        };
        /**
         * 流程結束時
         * @return {this}
         */
        GameProcess.prototype.onEnd = function () {
            this._process.add(this._executionContainer.onEnd);
            return this;
        };
        /**
         * 更換流程
         * @return {this}
         */
        GameProcess.prototype.onChangeStatus = function () {
            this._process.add(this._executionContainer.onChangeStatus);
            return this;
        };
        /**
         * 將所有綁定的流程方法依序執行
         * @return {Promise<void>}
         */
        GameProcess.prototype.start = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, method, e_12_1;
                var e_12, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 5, 6, 7]);
                            _a = __values(this._process), _b = _a.next();
                            _d.label = 1;
                        case 1:
                            if (!!_b.done) return [3 /*break*/, 4];
                            method = _b.value;
                            return [4 /*yield*/, method.apply(this._executionContainer)];
                        case 2:
                            _d.sent();
                            _d.label = 3;
                        case 3:
                            _b = _a.next();
                            return [3 /*break*/, 1];
                        case 4: return [3 /*break*/, 7];
                        case 5:
                            e_12_1 = _d.sent();
                            e_12 = { error: e_12_1 };
                            return [3 /*break*/, 7];
                        case 6:
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_12) throw e_12.error; }
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(GameProcess.prototype, "process", {
            get: function () {
                return this._process;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GameProcess.prototype, "executionContainer", {
            get: function () {
                return this._executionContainer;
            },
            enumerable: false,
            configurable: true
        });
        return GameProcess;
    }());
    fcc.GameProcess = GameProcess;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author XIAO-LI-PIN
     * @Description 老虎機流程
     * @Date 2021-05-14 下午 03:07
     * @Version 1.0
     */
    var SlotGameProcess = /** @class */ (function () {
        function SlotGameProcess(container) {
            this._executionContainer = container;
            this._process = new Set(); //初始化,存放要執行的方法
        }
        /**
         * 初始化 : 自訂開始遊戲前的效果
         * @example - 按鈕,背景…等
         * @return {this}
         */
        SlotGameProcess.prototype.onCustomizeStart = function () {
            this._process.add(this._executionContainer.onCustomizeStart);
            return this;
        };
        /**
         * 老虎機運行前,漸入效果
         * @return {this}
         */
        SlotGameProcess.prototype.onSineInGrid = function () {
            this._process.add(this._executionContainer.onSineInGrid);
            return this;
        };
        /**
         * 遊戲持續執行動作
         * @return {this}
         */
        SlotGameProcess.prototype.onRunning = function () {
            this._process.add(this._executionContainer.onRunGrid);
            return this;
        };
        /**
         * 自訂義停止後事件
         * @example - 更換音樂,更換背景圖案,校正回歸流程狀態...等
         * @return {this}
         */
        SlotGameProcess.prototype.onCustomizeEnd = function () {
            this._process.add(this._executionContainer.onCustomizeEnd);
            return this;
        };
        /**
         * 顯示結果
         * @return {this}
         */
        SlotGameProcess.prototype.onShowAnswer = function () {
            this._process.add(this._executionContainer.onShowAnswer);
            return this;
        };
        /**
         * 更換流程
         * @example - fcc.processManager.changeProcess(GameType.NORMAL);
         * @return {this}
         */
        SlotGameProcess.prototype.onChangeStatus = function () {
            this._process.add(this._executionContainer.onChangeStatus);
            return this;
        };
        /**
         * 開始執行
         * @return {Promise<void>}
         */
        SlotGameProcess.prototype.start = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, method, e_13_1;
                var e_13, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 5, 6, 7]);
                            _a = __values(this._process), _b = _a.next();
                            _d.label = 1;
                        case 1:
                            if (!!_b.done) return [3 /*break*/, 4];
                            method = _b.value;
                            return [4 /*yield*/, method.apply(this._executionContainer)];
                        case 2:
                            _d.sent();
                            _d.label = 3;
                        case 3:
                            _b = _a.next();
                            return [3 /*break*/, 1];
                        case 4: return [3 /*break*/, 7];
                        case 5:
                            e_13_1 = _d.sent();
                            e_13 = { error: e_13_1 };
                            return [3 /*break*/, 7];
                        case 6:
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_13) throw e_13.error; }
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(SlotGameProcess.prototype, "executionContainer", {
            get: function () {
                return this._executionContainer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotGameProcess.prototype, "process", {
            get: function () {
                return this._process;
            },
            enumerable: false,
            configurable: true
        });
        return SlotGameProcess;
    }());
    fcc.SlotGameProcess = SlotGameProcess;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    var ABS;
    (function (ABS) {
        /**
         * @Author 蕭立品
         * @Description TODO
         * @Date 2021-06-28 下午 06:42
         * @Version 1.0
         */
        var ASlotSetting = /** @class */ (function () {
            function ASlotSetting(slotStyleManager) {
                this._slotStyleManager = slotStyleManager;
            }
            /**
             * 老虎機顯示答案前的最少轉動次數
             * @param {number} count
             * @return {this}
             */
            ASlotSetting.prototype.setSlotTurnCount = function (count) {
                this._slotTurnCount = count;
                return this;
            };
            /**
             * 老虎機每隔格子高度
             * @param {number} height
             * @return {this}
             */
            ASlotSetting.prototype.setSlotGridHeight = function (height) {
                this._slotGridHeight = height;
                return this;
            };
            /**
             * 老虎機一般狀態速度
             * @param {number} time
             * @return {this}
             */
            ASlotSetting.prototype.setSlotGirdSpeed = function (time) {
                this._slotGirdSpeed = time;
                return this;
            };
            /**
             * 加速時的加速被率
             * @param {number} multiple
             * @return {this}
             */
            ASlotSetting.prototype.setSpeedUpMultiple = function (multiple) {
                this._speedUpMultiple = multiple;
                return this;
            };
            /**
             * 該老虎機 每列的格子數量
             * @param {number} gridCount
             * @return {this}
             */
            ASlotSetting.prototype.setSlotRowGridCount = function (gridCount) {
                this._slotRowGridCount = gridCount;
                return this;
            };
            /**
             * 非加速模式,每列停止的時間間格
             * @param {number} time
             * @return {this}
             */
            ASlotSetting.prototype.setColumnIntervalTime = function (time) {
                this._columnIntervalTime = time;
                return this;
            };
            /**
             * 要執行輪播動化轉動老虎機的node
             * @param {Array<cc.Node>} node
             * @return {this}
             */
            ASlotSetting.prototype.setSlotColumnToTween = function (node) {
                this._slotColumnToTween = node;
                return this;
            };
            /**
             * 所有格子,做循環老虎機時,需更動該Node的位置
             * @param {Map<number, Array<cc.Node>>} node
             * @return {this}
             */
            ASlotSetting.prototype.setGridNodeToMap = function (node) {
                this._gridNodeToMap = node;
                return this;
            };
            ASlotSetting.prototype.complete = function () {
                this._slotStyleManager.build(this);
            };
            Object.defineProperty(ASlotSetting.prototype, "columnIntervalTime", {
                get: function () {
                    return this._columnIntervalTime;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "gridNodeToMap", {
                get: function () {
                    return this._gridNodeToMap;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "slotColumnToTween", {
                get: function () {
                    return this._slotColumnToTween;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "slotGirdSpeed", {
                get: function () {
                    return this._slotGirdSpeed;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "slotGridHeight", {
                get: function () {
                    return this._slotGridHeight;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "slotRowGridCount", {
                get: function () {
                    return this._slotRowGridCount;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "slotTurnCount", {
                get: function () {
                    return this._slotTurnCount;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "speedUpMultiple", {
                get: function () {
                    return this._speedUpMultiple;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(ASlotSetting.prototype, "slotStyleManager", {
                get: function () {
                    return this._slotStyleManager;
                },
                enumerable: false,
                configurable: true
            });
            return ASlotSetting;
        }());
        ABS.ASlotSetting = ASlotSetting;
    })(ABS = fcc.ABS || (fcc.ABS = {}));
})(fcc || (fcc = {}));
/**
 * @Author 蕭立品
 * @Description TODO
 * @Date 2021-06-28 下午 06:01
 * @Version 1.0
 */
var fcc;
(function (fcc) {
    /**
     * @Author 蕭立品
     * @Description TODO
     * @Date 2021-06-28 下午 06:41
     * @Version 1.0
     */
    var SlotImgSetting = /** @class */ (function (_super) {
        __extends(SlotImgSetting, _super);
        function SlotImgSetting() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * slot 所有靜態格子圖片
         * @param {Array<cc.SpriteFrame>} img
         * @return {this}
         */
        SlotImgSetting.prototype.setGridImg = function (img) {
            this._gridImg = img;
            return this;
        };
        /**
         * 所有格子的圖片,做循環老虎雞時,需更動的圖片
         * @param {Map<number, Array<cc.Sprite>>} sprite
         * @return {this}
         */
        SlotImgSetting.prototype.setGirdSpriteToMap = function (sprite) {
            this._gridSpriteToMap = sprite;
            return this;
        };
        Object.defineProperty(SlotImgSetting.prototype, "gridSpriteToMap", {
            get: function () {
                return this._gridSpriteToMap;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SlotImgSetting.prototype, "gridImg", {
            get: function () {
                return this._gridImg;
            },
            enumerable: false,
            configurable: true
        });
        return SlotImgSetting;
    }(fcc.ABS.ASlotSetting));
    fcc.SlotImgSetting = SlotImgSetting;
})(fcc || (fcc = {}));
var fcc;
(function (fcc) {
    /**
     * @Author 蕭立品
     * @Description TODO
     * @Date 2021-06-28 下午 06:41
     * @Version 1.0
     */
    var SlotSpinSetting = /** @class */ (function (_super) {
        __extends(SlotSpinSetting, _super);
        function SlotSpinSetting() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * slot 所有靜態格子圖片
         * @param {Array<cc.SpriteFrame>} img
         * @return {this}
         */
        SlotSpinSetting.prototype.setGridImg = function (img) {
            this._gridImg = img;
            return this;
        };
        /**
         * 所有格子的圖片,做循環老虎機時,需更動的圖片
         * @param {Map<number, Array<cc.Sprite>>} sprite
         * @return {this}
         */
        SlotSpinSetting.prototype.setGirdSpriteToMap = function (sprite) {
            this._gridSpriteToMap = sprite;
            return this;
        };
        /**
         * 所有格子的spin,做循環老虎機時,需更動的圖片
         * @param {Map<number, Array<cc.Sprite>>} sprite
         * @return {this}
         */
        SlotSpinSetting.prototype.setGirdSpineToMap = function (sprite) {
            this._girdSpineToMap = sprite;
            return this;
        };
        return SlotSpinSetting;
    }(fcc.ABS.ASlotSetting));
    fcc.SlotSpinSetting = SlotSpinSetting;
})(fcc || (fcc = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_552a78d5.js","/")
},{"2ionoC":5,"buffer":3}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\base64-js\\lib\\b64.js","/..\\node_modules\\gulp-browserify\\node_modules\\base64-js\\lib")
},{"2ionoC":5,"buffer":3}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\buffer\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\buffer")
},{"2ionoC":5,"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\ieee754\\index.js","/..\\node_modules\\gulp-browserify\\node_modules\\ieee754")
},{"2ionoC":5,"buffer":3}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("2ionoC"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\node_modules\\gulp-browserify\\node_modules\\process\\browser.js","/..\\node_modules\\gulp-browserify\\node_modules\\process")
},{"2ionoC":5,"buffer":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
