(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fcc,__read=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},__spreadArray=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},__awaiter=this&&this.__awaiter||function(e,a,s,c){return new(s=s||Promise)(function(n,t){function r(e){try{i(c.next(e))}catch(e){t(e)}}function o(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?n(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(r,o)}i((c=c.apply(e,a||[])).next())})},__generator=this&&this.__generator||function(n,r){var o,i,a,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(a=2&t[0]?i.return:t[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,t[1])).done)return a;switch(i=0,(t=a?[2&t[0],a.value]:t)[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},__extends=this&&this.__extends||function(){var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}}(),__values=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return{value:(e=e&&r>=e.length?void 0:e)&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};!function(e){(e=(e=e.type||(e.type={})).ErrorType||(e.ErrorType={})).TYPE_FW="傳入的Type 錯誤 ,請檢察該Type是否非FarmWork內的Type",e.IS_RUNNING_FW="遊戲正在執行中,請勿重複呼叫",e.UNDEFINED_FW="變數為undefined,流程無法繼續",e.LOAD_FW="加載的資源有問題",e.ANIMATION_FW="Animation 類中方法有錯誤 : ",e.WEB_REQUEST_FW="WebRequest 類有錯誤 : ",e.WEB_RESPONSE_FW="WebResponse 類有錯誤 : ",e.AUDIO_FW="AUDIO 類有錯誤 :",e.SCENE_FW="Scene 類有錯誤 :",e.PROCESS_FW="process 類有錯誤 :",e.LISTENER_FW="Event 類有錯誤 :",e.SLOT_STYLE_FW="SlotStyleFW類有錯誤 :",e.TEMPLATE_FW="模板類有錯誤 :"}(fcc=fcc||{}),function(e){var t=(n.prototype.checkErrorType=function(e,t){throw new Error("例外錯誤 : "+e)},n);function n(e){this.configManager=e}e.UnknownError=t}(fcc=fcc||{}),function(n){var e=(t.prototype.checkErrorType=function(e,t){if(this.configManager.isFrameworkDebug)switch(e){case n.type.ErrorType.IS_RUNNING_FW:throw new Error(n.type.ErrorType.IS_RUNNING_FW+" "+t);case n.type.ErrorType.UNDEFINED_FW:throw new Error(n.type.ErrorType.UNDEFINED_FW+" "+t);case n.type.ErrorType.TYPE_FW:throw new Error(n.type.ErrorType.TYPE_FW+" "+t);case n.type.ErrorType.ANIMATION_FW:throw new Error(n.type.ErrorType.ANIMATION_FW+" "+t);case n.type.ErrorType.LOAD_FW:throw new Error(n.type.ErrorType.LOAD_FW+" "+t);case n.type.ErrorType.WEB_REQUEST_FW:throw new Error(n.type.ErrorType.WEB_REQUEST_FW+" "+t);case n.type.ErrorType.AUDIO_FW:throw new Error(n.type.ErrorType.AUDIO_FW+" "+t);case n.type.ErrorType.WEB_RESPONSE_FW:throw new Error(n.type.ErrorType.WEB_RESPONSE_FW+" "+t);case n.type.ErrorType.SCENE_FW:throw new Error(n.type.ErrorType.SCENE_FW+" "+t);case n.type.ErrorType.PROCESS_FW:throw new Error(n.type.ErrorType.PROCESS_FW+" "+t);case n.type.ErrorType.LISTENER_FW:throw new Error(n.type.ErrorType.LISTENER_FW+" "+t);case n.type.ErrorType.SLOT_STYLE_FW:throw new Error(n.type.ErrorType.SLOT_STYLE_FW+" "+t);case n.type.ErrorType.TEMPLATE_FW:throw new Error(n.type.ErrorType.TEMPLATE_FW+" "+t);default:this.unknownError.checkErrorType(e)}else console.log("有例外錯誤,但你未開啟框架Debug,無法查看")},t);function t(e){this.unknownError=new n.UnknownError(e),this.configManager=e}n.FrameWorkError=e}(fcc=fcc||{}),function(t){var e=(n.prototype.checkErrorType=function(e,t){if("string"==typeof e)this.frameWorkError.checkErrorType(e,t);else if(null===e)return this.checkObjectType(t)},n.prototype.checkObjectType=function(e){if(e&&0!=e)return typeof e;throw new Error("該物件為null")},n);function n(e){this.frameWorkError=new t.FrameWorkError(e)}t.ObjectError=e}(fcc=fcc||{}),function(i){var e=(t.prototype.showError=function(e,t,n,r){var o=this;null!=this.timeOut&&clearTimeout(this.timeOut),cc.Tween.stopAllByTarget(this.errorManager.errorNode),this.errorManager.errorButton.getComponent(cc.Button).interactable=!1,this.errorManager.errorNode.active=!1,this.errorManager.closeButton.active=!1,this.errorManager.errorNode||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorNode為空"),this.errorManager.errorLabel||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorLabel為空"),this.errorManager.errorButton||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorButton為空"),i.ErrorManager.errorState=!0,cc.tween(this.errorManager.errorNode).set({opacity:0,scale:1.3}).call(function(){o.errorManager.errorNode.active=!0}).to(.3,{opacity:255,scale:1},{easing:"sineIn"}).call(function(){o.errorManager.errorButton.getComponent(cc.Button).interactable=!0}).start(),this.errorManager.errorLabel.string=t,e?r?(this.errorManager.errorButton.active=r,this.errorManager.errorButtonLabel.string=n):this.errorManager.isShowBackHomeButton?(this.errorManager.errorButton.active=this.errorManager.isShowBackHomeButton,this.errorManager.errorButtonLabel.string=n):this.errorManager.errorButton.active=!1:this.errorManager.errorButton.active=!1,e||(this.timeOut=window.setTimeout(function(){i.ErrorManager.errorState=!1,o.errorManager.errorNode.active=!1,o.errorManager.errorButton.active=!1,o.timeOut=null},this.errorManager.errorDelayTime))},t);function t(e){this.timeOut=null,this.errorManager=e}i.ServerError=e}(fcc=fcc||{}),function(o){var e=(t.prototype.showError=function(e,t,n){var r=this;null!=this.timeout&&clearTimeout(this.timeout),this.errorManager.warningNode||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningNode為空"),this.errorManager.warningLabel||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningLabel為空"),0==this.errorManager.warningDelayTime&&this.errorManager.executeError("當前DelayTime = 0 : 請給予值"),o.ErrorManager.warningState=!0,this.errorManager.warningNode.active=!0,this.errorManager.warningLabel.string=t,e||(this.timeout=window.setTimeout(function(){o.ErrorManager.warningState=!1,r.errorManager.warningNode.active=!1},this.errorManager.warningDelayTime))},t);function t(e){this.timeout=null,this.errorManager=e}o.WarningError=e}(fcc=fcc||{}),function(n){var e=(t.prototype.checkErrorType=function(e,t){return this.objectError.checkErrorType(e,t)},t.prototype.checkServerError=function(e,t,n,r){this.serverError.showError(e,t,n,r)},t.prototype.checkWarning=function(e,t,n){this.warningError.showError(e,t,n)},t);function t(e,t){this.objectError=new n.ObjectError(e),this.serverError=new n.ServerError(t),this.warningError=new n.WarningError(t)}n.ErrorHandler=e}(fcc=fcc||{}),function(t){var e=(n.setInstance=function(e){this._instance||(this._instance=new n(e),t.errorMgr=this._instance)},Object.defineProperty(n,"instance",{get:function(){if(!this._instance)throw new Error("ErrorManager類錯誤 :  該類尚未實例化");return this._instance},enumerable:!1,configurable:!0}),n.prototype.executeError=function(e,t){return this.handler.checkErrorType(e,t)},n.prototype.showErrorDialog=function(e,t,n,r){this.handler.checkServerError(e,t,n,r)},n.prototype.showWarningDialog=function(e,t,n){this.handler.checkWarning(e,t,n)},n.prototype.setErrorNode=function(e){return this._errorNode=e,this},n.prototype.setErrorLabel=function(e){return this._errorLabel=e,this},n.prototype.setErrorButton=function(e){return this._errorButton=e,this},n.prototype.setCloseButtonNode=function(e){return this._closeButton=e,this},n.prototype.setErrorDelayTime=function(e){return this._errorDelayTime=e,this},n.prototype.setWarningDelayTime=function(e){return this._warningDelayTime=e,this},n.prototype.setWarningNode=function(e){return this._warningNode=e,this},n.prototype.setWarningLabel=function(e){return this._warningLabel=e,this},n.prototype.setErrorButtonLabel=function(e){return this._errorButtonLabel=e,this},Object.defineProperty(n,"errorState",{get:function(){return this._errorState},set:function(e){this._errorState=e},enumerable:!1,configurable:!0}),Object.defineProperty(n,"warningState",{get:function(){return this._warningState},set:function(e){this._warningState=e},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorNode",{get:function(){return this._errorNode},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"warningNode",{get:function(){return this._warningNode},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorButton",{get:function(){return this._errorButton},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"warningLabel",{get:function(){return this._warningLabel},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorLabel",{get:function(){return this._errorLabel},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorDelayTime",{get:function(){return this._errorDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"warningDelayTime",{get:function(){return this._warningDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isShowBackHomeButton",{get:function(){return this._isShowBackHomeButton},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorButtonLabel",{get:function(){return this._errorButtonLabel},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"closeButton",{get:function(){return this._closeButton},enumerable:!1,configurable:!0}),n);function n(e){this.handler=new t.ErrorHandler(e,this),this.configManager=e,this._errorNode=null,this._errorLabel=null,this._errorDelayTime=2e3,this._warningDelayTime=1e3,n._errorState=!1,n._warningState=!1,this._isShowBackHomeButton=!!this.configManager.backHomeURL.trim()}t.ErrorManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AudioStateType||(e.AudioStateType={})).CLEAR_TO_REPLAY="CLEAR_TO_REPLAY",e.NOT_PLAYING="NOT_PLAYING",e.SUPERIMPOSE="SUPERIMPOSE"}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.roundOff=function(e,t){return Math.round(Math.round(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundDown=function(e,t){return Math.floor(Math.floor(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundUp=function(e,t){return Math.ceil(Math.ceil(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.decimalsCount=function(e){var t=String(e).indexOf(".")+1,e=String(e).length-t;return 0==t?0:e},t.numberFormat=function(e){return e<1e3?e+"":1e3<e?e/1e3+"K":void 0},t.format=function(e){return this.formatting.format(e)},t.formatting=new Intl.NumberFormat,e.Util=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LoadType||(e.LoadType={})).IMG="IMG",e.IMG_ATLAS="IMG_ATLAS",e.SPINE="SPINE",e.PREFAB="PREFAB",e.MUSIC="MUSIC",e.TEXT="TEXT",e.SCENE="SCENE",e.SCRIPT="SCRIPT",e.CSS="CSS"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).ASSET_MODE||(e.ASSET_MODE={}))[e.RESOURCES=0]="RESOURCES",e[e.IN_SIDE_BUNDLE=1]="IN_SIDE_BUNDLE",e[e.OUT_SIDE_ASSET=2]="OUT_SIDE_ASSET"}(fcc=fcc||{}),function(t){var e=(n.setInstance=function(e){this._instance||(this._instance=new n(e),t.eventMgr=this._instance)},Object.defineProperty(n,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),n.prototype.emitEvent=function(e){for(var t,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];(t=this.target).emit.apply(t,__spreadArray([e],__read(n)))},n.prototype.eventListener=function(e,t,n,r){this._eventCount+=1,this._eventsCurrentlyBeing.set("severEvent",e),n?this.target.on(e,t,r):this.target.once(e,t,r)},n.prototype.destroyEvent=function(e,t){this.target.off(e,t,this.target)},n.prototype.hasListening=function(e){return this.target.hasEventListener(e)},Object.defineProperty(n.prototype,"eventCount",{get:function(){return this._eventCount},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"eventsCurrentlyBeing",{get:function(){return this._eventsCurrentlyBeing},enumerable:!1,configurable:!0}),n);function n(e){this.configManager=e,this._eventCount=0,this._eventsCurrentlyBeing=new Map,this.target=new cc.EventTarget}t.EventManager=e}(fcc=fcc||{}),function(n){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),n.processMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;n.ErrorManager.instance.executeError(n.type.ErrorType.PROCESS_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.setProcess=function(e,t){return this.gameProcessFactory.setProcess(e,t),this},t.prototype.initProcess=function(e){this.gameProcessFactory.initProcess(e)},t.prototype.setDefaultProcess=function(e){this.gameProcessFactory.changeProcess(e)},t.prototype.changeProcess=function(e){this.gameProcessFactory.changeProcess(e)},t.prototype.play=function(){var e=this;return new Promise(function(t){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.isStartProcess?[3,2]:(this.updateProcessState(!0),[4,this.gameProcessFactory.useProcess()]);case 1:return e.sent(),this.updateProcessState(!1),t(),[3,3];case 2:n.ErrorManager.instance.executeError(n.type.ErrorType.PROCESS_FW,"流程尚未結束,請勿重複執行"),e.label=3;case 3:return[2]}})})})},t.prototype.updateProcessState=function(e){this.isStartProcess=e},t.prototype.remake=function(){this.isStartProcess=!1},Object.defineProperty(t.prototype,"gameState",{get:function(){return this._gameState},set:function(e){this._gameState=e},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.gameProcessFactory=new n.GameProcessFactory(this),this._gameState=n.type.GameStateType.STANDBY,this.isStartProcess=!1}n.ProcessManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneStyleType||(e.SceneStyleType={})).AUTO="AUTO",e.HORIZONTAL="HORIZONTAL",e.VERTICAL="VERTICAL"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneDirectionType||(e.SceneDirectionType={})).PORTRAIT="PORTRAIT",e.LANDSCAPE="LANDSCAPE"}(fcc=fcc||{}),function(e){var t=(n.prototype.designSceneEventListener=function(t){var e=this;cc.view.on("canvas-resize",function(){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.makeDesignScene(t)];case 1:return e.sent(),cc.log("更新畫面完畢......"),[2]}})})})},n.prototype.makeDesignScene=function(n){var r=this;return new Promise(function(e,t){r._isCanUpdateScene?(r._isCanUpdateScene=!1,setTimeout(function(){r.sceneManager.updateSize(),r._isCanUpdateScene=!0,e()},n)):r.configManager.isFrameworkDebug&&t("正在UpdateScene中 請稍後......")})},n);function n(e,t){this._isCanUpdateScene=!0,this.configManager=e,this.sceneManager=t}e.SceneSizeChangeListener=t}(fcc=fcc||{}),function(n){var e;function t(){this.observer=new Set}e=n.ABS||(n.ABS={}),t.prototype.subscribe=function(e,t){this.observer.has(e)?n.ErrorManager.instance.executeError(n.type.ErrorType.SCENE_FW,e+" 該IBaseObserver已註冊過自動狀態改變時事件,請檢查"):(e.isPermanent=t,this.observer.add(e))},t.prototype.unsubscribe=function(e){this.observer.has(e)?this.observer.delete(e):n.ErrorManager.instance.executeError(n.type.ErrorType.PROCESS_FW,e+" : 該觀察類尚未綁定過,無須移除觀察對象")},t.prototype.removeAll=function(){this.observer.clear()},t.prototype.getSubscribeCount=function(){return this.observer.size},t.prototype.getAllSubscribe=function(){return this.observer},e.ABaseNotification=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).NotificationType||(e.NotificationType={})).AUTO_CHANGE="AUTO_CHANGE",e.SPEED_CHANGE="SPEED_CHANGE",e.USER_MONEY_CHANGE="USER_MONEY_CHANGE",e.USER_BET_CHANGE="USER_BET_CHANGE",e.USER_GET_WIN="USER_GET_WIN",e.SCENE_DIRECTION_CHANGE="SCENE_DIRECTION_CHANGE",e.RESPONSE_RESULT="RESPONSE_RESULT",e.SCROLL_FOCUS_STATE="SCROLL_FOCUS_STATE",e.SLOT_ROW_END="SLOT_ROW_END",e.STOP_NOW="STOP_NOW"}(fcc=fcc||{}),function(e){var t=(n.prototype.pushNotification=function(e){this.callFun.call(this.self,e)},Object.defineProperty(n.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),n);function n(e,t){this._isPermanent=!1,this.self=t,this.callFun=e}e.SceneDirectionChangeObserver=t}(fcc=fcc||{}),function(t){var n,e=(n=t.ABS.ABaseNotification,__extends(r,n),r.prototype.subscribe=function(e,t){n.prototype.subscribe.call(this,e,t)},r.prototype.notify=function(e){var t,n;if(0<this.observer.size)try{for(var r=__values(this.observer),o=r.next();!o.done;o=r.next()){var i=o.value;i.pushNotification(e),i.isPermanent||this.unsubscribe(i)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}},r);function r(){var e=n.call(this)||this;return e.TAG_NAME=t.type.NotificationType.SCENE_DIRECTION_CHANGE,e}t.SceneDirectionChangeNotification=e}(fcc=fcc||{}),function(t){var e=(n.prototype.executionStyle=function(e,t){var n,r;this.updateSceneDirection(),cc.view.getFrameSize().width/cc.view.getFrameSize().height>=e/t?(n=cc.view.getFrameSize().width*(e/cc.view.getFrameSize().height),cc.view.setDesignResolutionSize(n,t,cc.ResolutionPolicy.FIXED_HEIGHT)):cc.view.getFrameSize().width>cc.view.getFrameSize().height?(r=cc.view.getFrameSize().height*(e/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(e,r,cc.ResolutionPolicy.FIXED_WIDTH)):cc.view.getFrameSize().width/cc.view.getFrameSize().height>=1e3/1777?(r=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,r,cc.ResolutionPolicy.FIXED_HEIGHT)):(r=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,r,cc.ResolutionPolicy.FIXED_WIDTH))},n.prototype.updateSceneDirection=function(){cc.view.getFrameSize().width<cc.view.getFrameSize().height?this.sceneManager.sceneDirection!=t.type.SceneDirectionType.PORTRAIT&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.PORTRAIT,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.PORTRAIT)):this.sceneManager.sceneDirection!=t.type.SceneDirectionType.LANDSCAPE&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.LANDSCAPE,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.LANDSCAPE))},n);function n(e){this.sceneManager=e,t.NotificationManager.instance().hasNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE)?this.eventLock=!1:(this.eventLock=!0,console.log("你尚未綁定當遊戲方向更動時的推播事件,因此不會觸發方向改變的推播事件"))}t.AutoStyle=e}(fcc=fcc||{}),function(e){var t=(n.prototype.executionStyle=function(e,t){var n=cc.find("Canvas").getComponent(cc.Canvas);this.curDR||(this.curDR=cc.size(e,t));var r=this.curDR,o=cc.size(window.innerWidth,window.innerHeight),i=o.width,e=o.height,t=i,o=e;i/e>r.width/r.height?(n.fitHeight=!0,n.fitWidth=!1,t=(o=r.height)*i/e):(n.fitHeight=!1,n.fitWidth=!0,o=e/i*(t=r.width)),n.designResolution=cc.size(t,o),n.node.width=t,n.node.height=o},n);function n(){}e.HorizontalStyle=t}(fcc=fcc||{}),function(n){var e=(t.prototype.executionStyle=function(e,t){n.ErrorManager.instance.executeError("尚未完成直向是配模式")},t);function t(){}n.VerticalStyle=e}(fcc=fcc||{}),function(r){var e=(t.prototype.getStyle=function(e,t,n){switch(e){case r.type.SceneStyleType.AUTO:this.autoStyle||(this.autoStyle=new r.AutoStyle(this.sceneManager)),this.autoStyle.executionStyle(t,n);break;case r.type.SceneStyleType.HORIZONTAL:this.horizontalStyle||(this.horizontalStyle=new r.HorizontalStyle),this.horizontalStyle.executionStyle(t,n);break;case r.type.SceneStyleType.VERTICAL:this.verticalStyle||(this.verticalStyle=new r.VerticalStyle),this.verticalStyle.executionStyle(t,n);break;default:e.executionStyle(t,n)}},t);function t(e){this.sceneManager=e}r.SceneStyleHandler=e}(fcc=fcc||{}),function(t){var e=(n.setInstance=function(e){this._instance||(this._instance=new n(e),t.sceneMgr=this._instance)},Object.defineProperty(n,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),n.prototype.setDesignWidth=function(e){return this._designWidth=e,this},n.prototype.setDesignHeight=function(e){return this._designHeight=e,this},n.prototype.updateSize=function(e){if(e)switch(this.style=e){case t.type.SceneStyleType.HORIZONTAL:this._sceneDirection=t.type.SceneDirectionType.PORTRAIT;break;case t.type.SceneStyleType.VERTICAL:this._sceneDirection=t.type.SceneDirectionType.LANDSCAPE;break;case t.type.SceneStyleType.AUTO:break;default:console.log("該更新模式尚未包含在框架中,請確認是否有實作ISceneStyle")}return this.sceneStyleHandler.getStyle(this.style,this._designWidth,this._designHeight),this},n.prototype.startListener=function(e){this.sceneSizeChangeListener.designSceneEventListener(e)},n.prototype.changeScene=function(e){t.LoadResManager.instance.sceneRes.has(e)||t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"加載不到你的Scene資源,請檢查該資源名是否正確"),cc.director.runScene(t.LoadResManager.instance.sceneRes.get(e))},n.prototype.removeScene=function(e){e.destroy()},Object.defineProperty(n.prototype,"sceneDirection",{get:function(){return this._sceneDirection},set:function(e){this._sceneDirection=e},enumerable:!1,configurable:!0}),n);function n(e){this.configManager=e,this._designWidth=1280,this._designHeight=720,this.sceneSizeChangeListener=new t.SceneSizeChangeListener(e,this),this.sceneStyleHandler=new t.SceneStyleHandler(this),this.style=t.type.SceneStyleType.HORIZONTAL}t.SceneManager=e}(fcc=fcc||{}),function(n){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),n.slotStyleMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;n.ErrorManager.instance.executeError(n.type.ErrorType.SLOT_STYLE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.setSlotTemplate=function(e){return this.template=e,this},t.prototype.setSlotStyle=function(e){return new e(this)},t.prototype.build=function(e){this.template||n.ErrorManager.instance.executeError(n.type.ErrorType.UNDEFINED_FW,"Slot Template 未賦予,需實做一個SlotTemplate");var t=new this.template(e,this.configManager);this._slot.set(e.tag,t),this._slotStyle.set(e.tag,e)},Object.defineProperty(t.prototype,"slot",{get:function(){return this._slot},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyle",{get:function(){return this._slotStyle},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this._slot=new Map,this._slotStyle=new Map}n.SlotStyleManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AutoType||(e.AutoType={}))[e.AUTO=-1]="AUTO",e[e.FREE_END=-2]="FREE_END",e[e.AUTO_50=50]="AUTO_50",e[e.AUTO_100=100]="AUTO_100",e[e.AUTO_500=500]="AUTO_500",e[e.AUTO_1000=1e3]="AUTO_1000"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LanguageType||(e.LanguageType={})).TAIWAN="NTD",e.CHINESE="CNY",e.THAILAND="THB",e.AMERICA="USD",e.VIETNAM="VND",e.INDONESIA="IDR",e.MALAYSIA="MYR"}(fcc=fcc||{}),function(e){var t=(Object.defineProperty(n,"instance",{get:function(){return this._instance||(this._instance=new n),this._instance},enumerable:!1,configurable:!0}),n.prototype.setGameNumber=function(e){return this._gameNumber=e,this},n.prototype.setMusicVolume=function(e){return this._musicVolume=e,this},n.prototype.setEffectVolume=function(e){return this._effectVolume=e,this},n.prototype.setMusicOnMute=function(e){return this._isMusicOnMute=e,this},n.prototype.setEffectOnMute=function(e){return this._isEffectOnMute=e,this},n.prototype.setAutoCont=function(e){return this._autoCount=e,this},n.prototype.setExternallyLoadURL=function(e){return this._externallyLoadURL=e,this},n.prototype.setLanguage=function(e){return this._language=e,this},n.prototype.setAutoState=function(e){return this._isAuto=e,this},n.prototype.setSpeedState=function(e){return this._isSpeedUp=e,this},n.prototype.setFrameWorkDebug=function(e){return this._isFrameworkDebug=e,this},n.prototype.setCocosDebug=function(e){return this._cocosDebugSetting=e,this},n.prototype.setBackHomeURL=function(e){return this._backHomeURL=e,this},n.prototype.build=function(){cc.debug._resetDebugSetting(this._cocosDebugSetting),e.ErrorManager.setInstance(this),e.AudioManager.setInstance(this),e.LanguageManager.setInstance(this),e.EventManager.setInstance(this),e.LoadResManager.setInstance(this),e.ProcessManager.setInstance(this),e.SceneManager.setInstance(this),e.SlotStyleManager.setInstance(this)},Object.defineProperty(n.prototype,"externallyLoadURL",{get:function(){return this._externallyLoadURL},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"gameNumber",{get:function(){return this._gameNumber},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isAuto",{get:function(){return this._isAuto},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"autoCount",{get:function(){return this._autoCount},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isSpeedUp",{get:function(){return this._isSpeedUp},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"musicVolume",{get:function(){return this._musicVolume},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"effectVolume",{get:function(){return this._effectVolume},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"language",{get:function(){return this._language},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isFrameworkDebug",{get:function(){return this._isFrameworkDebug},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isEffectOnMute",{get:function(){return this._isEffectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isMusicOnMute",{get:function(){return this._isMusicOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"backHomeURL",{get:function(){return this._backHomeURL},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"cocosDebugSetting",{get:function(){return this._cocosDebugSetting},enumerable:!1,configurable:!0}),n);function n(){this._gameNumber=null,this._externallyLoadURL="",this._isAuto=!1,this._isSpeedUp=!1,this._autoCount=e.type.AutoType.AUTO,this._musicVolume=1,this._effectVolume=1,this._isMusicOnMute=!1,this._isEffectOnMute=!1,this._language=e.type.LanguageType.CHINESE,this._backHomeURL="",this._cocosDebugSetting=cc.debug.DebugMode.INFO,this._isFrameworkDebug=!0}e.SlotConfigManager=t}(fcc=fcc||{}),function(e){function t(e,t,n,r){this.scriptName=e,this.type=t,this.url=n,this.parameter=r}e=e.ABS||(e.ABS={}),t.head=document.getElementsByTagName("head")[0],e.ALoadScriptType=t}(fcc=fcc||{}),function(n){var o,e=(o=n.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=n.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".css"+this.parameter;n.LoadResManager.instance.scriptRes.has(t)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.rel="stylesheet",this.linkElem.type=this.type,this.linkElem.href=t,this.linkElem.onload=function(){n.LoadResManager.instance.scriptRes.add(t),n.ABS.ALoadScriptType.head.appendChild(e.linkElem),n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},n.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,n,r){r=o.call(this,e,t,n,r)||this;return r.linkElem=document.createElement("link"),r}n.CSSLoad=e}(fcc=fcc||{}),function(n){var o,e=(o=n.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=n.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".js"+this.parameter;n.LoadResManager.instance.scriptRes.has(t)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.type=this.type,this.linkElem.src=t,this.linkElem.onload=function(){n.LoadResManager.instance.scriptRes.add(t),n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},n.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,n,r){r=o.call(this,e,t,n,r)||this;return r.linkElem=document.createElement("script"),r}n.ScriptLoad=e}(fcc=fcc||{}),function(r){var e;function t(e,t,n,r){this.type=t,this.url=n,this.dataName=e,this.folder=r,this.beforeProgress=0,this.assetBundle=cc.assetManager.getBundle(this.folder)}e=r.ABS||(r.ABS={}),t.prototype.loadResources=function(){this.type!==cc.SceneAsset?this.assetBundle.loadDir(this.url,this.type,this.loadResProgress.bind(this),this.loadResCallBack.bind(this)):this.assetBundle.loadScene(this.dataName,cc.SceneAsset,this.loadResProgress.bind(this),this.loadResCallBack.bind(this))},t.prototype.loadResCallBack=function(e,t){e?r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e):t instanceof cc.SceneAsset||0!=t.length||r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"無載入任何資源 "+this.url+" "),this.setResToManager(this.dataName,t)},t.prototype.loadResProgress=function(e,t){t=r.global.Util.roundDown(e/t,2);t>this.beforeProgress&&(this.updateManagerState(this.dataName,t=1<=t?.99:t,t-this.beforeProgress),this.beforeProgress=t)},t.prototype.updateProgressEnd=function(){"resources"===this.folder?(r.LoadResManager.instance.initialLoadState.set(this.dataName,1),r.LoadResManager.instance.loadMainEventCallback(this.dataName,.01,1)):(r.LoadResManager.instance.secondaryLoadState.set(this.dataName,1),r.LoadResManager.instance.loadSecondaryEventCallback(this.dataName,1)),this.continueLoad()},t.prototype.continueLoad=function(){var e;r.LoadResManager.instance.currentLoadOrder.length&&(r.LoadResManager.instance.currentLoadOrder.shift(),0<r.LoadResManager.instance.currentLoadOrder.length&&(e=r.LoadResManager.instance.currentLoadOrder[0],r.LoadResManager.instance.executeLoad(e)))},t.prototype.updateManagerState=function(e,t,n){"resources"===this.folder?(r.LoadResManager.instance.initialLoadState.set(e,t),r.LoadResManager.instance.loadMainEventCallback(e,n,t)):(r.LoadResManager.instance.secondaryLoadState.set(e,t),r.LoadResManager.instance.loadSecondaryEventCallback(e,t))},e.ALoadType=t}(fcc=fcc||{}),function(c){var o,e=(o=c.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s=a.value;o.set(s.name,s)}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}c.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}c.ImgLoad=e}(fcc=fcc||{}),function(c){var o,e=(o=c.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value,s=a.name;c.LoadResManager.instance.musicRes.has(s)&&c.ErrorManager.instance.executeError(c.type.ErrorType.LOAD_FW,s+" 鍵值重複,請檢查該音樂資源是否已加載過"),c.LoadResManager.instance.musicRes.set(s,a)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}c.MusicLoad=e}(fcc=fcc||{}),function(s){var o,e=(o=s.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value;if(s.LoadResManager.instance.prefabRes.has(a.name))return void s.ErrorManager.instance.executeError(s.type.ErrorType.LOAD_FW,a.name+" prefab名稱重複,請檢查是否有相同名稱prefab");s.LoadResManager.instance.prefabRes.set(a.name,a)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}s.PrefabLoad=e}(fcc=fcc||{}),function(n){var o,e=(o=n.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){n.LoadResManager.instance.scriptRes.has(e)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e+" 鍵值重複,請檢查該資源是否已加載過"),n.LoadResManager.instance.sceneRes.set(e,t),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}n.SceneLoad=e}(fcc=fcc||{}),function(d){var o,e=(o=d.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,o,i;d.LoadResManager.instance.spineRes.has(e)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,"請檢察資源是否以載入過,鍵值重複"),d.LoadResManager.instance.spineRes.set(e,t[0]);var a=e.toLowerCase().match("grid");try{for(var s=__values(t),c=s.next();!c.done;c=s.next()){var u=c.value,p=Object.keys(u.skeletonJson.animations),l=new Map;try{for(var f=(o=void 0,__values(p)),h=f.next();!h.done;h=f.next()){var y,g=h.value;!a||""===(y=g.replace(/[^0-9]/gi,""))?l.set(g,g):(l.has(y)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,g+" spine動畫取number有誤,請檢查該spine Animation是否有重複數字情況"),l.set(y,g))}}catch(e){o={error:e}}finally{try{h&&!h.done&&(i=f.return)&&i.call(f)}finally{if(o)throw o.error}}}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}d.SpineLoad=e}(fcc=fcc||{}),function(l){var o,e=(o=l.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,t=t[0].text.split(/[\s\n]/),o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s,c=a.value.split(","),u=c[0],p=c[1];""!=u&&(s=p.replace(/['"]/g,""),o.set(u,s))}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}l.LoadResManager.instance.readFileRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}l.TextLoad=e}(fcc=fcc||{}),function(i){var e=(t.prototype.loadOutSideBundle=function(r){var o=this;return new Promise(function(n){if(o.assetBundles.has(r.bundleName))return n();var e={version:r.version};cc.assetManager.loadBundle(r.bundleURL,e,function(e,t){e&&i.ErrorManager.instance.executeError(i.type.ErrorType.LOAD_FW,e),o.assetBundles.set(r.bundleName,t),n()})})},t.prototype.loadInSideBundle=function(e,t,n){var r=this;return new Promise(function(n){if(r.assetBundles.has("secondaryRes"))return n();cc.assetManager.loadBundle("secondaryRes",function(e,t){e&&i.ErrorManager.instance.executeError(i.type.ErrorType.LOAD_FW,e),r.assetBundles.set("secondaryRes",t),n()})})},t.prototype.executeLoad=function(e,t,n){this.checkLoadType(e,t,n,"resources")},t.prototype.executeLoadBundle=function(t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadInSideBundle(t,n,r)];case 1:return e.sent(),this.checkLoadType(t,n,r,"secondaryRes"),[2]}})})},t.prototype.executeLoadOutSideBundle=function(t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadOutSideBundle(t)];case 1:return e.sent(),this.checkLoadType(t.name,t.loadType,t.url,t.bundleName),[2]}})})},t.prototype.checkLoadType=function(e,t,n,r){switch(t){case i.type.LoadType.IMG:new i.ImgLoad(e,cc.SpriteFrame,n,r).loadResources();break;case i.type.LoadType.IMG_ATLAS:new i.ImgAtlasLoad(e,cc.SpriteAtlas,n,r).loadResources();break;case i.type.LoadType.MUSIC:new i.MusicLoad(e,cc.AudioClip,n,r).loadResources();break;case i.type.LoadType.PREFAB:new i.PrefabLoad(e,cc.Prefab,n,r).loadResources();break;case i.type.LoadType.SPINE:new i.SpineLoad(e,sp.SkeletonData,n,r).loadResources();break;case i.type.LoadType.SCENE:new i.SceneLoad(e,cc.SceneAsset,null,r).loadResources();break;case i.type.LoadType.TEXT:new i.TextLoad(e,cc.TextAsset,n,r).loadResources();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"資源類型錯誤,尚無此類型載入方法")}},t.prototype.executeLoadExternalScript=function(e,t,n,r){switch(t){case i.type.LoadType.CSS:new i.CSSLoad(e,"text/css",n,r).loadScript();break;case i.type.LoadType.SCRIPT:new i.ScriptLoad(e,"text/javascript",n,r).loadScript();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"LoadType 無法偵測")}},t);function t(e,t){this.configManager=t,this.loadResManager=e,this.assetBundles=new Map}i.LoadTypeFactory=e}(fcc=fcc||{}),function(n){var e=(t.prototype.executeLoad=function(e,t,n){this.checkRepeatTheName(e),this.loadResManager.initialLoadState.set(e,null),this.factory.executeLoad(e,t,n)},t.prototype.executeLoadBundle=function(t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t),this.loadResManager.secondaryLoadState.set(t,null),[4,this.factory.executeLoadBundle(t,n,r)];case 1:return e.sent(),[2]}})})},t.prototype.executeLoadOutSideBundle=function(t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t.name),this.loadResManager.secondaryLoadState.set(t.name,null),[4,this.factory.executeLoadOutSideBundle(t)];case 1:return e.sent(),[2]}})})},t.prototype.checkRepeatTheName=function(e){this.loadResManager.initialLoadState.has(e)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e+" 此(主資源)已載入過了,或名稱重複,請檢察"),this.loadResManager.secondaryLoadState.has(e)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e+" 此(次資源)已載入過了,或名稱重複,請檢察")},t.prototype.executeLoadExternalScript=function(e,t,n,r){this.factory.executeLoadExternalScript(e,t,n,r)},t);function t(e,t){this.loadResManager=e,this.factory=new n.LoadTypeFactory(e,t)}n.LoadTypeHandler=e}(fcc=fcc||{}),function(o){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),o.loadMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;o.ErrorManager.instance.executeError(o.type.ErrorType.LOAD_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.loadMainEventCallback=function(e,t,n){this.onlyResEventCallback(e,n),this.allProgress+=t/this.count,1<=this.allProgress&&(this.allProgress=.99),1==n&&(this.allProgressEndCount+=1,this.allProgressEndCount==this.count&&(this.allProgress=1)),this.callFun.has(null)&&(o.global.Util.roundDown(this.beforeProgress,2)==o.global.Util.roundDown(this.allProgress,2)||(this.beforeProgress=this.allProgress,this.callFun.get(null)(o.global.Util.roundDown(this.allProgress,2)),1<=this.allProgress&&(this.count=0,this.callFun.delete(null))))},t.prototype.loadSecondaryEventCallback=function(e,t){this.onlyResEventCallback(e,t)},t.prototype.loadScriptEventCallback=function(e,t){this.onlyResEventCallback(e,1,t)},t.prototype.onlyResEventCallback=function(e,t,n){var r;this.callFun.has(e)&&(r=this.callFun.get(e),1==t&&this.callFun.delete(e),n?r(t,n):r(t))},t.prototype.loadAsset=function(e,t,n,r){return this.count+=1,r&&(n=n+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeLoad(e,t,n),this.currentLoadOrder.push({name:e,loadType:t,url:n,assetMode:o.type.ASSET_MODE.RESOURCES}),this},t.prototype.loadBundle=function(e,t,n,r){return r&&(n=n+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeLoadBundle(e,t,n).then(),this.currentLoadOrder.push({name:e,loadType:t,url:n,assetMode:o.type.ASSET_MODE.IN_SIDE_BUNDLE}),this},t.prototype.loadOutSideAsset=function(e){return e.isLanguageUsed&&(e.url=e.url+"/"+this.configManager.language),0==this.currentLoadOrder.length&&this.loadTypeHandler.executeLoadOutSideBundle(e).then(),this.currentLoadOrder.push(e),this},t.prototype.executeLoad=function(e){switch(e.assetMode){case o.type.ASSET_MODE.RESOURCES:this.loadTypeHandler.executeLoad(e.name,e.loadType,e.url);break;case o.type.ASSET_MODE.IN_SIDE_BUNDLE:this.loadTypeHandler.executeLoadBundle(e.name,e.loadType,e.url).then();break;case o.type.ASSET_MODE.OUT_SIDE_ASSET:this.loadTypeHandler.executeLoadOutSideBundle(e).then()}},t.prototype.callback=function(e,t){if(t){if(!this.callFun.has(t))return this.callFun.set(t,e),this;o.ErrorManager.instance.executeError(o.type.ErrorType.LOAD_FW,"如果拿取該資源進度,請勿重複callback")}else this.callFun.has(null)?o.ErrorManager.instance.executeError(o.type.ErrorType.LOAD_FW,"如果拿取總進度,請勿在之前資源尚未加載完前,重複callback"):this.callFun.set(null,e)},t.prototype.getLoadState=function(e,t){return t?1==this._initialLoadState.get(e):1==this._secondaryLoadState.get(e)},t.prototype.loadExternalScript=function(e,t,n,r){return this.loadTypeHandler.executeLoadExternalScript(e,t,n,r=void 0===r?"":r),this},t.prototype.remove=function(e){switch(e){case o.type.LoadType.SPINE:this.spineRes.clear();break;case o.type.LoadType.MUSIC:this.musicRes.clear();break;case o.type.LoadType.PREFAB:this.prefabRes.clear();break;case o.type.LoadType.SCENE:this.sceneRes.clear();break;case o.type.LoadType.TEXT:this.readFileRes.clear()}},Object.defineProperty(t.prototype,"initialLoadState",{get:function(){return this._initialLoadState},set:function(e){this._initialLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"secondaryLoadState",{get:function(){return this._secondaryLoadState},set:function(e){this._secondaryLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"imgRes",{get:function(){return this._imgRes},set:function(e){this._imgRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spineRes",{get:function(){return this._spineRes},set:function(e){this._spineRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"readFileRes",{get:function(){return this._readFileRes},set:function(e){this._readFileRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"prefabRes",{get:function(){return this._prefabRes},set:function(e){this._prefabRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicRes",{get:function(){return this._musicRes},set:function(e){this._musicRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptRes",{get:function(){return this._scriptRes},set:function(e){this._scriptRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sceneRes",{get:function(){return this._sceneRes},set:function(e){this._sceneRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptLoadState",{get:function(){return this._scriptLoadState},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.loadTypeHandler=new o.LoadTypeHandler(this,e),this._initialLoadState=new Map,this._secondaryLoadState=new Map,this._scriptLoadState=new Map,this._imgRes=new Map,this._spineRes=new Map,this._readFileRes=new Map,this._prefabRes=new Map,this.callFun=new Map,this._musicRes=new Map,this._scriptRes=new Set,this._sceneRes=new Map,this.count=0,this.allProgress=0,this.beforeProgress=0,this.allProgressEndCount=0,this.currentLoadOrder=new Array}o.LoadResManager=e}(fcc=fcc||{}),function(o){var i;(e=i=i||{})[e.STOP=-1]="STOP",e[e.PLAYING=1]="PLAYING",e[e.PAUSE=2]="PAUSE";var e=(t.prototype.play=function(e,t){var n=t.get("volume"),r=t.get("loop"),t=cc.audioEngine.getState(this.musicID);o.LoadResManager.instance.musicRes.has(e)?t!=i.PAUSE?(t==i.PLAYING&&this.stop(),t=o.LoadResManager.instance.musicRes.get(e),r=cc.audioEngine.playMusic(t,r),cc.audioEngine.setVolume(r,n),this.musicID=r):cc.audioEngine.resume(this.musicID):o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(){cc.audioEngine.setVolume(this.musicID,0),cc.audioEngine.stop(this.musicID)},t.prototype.pause=function(){cc.audioEngine.getState(this.musicID)==cc.audioEngine.AudioState.PLAYING&&cc.audioEngine.pause(this.musicID)},t);function t(){this.musicID=null}o.MusicController=e}(fcc=fcc||{}),function(a){var e=(t.prototype.play=function(e,t){var n=t.get("volume"),r=t.get("canSuperimpose"),o=t.get("loop"),i=this.effectID.get(e),t=cc.audioEngine.getState(i)!=cc.audioEngine.AudioState.ERROR;a.LoadResManager.instance.musicRes.has(e)?r===a.type.AudioStateType.NOT_PLAYING&&t||(r===a.type.AudioStateType.CLEAR_TO_REPLAY&&t&&cc.audioEngine.stop(i),i=a.LoadResManager.instance.musicRes.get(e),o=cc.audioEngine.playEffect(i,o),cc.audioEngine.setVolume(o,n),this.effectID.set(e,o)):a.ErrorManager.instance.executeError(a.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(e){this.effectID.has(e)&&(cc.audioEngine.stop(this.effectID.get(e)),this.effectID.delete(e))},t.prototype.stopAll=function(){var t,e;try{for(var n=__values(this.effectID.keys()),r=n.next();!r.done;r=n.next()){var o=r.value;cc.audioEngine.stop(this.effectID.get(o))}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.effectID.clear()},t);function t(){this.effectID=new Map}a.EffectController=e}(fcc=fcc||{}),function(i){var e=(t.prototype.initializeData=function(){this.musicNormalData=new Map,this.effectNormalData=new Map,this.musicNormalData.set("volume",this.musicVolume),this.musicNormalData.set("loop",this.loop),this.effectNormalData.set("canSuperimpose",i.type.AudioStateType.NOT_PLAYING),this.effectNormalData.set("volume",this.effectVolume),this.effectNormalData.set("loop",this.loop)},t.prototype.settingMusic=function(e,t,n){void 0===t&&(t=this.musicVolume),void 0===n&&(n=this.loop);var r=new Map;r.set("volume",t),r.set("loop",n),this.musicData.set(e,r)},t.prototype.settingEffect=function(e,t,n,r){void 0===t&&(t=i.type.AudioStateType.NOT_PLAYING),void 0===n&&(n=this.musicVolume),void 0===r&&(r=this.loop);var o=new Map;o.set("canSuperimpose",t),o.set("volume",n),o.set("loop",r),this.effectData.set(e,o)},t.prototype.musicPlay=function(e){e.trim()&&(this.audioManager.musicOnMute||(this.musicData.has(e)?this.musicController.play(e,this.musicData.get(e)):(this.musicData.set(e,this.musicNormalData),this.musicController.play(e,this.musicNormalData))))},t.prototype.effectPlay=function(e){e.trim()&&(this.audioManager.effectOnMute||(this.effectData.has(e)?this.effectController.play(e,this.effectData.get(e)):(this.effectData.set(e,this.effectNormalData),this.effectController.play(e,this.effectNormalData))))},t.prototype.musicStop=function(){this.musicController.stop()},t.prototype.musicPause=function(){this.musicController.pause()},t.prototype.effectStop=function(e){this.effectController.stop(e)},t.prototype.effectStopAll=function(){this.effectController.stopAll()},t.prototype.getMusicState=function(e){return this.musicData.get(e)},t.prototype.getEffectState=function(e){return this.effectData.get(e)},t);function t(e,t){this.audioManager=e,this.configManager=t,this.musicVolume=this.configManager.musicVolume,this.effectVolume=this.configManager.effectVolume,this.canSuperimpose=!1,this.musicOnMute=this.configManager.isMusicOnMute,this.effectOnMute=this.configManager.isEffectOnMute,this.loop=!1,this.musicData=new Map,this.effectData=new Map,this.musicController=new i.MusicController,this.effectController=new i.EffectController,this.initializeData()}i.AudioFactory=e}(fcc=fcc||{}),function(o){var i=(t.setInstance=function(e){this._instance||(this._instance=new t(e),o.audioMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.settingMusic=function(e,t,n){return this.factory.settingMusic(e,t,n),this},t.prototype.settingEffect=function(e,t,n,r){return t===o.type.AudioStateType.SUPERIMPOSE&&r&&o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 使用疊加效果時不建議使用循環撥放"),this.factory.settingEffect(e,t,n,r),this},t.prototype.musicPlay=function(e){this.factory.musicPlay(e)},t.prototype.effectPlay=function(e){this.factory.effectPlay(e)},t.prototype.musicStop=function(){this.factory.musicStop()},t.prototype.musicPause=function(){this.factory.musicPause()},t.prototype.effectStop=function(e){this.factory.effectStop(e)},t.prototype.effectStopAll=function(){this.factory.effectStopAll()},t.prototype.getMusicState=function(e){return this.factory.getMusicState(e)},t.prototype.getEffectState=function(e){return this.factory.getEffectState(e)},t.prototype.updateEffectOnMute=function(){return this._effectOnMute=!this._effectOnMute,this._effectOnMute&&this.factory.effectStopAll(),this._effectOnMute},t.prototype.updateMusicOnMute=function(){return this._musicOnMute=!this._musicOnMute,this._musicOnMute&&this.musicPause(),this._musicOnMute},Object.defineProperty(t.prototype,"effectOnMute",{get:function(){return this._effectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicOnMute",{get:function(){return this._musicOnMute},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.factory=new o.AudioFactory(this,e),this._effectOnMute=this.configManager.isEffectOnMute,this._musicOnMute=this.configManager.isMusicOnMute}o.AudioManager=i,o.Music=function(o){return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicPlay(o),r.call.apply(r,__spreadArray([this],__read(e)))}}},o.MusicStop=function(){return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicStop(),r.call.apply(r,__spreadArray([this],__read(e)))}}},o.Effect=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectPlay(e)}),r.call.apply(r,__spreadArray([this],__read(e)))}}},o.EffectStop=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectStop(e)}),r.call.apply(r,__spreadArray([this],__read(e)))}}}}(fcc=fcc||{}),function(l){var e={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},t={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},n={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},r={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},o={fontSize:30,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},i={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},a={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},s=(c.setInstance=function(e){this._instance||(this._instance=new c(e),l.languageMgr=this._instance)},Object.defineProperty(c,"instance",{get:function(){if(this._instance)return this._instance;l.ErrorManager.instance.executeError(l.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),c.prototype.initDefaultStyle=function(){this._style.set(l.type.LanguageType.TAIWAN,t),this._style.set(l.type.LanguageType.CHINESE,e),this._style.set(l.type.LanguageType.AMERICA,n),this._style.set(l.type.LanguageType.INDONESIA,i),this._style.set(l.type.LanguageType.THAILAND,o),this._style.set(l.type.LanguageType.MALAYSIA,a),this._style.set(l.type.LanguageType.VIETNAM,r)},c.prototype.addStyle=function(e,t){this._style.set(e,t)},c.prototype.updateLanguage=function(e){var t,n,r,o;if(this._nowLang!=e){this._nowLang=e;try{for(var i=__values(this.allLanguageLabel),a=i.next();!a.done;a=i.next()){var s=a.value;try{for(var c=(r=void 0,__values(s.keys())),u=c.next();!u.done;u=c.next()){var p=u.value,l=s.get(p);this.updateText(p,l)}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=c.return)&&o.call(c)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}this.updateStyle(!1)}},c.prototype.setLanguage=function(e){this.languageCache||(this.languageCache=e[this._nowLang])},c.prototype.getLanguage=function(){return this._nowLang},c.prototype.getText=function(e){return this.languageCache[e]},c.prototype.getAllText=function(){return this.languageCache},c.prototype.reTakeLanguageBuffer=function(e,t){try{this.languageCache=t?e[t]:e[this._nowLang]}catch(e){console.log("window.language_Mode 查找不到該語系",e)}},c.prototype.removeStringBuffer=function(){},c.prototype.updateText=function(e,t){return t&&(e.string=this.getText(t)),this._nowLanguageLabels.set(e,t),this},c.prototype.updateStyle=function(e,t){var n,r,o=this._nowLang;this._style.has(this._nowLang)||(o=l.type.LanguageType.AMERICA);var i=this._style.get(o).fontFamily,a=t||this._style.get(o).fontSize,s=this._style.get(o).lineHeight;try{for(var c=__values(this._nowLanguageLabels.keys()),u=c.next();!u.done;u=c.next()){var p=u.value;p.fontFamily=i,p.fontSize=a,p.lineHeight=s}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}e&&this.allLanguageLabel.push(this._nowLanguageLabels),this._nowLanguageLabels.clear()},c);function c(e){this.configManager=e,this._style=new Map,this.allLanguageLabel=new Array,this._nowLanguageLabels=new Map,this.initDefaultStyle(),this._nowLang=this.configManager.language}l.LanguageManager=s}(fcc=fcc||{}),function(t){var e=(n.instance=function(){return this._instance||(this._instance=new n),this._instance},n.prototype.setNotification=function(e){return this.notificationToMap.has(e.TAG_NAME)||this.notificationToMap.set(e.TAG_NAME,e),this},n.prototype.getNotification=function(e){if(this.notificationToMap.has(e))return this.notificationToMap.get(e);t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,e+" :  該key尚未加入推撥事件中,你需先執行 setNotification(type:IBaseNotification)方法")},n.prototype.hasNotification=function(e){return this.notificationToMap.has(e)},n.prototype.getAllNotifications=function(){return this.notificationToMap},n);function n(){this.notificationToMap=new Map}t.NotificationManager=e}(fcc=fcc||{}),function(e){var t=(n.prototype.getName=function(){return this.name},n.prototype.get=function(){return 0<this.pool.size()?this.pool.get():this.getNode()},n.prototype.getNode=function(){return this.prefab?cc.instantiate(this.prefab):(console.error(" 预制体没有赋值 "),null)},n.prototype.size=function(){return this.pool.size()},n.prototype.put=function(e){this.pool.put(e)},n.prototype.clear=function(){this.pool.clear()},n);function n(e,t,n){this.name=e,this.pool=new cc.NodePool,this.prefab=t;for(var r=0;r<n;r++){var o=this.getNode();this.pool.put(o)}}e.CCNodePool=t}(fcc=fcc||{}),function(e){var t=(n.prototype.get=function(){return 0<this.list.length?this.list.shift():this.pool.get()},n.prototype.getPool=function(){return this.pool},n.prototype.size=function(){return this.pool.size()+this.list.length},n.prototype.put=function(e,t){(t=void 0===t?!1:t)?this.pool.put(e):(this.list.push(e),e.stopAllActions(),e.active=!1)},n.prototype.clear=function(){this.pool.clear(),this.list.length=0},n);function n(e){this.list=[],this.pool=e}e.SelfPool=t}(fcc=fcc||{}),function(r){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.init=function(e,t,n){this.pools.has(e)||this.pools.set(e,new r.SelfPool(new r.CCNodePool(e,t,n)))},t.prototype.getPool=function(e){return this.pools.get(e).getPool()},t.prototype.get=function(e){if(this.pools.has(e)){var t=this.pools.get(e).get();return this.nameMap.has(t)||t.name==e||this.nameMap.set(t,e),t}return null},t.prototype.put=function(e,t){var n=this.nameMap.get(e);this.pools.has(n)?(this.pools.get(n).put(e,t),this.nameMap.delete(e)):cc.warn(" not have name ",n," ,go.name ",e.name)},t.prototype.clear=function(e){this.pools.has(e)&&(this.pools.get(e).clear(),this.pools.delete(e))},t.prototype.clearAll=function(){for(var e in this.pools)this.clear(e);this.pools.clear()},t);function t(){this.pools=new Map,this.nameMap=new Map}r.NodePoolManager=e}(fcc=fcc||{}),function(e){e.configMgr=e.SlotConfigManager.instance,e.nodePoolMgr=e.NodePoolManager.instance,e.notificationMgr=function(){return e.NotificationManager.instance()}}(fcc=fcc||{}),globalThis.fcc=fcc,globalThis.FCC_VERSION="1.0.1",function(e){function t(){}e=e.global||(e.global={}),t.addButtonEvent=function(e,t,n,r){var o=n.node,i=cc.js.getClassName(n),n=new cc.Component.EventHandler;n.target=o,n.component=i,n.handler=t,!r&&0!=r||(n.customEventData=r),e.clickEvents.push(n)},t.disableButton=function(e){e.interactable=!1},t.enableButton=function(e){e.interactable=!0},t.addTouchStartEvent=function(e,t,n,r){e.on(cc.Node.EventType.TOUCH_START,t,n,r)},t.offTouchStartEvent=function(e,t,n,r){e.off(cc.Node.EventType.TOUCH_START,t,n,r)},e.Button=t}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.getNodeOneChildren=function(e){for(var t=new Map,n=0;n<e.childrenCount;n++)for(var r=e.children[n],o=0;o<=r.childrenCount;o++)t.set(e.children[n].name,r);return t},t.getNodeTowChildren=function(e){for(var t=new Map,n=0;n<e.childrenCount;n++)for(var r=e.children[n],o=r.children[n].name,i=0;i<=r.childrenCount;i++)0==i?t.set(r.children[n].name,r):(o+="/"+r.children[i-1].name,t.set(o,r.children[i-1]),o=r.children[n].name);return t},e.Prefab=t}(fcc=fcc||{}),function(e){var t;t=e.type||(e.type={}),(e=t.GameStateType||(t.GameStateType={})).STANDBY="STANDBY",e.PLAYING="PLAYING",e.WINING="WINING",e.FREEING="FREEING",(t=t.ProcessType||(t.ProcessType={})).FREE="FREE",t.NORMAL="NORMAL"}(fcc=fcc||{}),function(i){var e=(t.prototype.initProcess=function(e){var t,n;if(e)this.processToMap.has(e)?this.processToMap.get(e).executionContent.onCreate():i.ErrorManager.instance.executeError(i.type.ErrorType.PROCESS_FW,"查找不到該流程,請確認是否已綁定進框架中");else{e=this.processToMap.values();try{for(var r=__values(e),o=r.next();!o.done;o=r.next())o.value.executionContent.onCreate()}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}}},t.prototype.setProcess=function(e,t){this.processToMap.set(e,t)},t.prototype.getProcess=function(e){return this.processToMap.get(e)},t.prototype.getAllProcess=function(){return this.processToMap},t.prototype.changeProcess=function(e){this.processToMap.has(e)?this.process=this.processToMap.get(e):i.ErrorManager.instance.executeError(i.type.ErrorType.PROCESS_FW,e+" 搜尋不到此流程,請檢查流程是否添加")},t.prototype.useProcess=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.process.start()];case 1:return e.sent(),[2]}})})},t);function t(e){this.gameManager=e,this.processToMap=new Map}i.GameProcessFactory=e}(fcc=fcc||{}),(fcc||(fcc={})).ABaseSlotTemplate=function(e,t){},function(e){var t=(n.prototype.get=function(e){return 0<this.buffList.length?this.buffList.shift():e()},n.prototype.put=function(e){this.buffList.push(e)},n.prototype.size=function(){return this.buffList.length},n.prototype.destroy=function(){this.buffList.length=0},n);function n(e){this.buffList=[],this.key=e}e.ObjectPool=t}(fcc=fcc||{}),function(n){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.get=function(e,t){return this.map.has(e)||this.map.set(e,new n.ObjectPool(e)),this.map.get(e).get(t)},t.prototype.put=function(e,t){this.map.has(e)&&this.map.get(e).put(t)},t.prototype.size=function(e){return this.map.has(e)?this.map.get(e).size():0},t.prototype.destroy=function(){this.map.clear()},t);function t(){this.map=new Map}n.PoolManager=e}(fcc=fcc||{}),function(e){var t=(n.prototype.getClassName=function(){return this.className},n.prototype.get=function(e){return(0<this.pool.length?this.pool.shift():null)||new e},n.prototype.put=function(e){this.pool.push(e)},n.prototype.clear=function(){this.pool=[]},n);function n(e,t,n){void 0===n&&(n=0),this.pool=[],this.className=e;for(var r=0;r<n;r++)this.pool.push(new t)}e.TSObjectPool=t}(fcc=fcc||{}),function(r){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.init=function(e,t,n){void 0===n&&(n=1),this.pools[e]||this.pools.set(e,new r.TSObjectPool(e,t,n))},t.prototype.get=function(e,t,n){return void 0===n&&(n=1),this.pools.has(e)||this.pools.set(e,new r.TSObjectPool(e,t,n)),this.pools.get(e).get(t)},t.prototype.put=function(e,t){e=this.pools.get(e);e&&e.put(t)},t);function t(){this.pools=new Map}r.TSPoolManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).ServerEventType||(e.ServerEventType={})).BET_RESULT="BET_RESULT",e.FREE_SPIN_RESULT="FREE_SPIN_RESULT",e.CAN_PLAY_GAME="CAN_PLAY_GAME",e.GET_GAME_HISTORY_RESULT="GET_GAME_HISTORY_RESULT",e.GET_HISTORY_DETAIL_RESULT="GET_HISTORY_DETAIL_RESULT",e.GROUP_ID="GROUP_ID",e.TABLE_INFO="TABLE_INFO",e.WARNING="WARNING"}(fcc=fcc||{}),function(e){function t(e,t){this._isPermanent=!1,this._self=t,this._callFun=e}e=e.ABS||(e.ABS={}),t.prototype.pushNotification=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];(e=this._callFun).call.apply(e,__spreadArray([this._self],__read(t)))},Object.defineProperty(t.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),e.ABaseObserver=t}(fcc=fcc||{}),function(e){var t=(n.prototype.onExecution=function(){return this._process.add(this._executionContent.onExecution),this},n.prototype.onEnd=function(){return this._process.add(this._executionContent.onEnd),this},n.prototype.onChangeStatus=function(){return this._process.add(this._executionContent.onChangeStatus),this},n.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var t,n,r,o;return __generator(this,function(e){switch(e.label){case 0:e.trys.push([0,5,6,7]),t=__values(this._process),n=t.next(),e.label=1;case 1:return n.done?[3,4]:[4,n.value.apply(this._executionContent)];case 2:e.sent(),e.label=3;case 3:return n=t.next(),[3,1];case 4:return[3,7];case 5:return r=e.sent(),r={error:r},[3,7];case 6:try{n&&!n.done&&(o=t.return)&&o.call(t)}finally{if(r)throw r.error}return[7];case 7:return[2]}})})},Object.defineProperty(n.prototype,"process",{get:function(){return this._process},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"executionContent",{get:function(){return this._executionContent},enumerable:!1,configurable:!0}),n);function n(e){this._executionContent=e,this._process=new Set}e.GameProcess=t}(fcc=fcc||{}),function(e){var t=(n.prototype.onCustomizeStart=function(){return this._process.add(this._executionContainer.onCustomizeStart),this},n.prototype.onSineInGrid=function(){return this._process.add(this._executionContainer.onSineInGrid),this},n.prototype.onRunning=function(){return this._process.add(this._executionContainer.onRunning),this},n.prototype.onCustomizeEnd=function(){return this._process.add(this._executionContainer.onCustomizeEnd),this},n.prototype.onShowAnswer=function(){return this._process.add(this._executionContainer.onShowAnswer),this},n.prototype.onChangeStatus=function(){return this._process.add(this._executionContainer.onChangeStatus),this},n.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var t,n,r,o;return __generator(this,function(e){switch(e.label){case 0:e.trys.push([0,5,6,7]),t=__values(this._process),n=t.next(),e.label=1;case 1:return n.done?[3,4]:[4,n.value.apply(this._executionContainer)];case 2:e.sent(),e.label=3;case 3:return n=t.next(),[3,1];case 4:return[3,7];case 5:return r=e.sent(),r={error:r},[3,7];case 6:try{n&&!n.done&&(o=t.return)&&o.call(t)}finally{if(r)throw r.error}return[7];case 7:return[2]}})})},Object.defineProperty(n.prototype,"executionContent",{get:function(){return this._executionContainer},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"process",{get:function(){return this._process},enumerable:!1,configurable:!0}),n);function n(e){this._executionContainer=e,this._process=new Set}e.SlotGameProcess=t}(fcc=fcc||{}),function(e){function t(e){this._slotStyleManager=e}e=e.ABS||(e.ABS={}),t.prototype.setTag=function(e){return this._tag=e,this},t.prototype.setSlotTurnCount=function(e){return this._slotTurnCount=e,this},t.prototype.setSlotGridHeight=function(e){return this._slotGridHeight=e,this},t.prototype.setSlotGirdSpeed=function(e){return this._slotGirdSpeed=e,this},t.prototype.setSpeedUpMultiple=function(e){return this._speedUpMultiple=e,this},t.prototype.setStopNowSpeedMultiple=function(e){return this._stopNowSpeedMultiple=e,this},t.prototype.setSlotRowGridCount=function(e){return this._slotRowGridCount=e,this},t.prototype.setColumnIntervalTime=function(e){return this._columnIntervalTime=e,this},t.prototype.setSlotColumnToTween=function(e){return this._slotColumnToTween=e,this},t.prototype.setGridNodeToMap=function(e){return this._gridNodeToMap=e,this},t.prototype.setSineInEasing=function(e){return this._sineInEasing=e,this},t.prototype.setSineOutEasing=function(e){return this._sineOutEasing=e,this},t.prototype.setLookAtSpeed=function(e){return this._lookAtSpeed=e,this},t.prototype.setSlotRowTime=function(e){return this._slotRowTime=e,this},t.prototype.setLookAtTime=function(e){return this._lookAtTime=e,this},t.prototype.setResultModel=function(e){return this._resultModel=e,this},t.prototype.complete=function(){this._slotStyleManager.build(this)},Object.defineProperty(t.prototype,"columnIntervalTime",{get:function(){return this._columnIntervalTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gridNodeToMap",{get:function(){return this._gridNodeToMap},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotColumnToTween",{get:function(){return this._slotColumnToTween},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGirdSpeed",{get:function(){return this._slotGirdSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGridHeight",{get:function(){return this._slotGridHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowGridCount",{get:function(){return this._slotRowGridCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotTurnCount",{get:function(){return this._slotTurnCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"speedUpMultiple",{get:function(){return this._speedUpMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stopNowSpeedMultiple",{get:function(){return this._stopNowSpeedMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyleManager",{get:function(){return this._slotStyleManager},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tag",{get:function(){return this._tag},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resultModel",{get:function(){return this._resultModel},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sineInEasing",{get:function(){return this._sineInEasing},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sineOutEasing",{get:function(){return this._sineOutEasing},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtSpeed",{get:function(){return this._lookAtSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowTime",{get:function(){return this._slotRowTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtTime",{get:function(){return this._lookAtTime},enumerable:!1,configurable:!0}),e.ABaseSlotSetting=t}(fcc=fcc||{}),function(e){var t,n=(t=e.ABS.ABaseSlotSetting,__extends(r,t),r.prototype.setGridImg=function(e){return this._gridImg=e,this},r.prototype.setGirdSpriteToMap=function(e){return this._gridSpriteToMap=e,this},Object.defineProperty(r.prototype,"gridSpriteToMap",{get:function(){return this._gridSpriteToMap},enumerable:!1,configurable:!0}),r.prototype.setResultModel=function(e){return t.prototype.setResultModel.call(this,e)},Object.defineProperty(r.prototype,"gridImg",{get:function(){return this._gridImg},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"resultModel",{get:function(){return this._resultModel},enumerable:!1,configurable:!0}),r);function r(){return null!==t&&t.apply(this,arguments)||this}e.NormalSetting=n}(fcc=fcc||{}),function(e){var t,n=(t=e.NormalSetting,__extends(r,t),r.prototype.setSymbolBlurImg=function(e){return this._symbolBlurImg=e,this},Object.defineProperty(r.prototype,"symbolBlurImg",{get:function(){return this._symbolBlurImg},enumerable:!1,configurable:!0}),r);function r(){return null!==t&&t.apply(this,arguments)||this}e.NormalBlurImageSetting=n}(fcc=fcc||{}),function(p){var o,e=(o=p.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,o=new Map;try{for(var i=__values(t[0].getSpriteFrames()),a=i.next();!a.done;a=i.next()){var s,c,u=a.value;-1!=e.toLowerCase().indexOf("grid")?(s=u.name.replace(/[^0-9]/gi,""),o.set(s,u)):(c=u.name,o.set(c,u))}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}p.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}p.ImgAtlasLoad=e}(fcc=fcc||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvYWQvTG9hZFR5cGUvSW1nQXRsYXNMb2FkLnRzIiwiRXJyb3IvRW51bS9FcnJvclR5cGUudHMiLCJFcnJvci9FcnJvclR5cGUvVW5rbm93bkVycm9yLnRzIiwiRXJyb3IvRXJyb3JUeXBlL0ZyYW1lV29ya0Vycm9yLnRzIiwiRXJyb3IvRXJyb3JUeXBlL09iamVjdEVycm9yLnRzIiwiRXJyb3IvRXJyb3JUeXBlL1NlcnZlckVycm9yLnRzIiwiRXJyb3IvRXJyb3JUeXBlL1dhcm5pbmdFcnJvci50cyIsIkVycm9yL0Vycm9ySGFuZGxlci50cyIsIkVycm9yL0Vycm9yTWFuYWdlci50cyIsIkF1ZGlvL0VudW0vQXVkaW9TdGF0ZVR5cGUudHMiLCJHbG9iYWwvVXRpbC50cyIsIkxvYWQvRW51bS9Mb2FkVHlwZS50cyIsIkxvYWQvRW51bS9BU1NFVF9NT0RFLnRzIiwiRXZlbnQvRXZlbnRNYW5hZ2VyLnRzIiwiUHJvY2Vzcy9Qcm9jZXNzTWFuYWdlci50cyIsIlNjZW5lL0VudW0vU2NlbmVTdHlsZVR5cGUudHMiLCJTY2VuZS9FbnVtL1NjZW5lRGlyZWN0aW9uVHlwZS50cyIsIlNjZW5lL1NjZW5lU2l6ZUNoYW5nZUxpc3RlbmVyLnRzIiwiTm90aWZpY2F0aW9uL05vdGlmaWNhdGlvblR5cGUvQUJhc2VOb3RpZmljYXRpb24udHMiLCJOb3RpZmljYXRpb24vRW51bS9Ob3RpZmljYXRpb25UeXBlLnRzIiwiTm90aWZpY2F0aW9uL09ic2VydmVyVHlwZS9TY2VuZU9ic2VydmVyL1NjZW5lRGlyZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIudHMiLCJOb3RpZmljYXRpb24vTm90aWZpY2F0aW9uVHlwZS9TY2VuZU5vdGlmaWNhdGlvbi9TY2VuZURpcmVjdGlvbkNoYW5nZU5vdGlmaWNhdGlvbi50cyIsIlNjZW5lL1NjZW5lU3R5bGUvQXV0b1N0eWxlLnRzIiwiU2NlbmUvU2NlbmVTdHlsZS9Ib3Jpem9udGFsU3R5bGUudHMiLCJTY2VuZS9TY2VuZVN0eWxlL1ZlcnRpY2FsU3R5bGUudHMiLCJTY2VuZS9TY2VuZVN0eWxlSGFuZGxlci50cyIsIlNjZW5lL1NjZW5lTWFuYWdlci50cyIsIlNsb3QvU2xvdFN0eWxlTWFuYWdlci50cyIsIlByb2Nlc3MvRW51bS9BdXRvVHlwZS50cyIsIkxhbmd1YWdlL0VudW0vTGFuZ3VhZ2VUeXBlLnRzIiwiQ29uZmlnL1Nsb3RDb25maWdNYW5hZ2VyLnRzIiwiTG9hZC9JTG9hZC9BTG9hZFNjcmlwdFR5cGUudHMiLCJMb2FkL0xvYWRTY3JpcHRUeXBlL0NTU0xvYWQudHMiLCJMb2FkL0xvYWRTY3JpcHRUeXBlL1NjcmlwdExvYWQudHMiLCJMb2FkL0lMb2FkL0FMb2FkVHlwZS50cyIsIkxvYWQvTG9hZFR5cGUvSW1nTG9hZC50cyIsIkxvYWQvTG9hZFR5cGUvTXVzaWNMb2FkLnRzIiwiTG9hZC9Mb2FkVHlwZS9QcmVmYWJMb2FkLnRzIiwiTG9hZC9Mb2FkVHlwZS9TY2VuZUxvYWQudHMiLCJMb2FkL0xvYWRUeXBlL1NwaW5lTG9hZC50cyIsIkxvYWQvTG9hZFR5cGUvVGV4dExvYWQudHMiLCJMb2FkL0xvYWRUeXBlRmFjdG9yeS50cyIsIkxvYWQvTG9hZFR5cGVIYW5kbGVyLnRzIiwiTG9hZC9Mb2FkUmVzTWFuYWdlci50cyIsIkF1ZGlvL0F1ZGlvVHlwZS9NdXNpY0NvbnRyb2xsZXIudHMiLCJBdWRpby9BdWRpb1R5cGUvRWZmZWN0Q29udHJvbGxlci50cyIsIkF1ZGlvL0F1ZGlvRmFjdG9yeS50cyIsIkF1ZGlvL0F1ZGlvTWFuYWdlci50cyIsIkxhbmd1YWdlL0xhbmd1YWdlTWFuYWdlci50cyIsIk5vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb25NYW5hZ2VyLnRzIiwiTm9kZVBvb2wvQ0NOb2RlUG9vbC50cyIsIk5vZGVQb29sL1NlbGZQb29sLnRzIiwiTm9kZVBvb2wvTm9kZVBvb2xNYW5hZ2VyLnRzIiwiaW5kZXgudHMiLCJHbG9iYWwvQnV0dG9uLnRzIiwiR2xvYmFsL1ByZWZhYi50cyIsIlByb2Nlc3MvRW51bS9HYW1lU3RhdGUudHMiLCJQcm9jZXNzL0dhbWVQcm9jZXNzRmFjdG9yeS50cyIsIlNsb3QvQUJhc2VTbG90VGVtcGxhdGUudHMiLCJOb2RlUG9vbC9PYmplY3RQb29sLnRzIiwiTm9kZVBvb2wvUG9vbE1hbmFnZXIudHMiLCJOb2RlUG9vbC9UU09iamVjdFBvb2wudHMiLCJOb2RlUG9vbC9UU1Bvb2xNYW5hZ2VyLnRzIiwiRXZlbnQvRW51bS9TZXJ2ZXJFdmVudFR5cGUudHMiLCJOb3RpZmljYXRpb24vT2JzZXJ2ZXJUeXBlL0FCYXNlT2JzZXJ2ZXIudHMiLCJQcm9jZXNzL1Byb2NyZXNzL0dhbWVQcm9jZXNzLnRzIiwiUHJvY2Vzcy9Qcm9jcmVzcy9TbG90R2FtZVByb2Nlc3MudHMiLCJTbG90L1Nsb3RTZXR0aW5nU3R5bGUvQUJhc2VTbG90U2V0dGluZy50cyIsIlNsb3QvU2xvdFNldHRpbmdTdHlsZS9Ob3JtYWxTZXR0aW5nLnRzIiwiU2xvdC9TbG90U2V0dGluZ1N0eWxlL05vcm1hbEJsdXJJbWFnZVNldHRpbmcudHMiXSwibmFtZXMiOlsiZmNjIiwiRXJyb3JUeXBlIiwidHlwZSIsIlVua25vd25FcnJvciIsInByb3RvdHlwZSIsImNoZWNrRXJyb3JUeXBlIiwibWVzc2FnZSIsIm9iaiIsIkVycm9yIiwiY29uZmlnTWFuYWdlciIsInRoaXMiLCJGcmFtZVdvcmtFcnJvciIsImlzRnJhbWV3b3JrRGVidWciLCJJU19SVU5OSU5HX0ZXIiwiVU5ERUZJTkVEX0ZXIiwiVFlQRV9GVyIsIkFOSU1BVElPTl9GVyIsIkxPQURfRlciLCJXRUJfUkVRVUVTVF9GVyIsIkFVRElPX0ZXIiwiV0VCX1JFU1BPTlNFX0ZXIiwiU0NFTkVfRlciLCJQUk9DRVNTX0ZXIiwiTElTVEVORVJfRlciLCJTTE9UX1NUWUxFX0ZXIiwiVEVNUExBVEVfRlciLCJ1bmtub3duRXJyb3IiLCJjb25zb2xlIiwibG9nIiwiT2JqZWN0RXJyb3IiLCJmcmFtZVdvcmtFcnJvciIsImNoZWNrT2JqZWN0VHlwZSIsIlNlcnZlckVycm9yIiwic2hvd0Vycm9yIiwicGVybWFuZW50U3RhdGUiLCJidXR0b25UZXh0IiwiY2FuU2hvd0J1dHRvbiIsIl90aGlzIiwidGltZU91dCIsImNsZWFyVGltZW91dCIsImNjIiwiVHdlZW4iLCJzdG9wQWxsQnlUYXJnZXQiLCJlcnJvck1hbmFnZXIiLCJlcnJvck5vZGUiLCJlcnJvckJ1dHRvbiIsImdldENvbXBvbmVudCIsIkJ1dHRvbiIsImludGVyYWN0YWJsZSIsImFjdGl2ZSIsImNsb3NlQnV0dG9uIiwiZXhlY3V0ZUVycm9yIiwiZXJyb3JMYWJlbCIsIkVycm9yTWFuYWdlciIsImVycm9yU3RhdGUiLCJ0d2VlbiIsInNldCIsIm9wYWNpdHkiLCJzY2FsZSIsImNhbGwiLCJ0byIsImVhc2luZyIsInN0YXJ0Iiwic3RyaW5nIiwiZXJyb3JCdXR0b25MYWJlbCIsImlzU2hvd0JhY2tIb21lQnV0dG9uIiwid2luZG93Iiwic2V0VGltZW91dCIsImVycm9yRGVsYXlUaW1lIiwiV2FybmluZ0Vycm9yIiwidGltZW91dCIsIndhcm5pbmdOb2RlIiwid2FybmluZ0xhYmVsIiwid2FybmluZ0RlbGF5VGltZSIsIndhcm5pbmdTdGF0ZSIsIkVycm9ySGFuZGxlciIsIm9iamVjdEVycm9yIiwiY2hlY2tTZXJ2ZXJFcnJvciIsInNlcnZlckVycm9yIiwiY2hlY2tXYXJuaW5nIiwid2FybmluZ0Vycm9yIiwic2V0SW5zdGFuY2UiLCJfaW5zdGFuY2UiLCJlcnJvck1nciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiaGFuZGxlciIsInNob3dFcnJvckRpYWxvZyIsInNob3dXYXJuaW5nRGlhbG9nIiwic2V0RXJyb3JOb2RlIiwibm9kZSIsIl9lcnJvck5vZGUiLCJzZXRFcnJvckxhYmVsIiwibGFiZWwiLCJfZXJyb3JMYWJlbCIsInNldEVycm9yQnV0dG9uIiwiX2Vycm9yQnV0dG9uIiwic2V0Q2xvc2VCdXR0b25Ob2RlIiwiX2Nsb3NlQnV0dG9uIiwic2V0RXJyb3JEZWxheVRpbWUiLCJ0aW1lIiwiX2Vycm9yRGVsYXlUaW1lIiwic2V0V2FybmluZ0RlbGF5VGltZSIsIl93YXJuaW5nRGVsYXlUaW1lIiwic2V0V2FybmluZ05vZGUiLCJfd2FybmluZ05vZGUiLCJzZXRXYXJuaW5nTGFiZWwiLCJfd2FybmluZ0xhYmVsIiwic2V0RXJyb3JCdXR0b25MYWJlbCIsIl9lcnJvckJ1dHRvbkxhYmVsIiwiX2Vycm9yU3RhdGUiLCJ2YWx1ZSIsIl93YXJuaW5nU3RhdGUiLCJfaXNTaG93QmFja0hvbWVCdXR0b24iLCJiYWNrSG9tZVVSTCIsInRyaW0iLCJBdWRpb1N0YXRlVHlwZSIsIlV0aWwiLCJnbG9iYWwiLCJyb3VuZE9mZiIsImZsb2F0IiwibnVtYmVyIiwiTWF0aCIsInJvdW5kIiwicG93Iiwicm91bmREb3duIiwiZmxvb3IiLCJyb3VuZFVwIiwiY2VpbCIsImRlY2ltYWxzQ291bnQiLCJkZWNpbWFsc0luZGV4IiwiU3RyaW5nIiwiaW5kZXhPZiIsImNvdW50IiwibGVuZ3RoIiwibnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiZm9ybWF0dGluZyIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJMb2FkVHlwZSIsIkFTU0VUX01PREUiLCJFdmVudE1hbmFnZXIiLCJldmVudE1nciIsImluc3RhbmNlIiwiZW1pdEV2ZW50IiwiZXZlbnROYW1lIiwiYW55IiwiX2kiLCJhcmd1bWVudHMiLCJfYSIsInRhcmdldCIsImVtaXQiLCJhcHBseSIsIl9fc3ByZWFkQXJyYXkiLCJfX3JlYWQiLCJldmVudExpc3RlbmVyIiwiY2FsbEZ1biIsImlzUGVybWFuZW50Iiwic2VsZiIsIl9ldmVudENvdW50IiwiX2V2ZW50c0N1cnJlbnRseUJlaW5nIiwib24iLCJvbmNlIiwiZGVzdHJveUV2ZW50Iiwib2ZmIiwiaGFzTGlzdGVuaW5nIiwiaGFzRXZlbnRMaXN0ZW5lciIsIk1hcCIsIkV2ZW50VGFyZ2V0IiwiUHJvY2Vzc01hbmFnZXIiLCJwcm9jZXNzTWdyIiwic2V0UHJvY2VzcyIsInByb2Nlc3NOYW1lIiwicHJvY2VzcyIsImdhbWVQcm9jZXNzRmFjdG9yeSIsImluaXRQcm9jZXNzIiwic2V0RGVmYXVsdFByb2Nlc3MiLCJjaGFuZ2VQcm9jZXNzIiwicGxheSIsIlByb21pc2UiLCJyZXNvbHZlIiwiX19hd2FpdGVyIiwiaXNTdGFydFByb2Nlc3MiLCJ1cGRhdGVQcm9jZXNzU3RhdGUiLCJ1c2VQcm9jZXNzIiwic2VudCIsInN0YXRlIiwicmVtYWtlIiwiX2dhbWVTdGF0ZSIsIkdhbWVQcm9jZXNzRmFjdG9yeSIsIkdhbWVTdGF0ZVR5cGUiLCJTVEFOREJZIiwiU2NlbmVTdHlsZVR5cGUiLCJTY2VuZURpcmVjdGlvblR5cGUiLCJTY2VuZVNpemVDaGFuZ2VMaXN0ZW5lciIsImRlc2lnblNjZW5lRXZlbnRMaXN0ZW5lciIsImRlbGF5VGltZSIsInZpZXciLCJtYWtlRGVzaWduU2NlbmUiLCJyZWplY3QiLCJfaXNDYW5VcGRhdGVTY2VuZSIsInNjZW5lTWFuYWdlciIsInVwZGF0ZVNpemUiLCJBQlMiLCJBQmFzZU5vdGlmaWNhdGlvbiIsIm9ic2VydmVyIiwiU2V0Iiwic3Vic2NyaWJlIiwiaGFzIiwiYWRkIiwidW5zdWJzY3JpYmUiLCJkZWxldGUiLCJyZW1vdmVBbGwiLCJjbGVhciIsImdldFN1YnNjcmliZUNvdW50Iiwic2l6ZSIsImdldEFsbFN1YnNjcmliZSIsIk5vdGlmaWNhdGlvblR5cGUiLCJTY2VuZURpcmVjdGlvbkNoYW5nZU9ic2VydmVyIiwicHVzaE5vdGlmaWNhdGlvbiIsIl9pc1Blcm1hbmVudCIsIl9zdXBlciIsIlNjZW5lRGlyZWN0aW9uQ2hhbmdlTm90aWZpY2F0aW9uIiwiX19leHRlbmRzIiwibm90aWZ5IiwiX2IiLCJfX3ZhbHVlcyIsIl9jIiwibmV4dCIsImRvbmUiLCJUQUdfTkFNRSIsIlNDRU5FX0RJUkVDVElPTl9DSEFOR0UiLCJBdXRvU3R5bGUiLCJleGVjdXRpb25TdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJ1cGRhdGVTY2VuZURpcmVjdGlvbiIsImdldEZyYW1lU2l6ZSIsInNldERlc2lnblJlc29sdXRpb25TaXplIiwiUmVzb2x1dGlvblBvbGljeSIsIkZJWEVEX0hFSUdIVCIsIkZJWEVEX1dJRFRIIiwic2NlbmVEaXJlY3Rpb24iLCJQT1JUUkFJVCIsImV2ZW50TG9jayIsIk5vdGlmaWNhdGlvbk1hbmFnZXIiLCJnZXROb3RpZmljYXRpb24iLCJMQU5EU0NBUEUiLCJoYXNOb3RpZmljYXRpb24iLCJIb3Jpem9udGFsU3R5bGUiLCJjdnMiLCJmaW5kIiwiQ2FudmFzIiwiY3VyRFIiLCJkciIsInMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJydyIsInJoIiwiZmluYWxXIiwiZmluYWxIIiwiZml0SGVpZ2h0IiwiZml0V2lkdGgiLCJkZXNpZ25SZXNvbHV0aW9uIiwiVmVydGljYWxTdHlsZSIsIlNjZW5lU3R5bGVIYW5kbGVyIiwiZ2V0U3R5bGUiLCJzY2VuZVN0eWxlIiwiQVVUTyIsImF1dG9TdHlsZSIsIkhPUklaT05UQUwiLCJob3Jpem9udGFsU3R5bGUiLCJWRVJUSUNBTCIsInZlcnRpY2FsU3R5bGUiLCJTY2VuZU1hbmFnZXIiLCJzY2VuZU1nciIsInNldERlc2lnbldpZHRoIiwiX2Rlc2lnbldpZHRoIiwic2V0RGVzaWduSGVpZ2h0IiwiX2Rlc2lnbkhlaWdodCIsInN0eWxlIiwiX3NjZW5lRGlyZWN0aW9uIiwic2NlbmVTdHlsZUhhbmRsZXIiLCJzdGFydExpc3RlbmVyIiwic2NlbmVTaXplQ2hhbmdlTGlzdGVuZXIiLCJjaGFuZ2VTY2VuZSIsIm5hbWUiLCJMb2FkUmVzTWFuYWdlciIsInNjZW5lUmVzIiwiZGlyZWN0b3IiLCJydW5TY2VuZSIsImdldCIsInJlbW92ZVNjZW5lIiwic2NlbmUiLCJkZXN0cm95IiwiU2xvdFN0eWxlTWFuYWdlciIsInNsb3RTdHlsZU1nciIsInNldFNsb3RUZW1wbGF0ZSIsInNsb3RUZW1wbGF0ZSIsInRlbXBsYXRlIiwic2V0U2xvdFN0eWxlIiwic2xvdFNldHRpbmciLCJidWlsZCIsIl9zbG90IiwidGFnIiwiX3Nsb3RTdHlsZSIsIkF1dG9UeXBlIiwiTGFuZ3VhZ2VUeXBlIiwiU2xvdENvbmZpZ01hbmFnZXIiLCJzZXRHYW1lTnVtYmVyIiwiX2dhbWVOdW1iZXIiLCJzZXRNdXNpY1ZvbHVtZSIsIl9tdXNpY1ZvbHVtZSIsInNldEVmZmVjdFZvbHVtZSIsIl9lZmZlY3RWb2x1bWUiLCJzZXRNdXNpY09uTXV0ZSIsIk9uTXV0ZSIsIl9pc011c2ljT25NdXRlIiwic2V0RWZmZWN0T25NdXRlIiwiX2lzRWZmZWN0T25NdXRlIiwic2V0QXV0b0NvbnQiLCJfYXV0b0NvdW50Iiwic2V0RXh0ZXJuYWxseUxvYWRVUkwiLCJ1cmwiLCJfZXh0ZXJuYWxseUxvYWRVUkwiLCJzZXRMYW5ndWFnZSIsImxhbmd1YWdlVHlwZSIsIl9sYW5ndWFnZSIsInNldEF1dG9TdGF0ZSIsImlzQXV0byIsIl9pc0F1dG8iLCJzZXRTcGVlZFN0YXRlIiwiaXNTcGVlZFVwIiwiX2lzU3BlZWRVcCIsInNldEZyYW1lV29ya0RlYnVnIiwidXNlIiwiX2lzRnJhbWV3b3JrRGVidWciLCJzZXRDb2Nvc0RlYnVnIiwiX2NvY29zRGVidWdTZXR0aW5nIiwic2V0QmFja0hvbWVVUkwiLCJfYmFja0hvbWVVUkwiLCJkZWJ1ZyIsIkF1ZGlvTWFuYWdlciIsIkxhbmd1YWdlTWFuYWdlciIsIkNISU5FU0UiLCJEZWJ1Z01vZGUiLCJJTkZPIiwiQUxvYWRTY3JpcHRUeXBlIiwic2NyaXB0TmFtZSIsInBhcmFtZXRlciIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiQ1NTTG9hZCIsImxvYWRTY3JpcHQiLCJleHRlcm5hbGx5TG9hZFVSTCIsInNjcmlwdFJlcyIsImxpbmtFbGVtIiwicmVsIiwiaHJlZiIsIm9ubG9hZCIsImFwcGVuZENoaWxkIiwibG9hZFNjcmlwdEV2ZW50Q2FsbGJhY2siLCJvbmVycm9yIiwiY3JlYXRlRWxlbWVudCIsIlNjcmlwdExvYWQiLCJzcmMiLCJBTG9hZFR5cGUiLCJkYXRhTmFtZSIsImZvbGRlciIsImJlZm9yZVByb2dyZXNzIiwiYXNzZXRCdW5kbGUiLCJhc3NldE1hbmFnZXIiLCJnZXRCdW5kbGUiLCJsb2FkUmVzb3VyY2VzIiwiU2NlbmVBc3NldCIsImxvYWREaXIiLCJsb2FkUmVzUHJvZ3Jlc3MiLCJiaW5kIiwibG9hZFJlc0NhbGxCYWNrIiwibG9hZFNjZW5lIiwiZXJyb3IiLCJhc3NldHMiLCJzZXRSZXNUb01hbmFnZXIiLCJjb21wbGV0ZSIsIlRvdGFsQW1vdW50IiwicHJvZ3Jlc3MiLCJ1cGRhdGVNYW5hZ2VyU3RhdGUiLCJ1cGRhdGVQcm9ncmVzc0VuZCIsImluaXRpYWxMb2FkU3RhdGUiLCJsb2FkTWFpbkV2ZW50Q2FsbGJhY2siLCJzZWNvbmRhcnlMb2FkU3RhdGUiLCJsb2FkU2Vjb25kYXJ5RXZlbnRDYWxsYmFjayIsImNvbnRpbnVlTG9hZCIsImFzc2V0RGF0YSIsImN1cnJlbnRMb2FkT3JkZXIiLCJzaGlmdCIsImV4ZWN1dGVMb2FkIiwia2V5IiwidXBkYXRlIiwiSW1nTG9hZCIsImFzc2V0Iiwic3ByaXRlTWFwIiwiYXNzZXRfMSIsImFzc2V0XzFfMSIsInNwcml0ZUZyYW1lIiwiaW1nUmVzIiwiTXVzaWNMb2FkIiwiYXNzZXRfMiIsImFzc2V0XzJfMSIsIm11c2ljUmVzIiwiUHJlZmFiTG9hZCIsImFzc2V0XzMiLCJhc3NldF8zXzEiLCJwcmVmYWIiLCJwcmVmYWJSZXMiLCJTY2VuZUxvYWQiLCJTcGluZUxvYWQiLCJzcGluZVJlcyIsImNoZWNrR3JpZCIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJhc3NldF80IiwiYXNzZXRfNF8xIiwic3BpbmUiLCJzcGluZU5hbWVzIiwia2V5cyIsInNrZWxldG9uSnNvbiIsImFuaW1hdGlvbnMiLCJzcGluZVRvTWFwIiwic3BpbmVOYW1lc18xIiwiZV82Iiwic3BpbmVOYW1lc18xXzEiLCJzcGluZU5hbWVUb051bWJlciIsInNwaW5lTmFtZSIsInJlcGxhY2UiLCJUZXh0TG9hZCIsInRleHRBcnJheSIsInNwbGl0IiwidGV4dE1hcCIsInRleHRBcnJheV8xIiwidGV4dEFycmF5XzFfMSIsInByb2Nlc3Npbmd2YWx1ZSIsImFycmF5IiwicmVhZEZpbGVSZXMiLCJMb2FkVHlwZUZhY3RvcnkiLCJsb2FkT3V0U2lkZUJ1bmRsZSIsIm91dFNpZGVEYXRhIiwiYXNzZXRCdW5kbGVzIiwiYnVuZGxlTmFtZSIsInZlcnNpb24iLCJsb2FkQnVuZGxlIiwiYnVuZGxlVVJMIiwiYnVuZGxlIiwibG9hZEluU2lkZUJ1bmRsZSIsImNoZWNrTG9hZFR5cGUiLCJleGVjdXRlTG9hZEJ1bmRsZSIsImV4ZWN1dGVMb2FkT3V0U2lkZUJ1bmRsZSIsImxvYWRUeXBlIiwiSU1HIiwiU3ByaXRlRnJhbWUiLCJJTUdfQVRMQVMiLCJJbWdBdGxhc0xvYWQiLCJTcHJpdGVBdGxhcyIsIk1VU0lDIiwiQXVkaW9DbGlwIiwiUFJFRkFCIiwiUHJlZmFiIiwiU1BJTkUiLCJzcCIsIlNrZWxldG9uRGF0YSIsIlNDRU5FIiwiVEVYVCIsIlRleHRBc3NldCIsImV4ZWN1dGVMb2FkRXh0ZXJuYWxTY3JpcHQiLCJDU1MiLCJTQ1JJUFQiLCJsb2FkUmVzTWFuYWdlciIsIkxvYWRUeXBlSGFuZGxlciIsImNoZWNrUmVwZWF0VGhlTmFtZSIsImZhY3RvcnkiLCJsb2FkTWdyIiwib25seVJlc0V2ZW50Q2FsbGJhY2siLCJhbGxQcm9ncmVzcyIsImFsbFByb2dyZXNzRW5kQ291bnQiLCJpc0Vycm9yIiwiZnVuIiwibG9hZEFzc2V0IiwiaXNMYW5ndWFnZVVzZWQiLCJsYW5ndWFnZSIsImxvYWRUeXBlSGFuZGxlciIsInB1c2giLCJhc3NldE1vZGUiLCJSRVNPVVJDRVMiLCJ0aGVuIiwiSU5fU0lERV9CVU5ETEUiLCJsb2FkT3V0U2lkZUFzc2V0IiwiT1VUX1NJREVfQVNTRVQiLCJjYWxsYmFjayIsInJlc05hbWUiLCJnZXRMb2FkU3RhdGUiLCJpc01haW5SZXNvdXJjZXMiLCJfaW5pdGlhbExvYWRTdGF0ZSIsIl9zZWNvbmRhcnlMb2FkU3RhdGUiLCJsb2FkRXh0ZXJuYWxTY3JpcHQiLCJyZW1vdmUiLCJfaW1nUmVzIiwiX3NwaW5lUmVzIiwiX3JlYWRGaWxlUmVzIiwiX3ByZWZhYlJlcyIsIl9tdXNpY1JlcyIsIl9zY3JpcHRSZXMiLCJfc2NlbmVSZXMiLCJfc2NyaXB0TG9hZFN0YXRlIiwiQXJyYXkiLCJNdXNpY1N0YXRlVHlwZSIsIk11c2ljQ29udHJvbGxlciIsImRhdGEiLCJ2b2x1bWUiLCJsb29wIiwiYXVkaW9FbmdpbmUiLCJnZXRTdGF0ZSIsIm11c2ljSUQiLCJQQVVTRSIsIlBMQVlJTkciLCJzdG9wIiwiYXVkaW9DbGlwIiwicGxheU11c2ljIiwic2V0Vm9sdW1lIiwicmVzdW1lIiwicGF1c2UiLCJBdWRpb1N0YXRlIiwiRWZmZWN0Q29udHJvbGxlciIsImNhblN1cGVyaW1wb3NlIiwiaWQiLCJlZmZlY3RJRCIsIkVSUk9SIiwiTk9UX1BMQVlJTkciLCJDTEVBUl9UT19SRVBMQVkiLCJlZmZJRCIsInBsYXlFZmZlY3QiLCJzdG9wQWxsIiwiQXVkaW9GYWN0b3J5IiwiaW5pdGlhbGl6ZURhdGEiLCJtdXNpY05vcm1hbERhdGEiLCJlZmZlY3ROb3JtYWxEYXRhIiwibXVzaWNWb2x1bWUiLCJlZmZlY3RWb2x1bWUiLCJzZXR0aW5nTXVzaWMiLCJtdXNpY0RhdGEiLCJzZXR0aW5nRWZmZWN0IiwiZWZmZWN0RGF0YSIsIm11c2ljUGxheSIsImF1ZGlvTWFuYWdlciIsIm11c2ljT25NdXRlIiwibXVzaWNDb250cm9sbGVyIiwiZWZmZWN0UGxheSIsImVmZmVjdE9uTXV0ZSIsImVmZmVjdENvbnRyb2xsZXIiLCJtdXNpY1N0b3AiLCJtdXNpY1BhdXNlIiwiZWZmZWN0U3RvcCIsImVmZmVjdFN0b3BBbGwiLCJnZXRNdXNpY1N0YXRlIiwiZ2V0RWZmZWN0U3RhdGUiLCJpc011c2ljT25NdXRlIiwiaXNFZmZlY3RPbk11dGUiLCJhdWRpb01nciIsIlNVUEVSSU1QT1NFIiwidXBkYXRlRWZmZWN0T25NdXRlIiwiX2VmZmVjdE9uTXV0ZSIsInVwZGF0ZU11c2ljT25NdXRlIiwiX211c2ljT25NdXRlIiwiTXVzaWMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIm1ldGhvZCIsIk11c2ljU3RvcCIsIkVmZmVjdCIsImZvckVhY2giLCJFZmZlY3RTdG9wIiwiQ05ZIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwidGV4dFNjYWxlIiwiZGVmYXVsdCIsInRpdGxlIiwidGV4dCIsImZvbnRGYW1pbHkiLCJOVEQiLCJVU0QiLCJWTkQiLCJUSEIiLCJJRFIiLCJNWVIiLCJsYW5ndWFnZU1nciIsImluaXREZWZhdWx0U3R5bGUiLCJfc3R5bGUiLCJUQUlXQU4iLCJBTUVSSUNBIiwiSU5ET05FU0lBIiwiVEhBSUxBTkQiLCJNQUxBWVNJQSIsIlZJRVROQU0iLCJhZGRTdHlsZSIsInVwZGF0ZUxhbmd1YWdlIiwiX25vd0xhbmciLCJhbGxMYW5ndWFnZUxhYmVsIiwiX2QiLCJtYXAiLCJfZSIsImVfMTAiLCJfZiIsInRleHRLZXkiLCJ1cGRhdGVUZXh0IiwidXBkYXRlU3R5bGUiLCJsYW5ndWFnZU9iamVjdCIsImxhbmd1YWdlQ2FjaGUiLCJnZXRMYW5ndWFnZSIsImdldFRleHQiLCJnZXRBbGxUZXh0IiwicmVUYWtlTGFuZ3VhZ2VCdWZmZXIiLCJlIiwicmVtb3ZlU3RyaW5nQnVmZmVyIiwiX25vd0xhbmd1YWdlTGFiZWxzIiwic2F2ZSIsImN1c3RvbUZvbnRTaXplIiwic2V0Tm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uVG9NYXAiLCJnZXRBbGxOb3RpZmljYXRpb25zIiwiQ0NOb2RlUG9vbCIsImdldE5hbWUiLCJwb29sIiwiZ2V0Tm9kZSIsImluc3RhbnRpYXRlIiwicHV0Iiwibm9kZU9yUHJlZmFiIiwiTm9kZVBvb2wiLCJpIiwiU2VsZlBvb2wiLCJsaXN0IiwiZ2V0UG9vbCIsIm5vZGVQb29sIiwic3RvcEFsbEFjdGlvbnMiLCJOb2RlUG9vbE1hbmFnZXIiLCJpbml0IiwicG9vbHMiLCJuYW1lTWFwIiwid2FybiIsImNsZWFyQWxsIiwiY29uZmlnTWdyIiwibm9kZVBvb2xNZ3IiLCJub3RpZmljYXRpb25NZ3IiLCJnbG9iYWxUaGlzIiwiRkNDX1ZFUlNJT04iLCJhZGRCdXR0b25FdmVudCIsImJ1dHRvbk5vZGUiLCJtZXRob2ROYW1lIiwiY3VzdG9tRXZlbnREYXRhIiwidGhpc05vZGUiLCJqcyIsImdldENsYXNzTmFtZSIsImNsaWNrX2V2ZW50IiwiQ29tcG9uZW50IiwiRXZlbnRIYW5kbGVyIiwiY29tcG9uZW50IiwiY2xpY2tFdmVudHMiLCJkaXNhYmxlQnV0dG9uIiwiYnV0dG9uIiwiZW5hYmxlQnV0dG9uIiwiYWRkVG91Y2hTdGFydEV2ZW50IiwidXNlQ2FwdHVyZSIsIk5vZGUiLCJFdmVudFR5cGUiLCJUT1VDSF9TVEFSVCIsIm9mZlRvdWNoU3RhcnRFdmVudCIsImdldE5vZGVPbmVDaGlsZHJlbiIsImFsbE5vZGUiLCJjaGlsZHJlbkNvdW50IiwibiIsImNoaWxkcmVuIiwiaiIsImdldE5vZGVUb3dDaGlsZHJlbiIsInBhdGgiLCJQcm9jZXNzVHlwZSIsInByb2Nlc3NUb01hcCIsImV4ZWN1dGlvbkNvbnRlbnQiLCJvbkNyZWF0ZSIsInZhbHVlcyIsInZhbHVlc18xIiwidmFsdWVzXzFfMSIsImdldFByb2Nlc3MiLCJnZXRBbGxQcm9jZXNzIiwiZ2FtZU1hbmFnZXIiLCJBQmFzZVNsb3RUZW1wbGF0ZSIsInN0eWxlRGF0YSIsIk9iamVjdFBvb2wiLCJmdW5jIiwiYnVmZkxpc3QiLCJQb29sTWFuYWdlciIsIlRTT2JqZWN0UG9vbCIsImNsYXNzTmFtZSIsImluZGV4IiwiVFNQb29sTWFuYWdlciIsIlNlcnZlckV2ZW50VHlwZSIsIkFCYXNlT2JzZXJ2ZXIiLCJfc2VsZiIsIl9jYWxsRnVuIiwiR2FtZVByb2Nlc3MiLCJvbkV4ZWN1dGlvbiIsIl9wcm9jZXNzIiwiX2V4ZWN1dGlvbkNvbnRlbnQiLCJvbkVuZCIsIm9uQ2hhbmdlU3RhdHVzIiwiY29udGFpbmVyIiwiU2xvdEdhbWVQcm9jZXNzIiwib25DdXN0b21pemVTdGFydCIsIl9leGVjdXRpb25Db250YWluZXIiLCJvblNpbmVJbkdyaWQiLCJvblJ1bm5pbmciLCJvbkN1c3RvbWl6ZUVuZCIsIm9uU2hvd0Fuc3dlciIsIkFCYXNlU2xvdFNldHRpbmciLCJzbG90U3R5bGVNYW5hZ2VyIiwiX3Nsb3RTdHlsZU1hbmFnZXIiLCJzZXRUYWciLCJfdGFnIiwic2V0U2xvdFR1cm5Db3VudCIsIl9zbG90VHVybkNvdW50Iiwic2V0U2xvdEdyaWRIZWlnaHQiLCJfc2xvdEdyaWRIZWlnaHQiLCJzZXRTbG90R2lyZFNwZWVkIiwiX3Nsb3RHaXJkU3BlZWQiLCJzZXRTcGVlZFVwTXVsdGlwbGUiLCJtdWx0aXBsZSIsIl9zcGVlZFVwTXVsdGlwbGUiLCJzZXRTdG9wTm93U3BlZWRNdWx0aXBsZSIsIl9zdG9wTm93U3BlZWRNdWx0aXBsZSIsInNldFNsb3RSb3dHcmlkQ291bnQiLCJncmlkQ291bnQiLCJfc2xvdFJvd0dyaWRDb3VudCIsInNldENvbHVtbkludGVydmFsVGltZSIsIl9jb2x1bW5JbnRlcnZhbFRpbWUiLCJzZXRTbG90Q29sdW1uVG9Ud2VlbiIsIl9zbG90Q29sdW1uVG9Ud2VlbiIsInNldEdyaWROb2RlVG9NYXAiLCJfZ3JpZE5vZGVUb01hcCIsInNldFNpbmVJbkVhc2luZyIsIl9zaW5lSW5FYXNpbmciLCJzZXRTaW5lT3V0RWFzaW5nIiwiX3NpbmVPdXRFYXNpbmciLCJzZXRMb29rQXRTcGVlZCIsIl9sb29rQXRTcGVlZCIsInNldFNsb3RSb3dUaW1lIiwiX3Nsb3RSb3dUaW1lIiwic2V0TG9va0F0VGltZSIsIl9sb29rQXRUaW1lIiwic2V0UmVzdWx0TW9kZWwiLCJyZXN1bHRNb2RlbCIsIl9yZXN1bHRNb2RlbCIsIk5vcm1hbFNldHRpbmciLCJzZXRHcmlkSW1nIiwiaW1nIiwiX2dyaWRJbWciLCJzZXRHaXJkU3ByaXRlVG9NYXAiLCJzcHJpdGUiLCJfZ3JpZFNwcml0ZVRvTWFwIiwiTm9ybWFsQmx1ckltYWdlU2V0dGluZyIsInNldFN5bWJvbEJsdXJJbWciLCJfc3ltYm9sQmx1ckltZyIsImdldFNwcml0ZUZyYW1lcyIsImdyaWRO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LEVBQUFGLEVBQUFHLFFBQUFELEVBQUFFLEtBQUFGLEVBQUFGLEVBQUFHLE9BQUUsQ0FBMUMsSUFLT21pQixFQUdBQyxFQVJIUCxFQUFNOWhCLEVBQUFySCxPQUl1QixHQURsQnFRLEVBQVNvRCxjQUNYcFMsUUFBUSxTQUNkb29CLEVBQVdOLEVBQU9oZSxLQUFLcUosUUFBUSxXQUFZLElBQy9DakMsRUFBVTlWLElBQUlndEIsRUFBVU4sS0FFcEJPLEVBQWFQLEVBQU9oZSxLQUN4Qm9ILEVBQVU5VixJQUFJaXRCLEVBQVlQLEssaUdBR2xDbHdCLEVBQUFtUyxlQUFlbkosU0FBUzBRLE9BQU9sVyxJQUFJNFQsRUFBVWtDLEdBRzdDNVksS0FBSzhYLHFCQUViMEUsR0E3QkksU0FBQUEsRUFBWTlGLEVBQWtCbFgsRUFBV3FVLEVBQWE4QyxHLE9BQ2xEdkosRUFBQW5LLEtBQUFqRCxLQUFNMFcsRUFBVWxYLEVBQU1xVSxFQUFLOEMsSUFBTzNXLEtBSDdCVixFQUFBa2QsYUFBWUEsRUFSN0IsQ0FBVWxkLElBQUFBLEtBQUciLCJmaWxlIjoiZmNjLWZyYW1ld29yay5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vSUxvYWQvQUxvYWRUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0xvYWRSZXNNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0xvYWRSZXNNYW5hZ2VyLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6LyJ5YWl5ZyW54mH6LOH5rqQXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBJbWdBdGxhc0xvYWQgZXh0ZW5kcyBBQlMuQUxvYWRUeXBlIHtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoZGF0YU5hbWU6IHN0cmluZywgdHlwZTogYW55LCB1cmw6IHN0cmluZywgZm9sZGVyOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3VwZXIoZGF0YU5hbWUsIHR5cGUsIHVybCwgZm9sZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWwh+izh+a6kOS/neWtmOWcqOeuoeeQhuWZqOS4rVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhTmFtZSAtIOiHquiogue+qeipsuizh+a6kOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuU3ByaXRlQXRsYXN9IGFzc2V0IC0g6LOH5rqQXHJcbiAgICAgICAgICogQHByb3RlY3RlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJlc1RvTWFuYWdlcihkYXRhTmFtZTogc3RyaW5nLCBhc3NldDogY2MuU3ByaXRlQXRsYXMpOiB2b2lkIHtcclxuICAgICAgICAgICAgbGV0IHNwcml0ZU1hcDogTWFwPHN0cmluZywgY2MuU3ByaXRlRnJhbWU+ID0gbmV3IE1hcDxzdHJpbmcsIGNjLlNwcml0ZUZyYW1lPigpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzcHJpdGUgb2YgYXNzZXRbMF0uZ2V0U3ByaXRlRnJhbWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIC8v5bCH6Y215YC86L2J5bCP5a+rLOWmguaenOacieS9v+eUqGdyaWQga2V5IOS9nOeCuuaQnOWwi+izh+a6kFxyXG4gICAgICAgICAgICAgICAgLy/lsIfnhKHmop3ku7blsIcga2V5IOi9ieaIkCDntJTmlbjlrZcg5L6L5aaCIDogc3ltYm9sMH4xMCA9IDB+MTBcclxuICAgICAgICAgICAgICAgIGxldCBsb3dlckNhc2UgPSBkYXRhTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvd2VyQ2FzZS5pbmRleE9mKFwiZ3JpZFwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBncmlkTmFtZSA9IHNwcml0ZS5uYW1lLnJlcGxhY2UoL1teMC05XS9pZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZU1hcC5zZXQoZ3JpZE5hbWUsIHNwcml0ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzcHJpdGVOYW1lID0gc3ByaXRlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlTWFwLnNldChzcHJpdGVOYW1lLCBzcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLmltZ1Jlcy5zZXQoZGF0YU5hbWUsIHNwcml0ZU1hcCk7XHJcbiAgICAgICAgICAgIC8v55uu55qE6Kej5rG655Ww5q2l5pON5L2cXHJcbiAgICAgICAgICAgIC8v55W26LOH5rqQ6YO96LyJ5YWl5YiwTG9hZE1hbmFnZXLmmYLmiY3lm57lgrPku6XovInlhaXlrozmiJDnmoTni4DmhYtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9ncmVzc0VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJuYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIHR5cGUge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOWQhOeorumMr+iqpOmhnuWei1xyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGVudW0gRXJyb3JUeXBlIHtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlj4PmlbjpjK/oqqRcclxuICAgICAgICAgICAgICogQHR5cGUge0Vycm9yVHlwZS5UWVBFX0ZXfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgVFlQRV9GVyA9IFwi5YKz5YWl55qEVHlwZSDpjK/oqqQgLOiri+aqouWvn+ipslR5cGXmmK/lkKbpnZ5GYXJtV29ya+WFp+eahFR5cGVcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDln7fooYzmtYHnqIvpjK/oqqRcclxuICAgICAgICAgICAgICogQHR5cGUge0Vycm9yVHlwZS5JU19SVU5OSU5HX0ZXfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgSVNfUlVOTklOR19GVyA9IFwi6YGK5oiy5q2j5Zyo5Z+36KGM5LitLOiri+WLv+mHjeikh+WRvOWPq1wiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOepuuiuiuaVuOmMr+iqpFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7RXJyb3JUeXBlLlVOREVGSU5FRF9GV31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIFVOREVGSU5FRF9GVyA9IFwi6K6K5pW454K6dW5kZWZpbmVkLOa1geeoi+eEoeazlee5vOe6jFwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWKoOi8ieizh+a6kOmhnuaciemMr+iqpFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7RXJyb3JUeXBlLkxPQURfRld9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBMT0FEX0ZXID0gXCLliqDovInnmoTos4fmupDmnInllY/poYxcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDli5XnlavpoZ7mnInpjK/oqqRcclxuICAgICAgICAgICAgICogQHR5cGUge0Vycm9yVHlwZS5BTklNQVRJT05fRld9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBBTklNQVRJT05fRlcgPSBcIkFuaW1hdGlvbiDpoZ7kuK3mlrnms5XmnInpjK/oqqQgOiBcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBzZXJ2ZXIg6KuL5rGC6Yyv6KqkXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtFcnJvclR5cGUuV0VCX1JFUVVFU1RfRld9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBXRUJfUkVRVUVTVF9GVyA9IFwiV2ViUmVxdWVzdCDpoZ7mnInpjK/oqqQgOiBcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBzZXJ2ZXIg6Z+/5oeJ6Yyv6KqkXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtFcnJvclR5cGUuV0VCX1JFU1BPTlNFX0ZXfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgV0VCX1JFU1BPTlNFX0ZXID0gXCJXZWJSZXNwb25zZSDpoZ7mnInpjK/oqqQgOiBcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDpn7PmqILpoZ7pjK/oqqRcclxuICAgICAgICAgICAgICogQHR5cGUge0Vycm9yVHlwZS5BVURJT19GV31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEFVRElPX0ZXID0gXCJBVURJTyDpoZ7mnInpjK/oqqQgOlwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWgtOaZr+mhnumMr+iqpFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7RXJyb3JUeXBlLlNDRU5FX0ZXfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU0NFTkVfRlcgPSBcIlNjZW5lIOmhnuaciemMr+iqpCA6XCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5rWB56iL6aGe6Yyv6KqkXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtFcnJvclR5cGUuUFJPQ0VTU19GV31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIFBST0NFU1NfRlcgPSBcInByb2Nlc3Mg6aGe5pyJ6Yyv6KqkIDpcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnm6Pogb3kuovku7bpoZ7mnInpjK/oqqRcclxuICAgICAgICAgICAgICogQHR5cGUge0Vycm9yVHlwZS5MSVNURU5FUl9GV31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIExJU1RFTkVSX0ZXID0gXCJFdmVudCDpoZ7mnInpjK/oqqQgOlwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOiAgeiZjuapn+aoo+W8j+mhnuaciemMr+iqpFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7RXJyb3JUeXBlLlNMT1RfU1RZTEVfRld9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBTTE9UX1NUWUxFX0ZXID0gXCJTbG90U3R5bGVGV+mhnuaciemMr+iqpCA6XCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5qih5p2/6aGe5pyJ6Yyv6KqkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBURU1QTEFURV9GVyA9IFwi5qih5p2/6aGe5pyJ6Yyv6KqkIDpcIixcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDnhKHlvp7liKTmlrfoqbLpjK/oqqTpoZ7lnotcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFVua25vd25FcnJvciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnTWFuYWdlciA9IGNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjaGVja0Vycm9yVHlwZShtZXNzYWdlPzogc3RyaW5nIHwgdHlwZS5FcnJvclR5cGUsIG9iaj86IGFueSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOS+i+WklumMr+iqpCA6ICR7bWVzc2FnZX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Vbmtub3duRXJyb3IudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOaqoua4rOipsumMr+iqpOaYr+WQpueCuuahhuaetumMr+iqpFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgRnJhbWVXb3JrRXJyb3Ige1xyXG5cclxuICAgICAgICBwcml2YXRlIHVua25vd25FcnJvcjogVW5rbm93bkVycm9yO1xyXG4gICAgICAgIHByaXZhdGUgY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5rbm93bkVycm9yID0gbmV3IFVua25vd25FcnJvcihjb25maWdNYW5hZ2VyKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gY29uZmlnTWFuYWdlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNoZWNrRXJyb3JUeXBlKG1lc3NhZ2U6IHN0cmluZyB8IHR5cGUuRXJyb3JUeXBlLCBvYmo6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdNYW5hZ2VyLmlzRnJhbWV3b3JrRGVidWcpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5FcnJvclR5cGUuSVNfUlVOTklOR19GVzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGUuRXJyb3JUeXBlLklTX1JVTk5JTkdfRld9ICR7b2JqfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5FcnJvclR5cGUuVU5ERUZJTkVEX0ZXOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZS5FcnJvclR5cGUuVU5ERUZJTkVEX0ZXfSAke29ian1gKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHR5cGUuRXJyb3JUeXBlLlRZUEVfRlc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0eXBlLkVycm9yVHlwZS5UWVBFX0ZXfSAke29ian1gKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHR5cGUuRXJyb3JUeXBlLkFOSU1BVElPTl9GVzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGUuRXJyb3JUeXBlLkFOSU1BVElPTl9GV30gJHtvYmp9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0eXBlLkVycm9yVHlwZS5MT0FEX0ZXOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZS5FcnJvclR5cGUuTE9BRF9GV30gJHtvYmp9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0eXBlLkVycm9yVHlwZS5XRUJfUkVRVUVTVF9GVzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGUuRXJyb3JUeXBlLldFQl9SRVFVRVNUX0ZXfSAke29ian1gKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHR5cGUuRXJyb3JUeXBlLkFVRElPX0ZXOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZS5FcnJvclR5cGUuQVVESU9fRld9ICR7b2JqfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5FcnJvclR5cGUuV0VCX1JFU1BPTlNFX0ZXOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZS5FcnJvclR5cGUuV0VCX1JFU1BPTlNFX0ZXfSAke29ian1gKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHR5cGUuRXJyb3JUeXBlLlNDRU5FX0ZXOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZS5FcnJvclR5cGUuU0NFTkVfRld9ICR7b2JqfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5FcnJvclR5cGUuUFJPQ0VTU19GVzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGUuRXJyb3JUeXBlLlBST0NFU1NfRld9ICR7b2JqfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5FcnJvclR5cGUuTElTVEVORVJfRlc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0eXBlLkVycm9yVHlwZS5MSVNURU5FUl9GV30gJHtvYmp9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0eXBlLkVycm9yVHlwZS5TTE9UX1NUWUxFX0ZXOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZS5FcnJvclR5cGUuU0xPVF9TVFlMRV9GV30gJHtvYmp9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0eXBlLkVycm9yVHlwZS5URU1QTEFURV9GVzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3R5cGUuRXJyb3JUeXBlLlRFTVBMQVRFX0ZXfSAke29ian1gKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bmtub3duRXJyb3IuY2hlY2tFcnJvclR5cGUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuacieS+i+WklumMr+iqpCzkvYbkvaDmnKrplovllZ/moYbmnrZEZWJ1ZyznhKHms5Xmn6XnnItcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9GcmFtZVdvcmtFcnJvci50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOaqoua4rOipsumMr+iqpOaYr+WQpueCuueJqeS7tumMr+iqpFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgT2JqZWN0RXJyb3Ige1xyXG5cclxuICAgICAgICBwcml2YXRlIGZyYW1lV29ya0Vycm9yOiBGcmFtZVdvcmtFcnJvcjtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZVdvcmtFcnJvciA9IG5ldyBGcmFtZVdvcmtFcnJvcihjb25maWdNYW5hZ2VyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNoZWNrRXJyb3JUeXBlKG1lc3NhZ2U6IHN0cmluZyB8IHR5cGUuRXJyb3JUeXBlLCBvYmo/OiBhbnkpOiBhbnkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZVdvcmtFcnJvci5jaGVja0Vycm9yVHlwZShtZXNzYWdlLCBvYmopO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlID09PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tPYmplY3RUeXBlKG9iaik7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2hlY2tPYmplY3RUeXBlKG9iajogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqICE9IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg6Kmy54mp5Lu254K6bnVsbGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOmhr+ekunNlcnZlcuWbnuWCs+eahOmMr+iqpFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgU2VydmVyRXJyb3IgaW1wbGVtZW50cyBJRi5JU2hvd0Vycm9yRGlhbG9nIHtcclxuICAgICAgICBwcml2YXRlIHRpbWVPdXQ6IG51bWJlclxyXG4gICAgICAgIHByaXZhdGUgZXJyb3JNYW5hZ2VyOiBJRi5JRXJyb3JNYW5hZ2VyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihlcnJvck1hbmFnZXI6IElGLklFcnJvck1hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lT3V0ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIgPSBlcnJvck1hbmFnZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAg6aGv56S6c2VydmVy5Zue5YKz55qE6Yyv6Kqk5LqL5Lu2XHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBwZXJtYW5lbnRTdGF0ZSAtIOaYr+WQpuaMgee6jOmhr+ekulxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0g6aGv56S66Yyv6Kqk6KiK5oGv5paH5a2XXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblRleHQgLSDmjInpiJXmloflrZdcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FuU2hvd0J1dHRvbiA6IOaYr+WQpuW8t+WItumhr+ekukJ1dHRvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dFcnJvcihwZXJtYW5lbnRTdGF0ZTogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nLCBidXR0b25UZXh0OiBzdHJpbmcsIGNhblNob3dCdXR0b24/OiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVPdXQgIT0gbnVsbCkgY2xlYXJUaW1lb3V0KHRoaXMudGltZU91dCk7XHJcbiAgICAgICAgICAgIGNjLlR3ZWVuLnN0b3BBbGxCeVRhcmdldCh0aGlzLmVycm9yTWFuYWdlci5lcnJvck5vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5lcnJvckJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKVxyXG4gICAgICAgICAgICAgICAgLmludGVyYWN0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5lcnJvck5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLmNsb3NlQnV0dG9uLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy/norroqo3nlbbliY3mnInnhKHoqbLnianku7Ys5aaC54Sh6Kmy54mp5Lu2LOWwh+acg3Rocm935Lit5pa3XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lcnJvck1hbmFnZXIuZXJyb3JOb2RlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlVOREVGSU5FRF9GVywgXCJFcnJvck1hbmFnZXIgZXJyb3JOb2Rl54K656m6XCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmVycm9yTWFuYWdlci5lcnJvckxhYmVsKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlVOREVGSU5FRF9GVywgXCJFcnJvck1hbmFnZXIgZXJyb3JMYWJlbOeCuuepulwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lcnJvck1hbmFnZXIuZXJyb3JCdXR0b24pXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuVU5ERUZJTkVEX0ZXLCBcIkVycm9yTWFuYWdlciBlcnJvckJ1dHRvbueCuuepulwiKTtcclxuXHJcbiAgICAgICAgICAgIEVycm9yTWFuYWdlci5lcnJvclN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2MudHdlZW4odGhpcy5lcnJvck1hbmFnZXIuZXJyb3JOb2RlKVxyXG4gICAgICAgICAgICAgICAgLnNldCh7b3BhY2l0eTogMCwgc2NhbGU6IDEuM30pXHJcbiAgICAgICAgICAgICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXJyb3JOb2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRvKDAuMywge29wYWNpdHk6IDI1NSwgc2NhbGU6IDF9LCB7ZWFzaW5nOiBcInNpbmVJblwifSlcclxuICAgICAgICAgICAgICAgIC5jYWxsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5lcnJvckJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW50ZXJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3RhcnQoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLmVycm9yTGFiZWwuc3RyaW5nID0gbWVzc2FnZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcGVybWFuZW50U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLmVycm9yQnV0dG9uLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNhblNob3dCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLmVycm9yQnV0dG9uLmFjdGl2ZSA9IGNhblNob3dCdXR0b247XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5lcnJvckJ1dHRvbkxhYmVsLnN0cmluZyA9IGJ1dHRvblRleHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5lcnJvck1hbmFnZXIuaXNTaG93QmFja0hvbWVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLmVycm9yQnV0dG9uLmFjdGl2ZSA9IHRoaXMuZXJyb3JNYW5hZ2VyLmlzU2hvd0JhY2tIb21lQnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXJyb3JCdXR0b25MYWJlbC5zdHJpbmcgPSBidXR0b25UZXh0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXJyb3JCdXR0b24uYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghcGVybWFuZW50U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZU91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuZXJyb3JTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLmVycm9yTm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5lcnJvckJ1dHRvbi5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVPdXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5lcnJvck1hbmFnZXIuZXJyb3JEZWxheVRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDpoa/npLrorablkYrpjK/oqqRcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFdhcm5pbmdFcnJvciBpbXBsZW1lbnRzIElGLklTaG93RXJyb3JEaWFsb2cge1xyXG5cclxuICAgICAgICBwcml2YXRlIHRpbWVvdXQ6IG51bWJlclxyXG4gICAgICAgIHByaXZhdGUgZXJyb3JNYW5hZ2VyOklGLklFcnJvck1hbmFnZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGVycm9yTWFuYWdlcjpJRi5JRXJyb3JNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyID0gZXJyb3JNYW5hZ2VyO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOmhr+ekuuitpuWRiiBEaWFsb2dcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBlcm1hbmVudFN0YXRlIC0g5piv5ZCm5oyB57qM6aGv56S6XHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSDpoa/npLrpjK/oqqToqIrmga/mloflrZdcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uVGV4dCAtIOaMiemIleaWh+Wtl1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dFcnJvcihwZXJtYW5lbnRTdGF0ZTogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nLCBidXR0b25UZXh0OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQgIT0gbnVsbCkgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcblxyXG4gICAgICAgICAgICAvL+eiuuiqjeeVtuWJjeacieeEoeipsueJqeS7tizlpoLnhKHoqbLnianku7Ys5bCH5pyDdGhyb3fkuK3mlrdcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lcnJvck1hbmFnZXIud2FybmluZ05vZGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuVU5ERUZJTkVEX0ZXLCBcIkVycm9yTWFuYWdlciB3YXJuaW5nTm9kZeeCuuepulwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lcnJvck1hbmFnZXIud2FybmluZ0xhYmVsKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlVOREVGSU5FRF9GVywgXCJFcnJvck1hbmFnZXIgd2FybmluZ0xhYmVs54K656m6XCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3JNYW5hZ2VyLndhcm5pbmdEZWxheVRpbWUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvck1hbmFnZXIuZXhlY3V0ZUVycm9yKGDnlbbliY1EZWxheVRpbWUgPSAwIDog6KuL57Wm5LqI5YC8YCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEVycm9yTWFuYWdlci53YXJuaW5nU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci53YXJuaW5nTm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWFuYWdlci53YXJuaW5nTGFiZWwuc3RyaW5nID0gbWVzc2FnZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwZXJtYW5lbnRTdGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci53YXJuaW5nU3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JNYW5hZ2VyLndhcm5pbmdOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgfSwgdGhpcy5lcnJvck1hbmFnZXIud2FybmluZ0RlbGF5VGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vRXJyb3JUeXBlL09iamVjdEVycm9yLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vRXJyb3JUeXBlL1NlcnZlckVycm9yLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vRXJyb3JUeXBlL1dhcm5pbmdFcnJvci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lFcnJvckhhbmRsZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiBFcnJvcueuoeeQhuWZqCDpjK/oqqTkuovku7bkuK3ku4vogIVcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlciBpbXBsZW1lbnRzIElGLklFcnJvckhhbmRsZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIG9iamVjdEVycm9yOiBPYmplY3RFcnJvcjtcclxuICAgICAgICBwcml2YXRlIHNlcnZlckVycm9yOiBTZXJ2ZXJFcnJvcjtcclxuICAgICAgICBwcml2YXRlIHdhcm5pbmdFcnJvcjogV2FybmluZ0Vycm9yO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIsIGVycm9yTWFuYWdlcjogSUYuSUVycm9yTWFuYWdlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9iamVjdEVycm9yID0gbmV3IE9iamVjdEVycm9yKGNvbmZpZ01hbmFnZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZlckVycm9yID0gbmV3IFNlcnZlckVycm9yKGVycm9yTWFuYWdlcik7XHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ0Vycm9yID0gbmV3IFdhcm5pbmdFcnJvcihlcnJvck1hbmFnZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog56K66KqN6Yyv6Kqk6aGe5Z6LXHJcbiAgICAgICAgICogQHN1bW1hcnkgLSDosqzku7vpj4jmqKHlvI8gOiBPdmVybG9hZFxyXG4gICAgICAgICAqIEB0aHJvd3MgKG51bGwsYW55KSAtIHJldHVybiDoqbLnianku7Ygb3IgdGhyb3cgKFwi6Kmy54mp5Lu254K6bnVsbFwiKVxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqICAgICAg5Y+D5pW4OlxyXG4gICAgICAgICAqICAgICAgICAgIChudWxsLGFueSkgLSByZXR1cm4g6Kmy54mp5Lu2IG9yIHRocm93IChcIuipsueJqeS7tueCum51bGxcIilcclxuICAgICAgICAgKiAgICAgICAgICAoZmNjLnR5cGUuRXJyb3JUeXBlLHN0cmluZykgLSB0aHJvdyAoYEVycm9yVHlwZSArICR7c3RyaW5nfWApXHJcbiAgICAgICAgICogICAgICAgICAgKHN0cmluZykgLSB0aHJvdyAoYCR7c3RyaW5nfWApXHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBmY2MudHlwZS5FcnJvclR5cGV9IG1lc3NhZ2VcclxuICAgICAgICAgKiBAcGFyYW0gb2JqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hlY2tFcnJvclR5cGUobWVzc2FnZTogc3RyaW5nIHwgdHlwZS5FcnJvclR5cGUsIG9iaj86IGFueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmplY3RFcnJvci5jaGVja0Vycm9yVHlwZShtZXNzYWdlLCBvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog56K66KqNc2VydmVy5Zue5YKz6Yyv6Kqk6aGe5Z6LXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBwZXJtYW5lbnRTdGF0ZSAtIOaYr+WQpuaMgee6jOmhr+ekulxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0g6aGv56S66Yyv6Kqk6KiK5oGv5paH5a2XXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblRleHQgLSDmjInpiJXmloflrZdcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FuU2hvd0J1dHRvbiA6IOaYr+WQpuW8t+WItumhr+ekukJ1dHRvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjaGVja1NlcnZlckVycm9yKHBlcm1hbmVudFN0YXRlOiBib29sZWFuLCBtZXNzYWdlOiBzdHJpbmcsIGJ1dHRvblRleHQ/OiBzdHJpbmcsY2FuU2hvd0J1dHRvbj86Ym9vbGVhbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZlckVycm9yLnNob3dFcnJvcihwZXJtYW5lbnRTdGF0ZSwgbWVzc2FnZSwgYnV0dG9uVGV4dCxjYW5TaG93QnV0dG9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeiuuiqjeitpuWRiumhnuWei1xyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGVybWFuZW50U3RhdGUgLSDmmK/lkKbmjIHnuozpoa/npLpcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIOmhr+ekuumMr+iqpOioiuaBr+aWh+Wtl1xyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25UZXh0IC0g5oyJ6YiV5paH5a2XXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNoZWNrV2FybmluZyhwZXJtYW5lbnRTdGF0ZTogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nLCBidXR0b25UZXh0Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ0Vycm9yLnNob3dFcnJvcihwZXJtYW5lbnRTdGF0ZSwgbWVzc2FnZSwgYnV0dG9uVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vRXJyb3JIYW5kbGVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vSUVycm9ySGFuZGxlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lFcnJvck1hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDpjK/oqqTnrqHnkIblmaggOiDmoYbmnrbpjK/oqqTnrqHnkIZcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEVycm9yTWFuYWdlciBpbXBsZW1lbnRzIElGLklFcnJvck1hbmFnZXIge1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogSUYuSUVycm9yTWFuYWdlcjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfZXJyb3JTdGF0ZTogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfd2FybmluZ1N0YXRlOiBib29sZWFuO1xyXG4gICAgICAgIHByaXZhdGUgY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBoYW5kbGVyOiBJRi5JRXJyb3JIYW5kbGVyO1xyXG4gICAgICAgIHByaXZhdGUgX2Vycm9yRGVsYXlUaW1lOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JMYWJlbDogY2MuTGFiZWw7XHJcbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JOb2RlOiBjYy5Ob2RlO1xyXG4gICAgICAgIHByaXZhdGUgX3dhcm5pbmdMYWJlbDogY2MuTGFiZWw7XHJcbiAgICAgICAgcHJpdmF0ZSBfd2FybmluZ05vZGU6IGNjLk5vZGU7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfaXNTaG93QmFja0hvbWVCdXR0b246IGJvb2xlYW47XHJcbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JCdXR0b246IGNjLk5vZGU7XHJcbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JCdXR0b25MYWJlbDogY2MuTGFiZWxcclxuICAgICAgICBwcml2YXRlIF9jbG9zZUJ1dHRvbjogY2MuTm9kZTtcclxuICAgICAgICBwcml2YXRlIF93YXJuaW5nRGVsYXlUaW1lOiBudW1iZXI7XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uc3RydWN0b3IoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyID0gbmV3IEVycm9ySGFuZGxlcihjb25maWdNYW5hZ2VyLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gY29uZmlnTWFuYWdlcjtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3JMYWJlbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yRGVsYXlUaW1lID0gMjAwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6Yyv6Kqk6KiK5oGv6aGv56S65pmC6ZaTIDogMuenklxyXG4gICAgICAgICAgICB0aGlzLl93YXJuaW5nRGVsYXlUaW1lID0gMTAwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+itpuWRiuioiuaBr+mhr+ekuuaZgumWkyA6IDHnp5JcclxuICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLl9lcnJvclN0YXRlID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nlbbliY3mmK/lkKbmraPlnKjpoa/npLogRXJyb3JcclxuICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLl93YXJuaW5nU3RhdGUgPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nlbbliY3mmK/lkKbmraPlnKjpoa/npLrorablkYpcclxuICAgICAgICAgICAgdGhpcy5faXNTaG93QmFja0hvbWVCdXR0b24gPSAhIXRoaXMuY29uZmlnTWFuYWdlci5iYWNrSG9tZVVSTC50cmltKCk7ICAgLy/mqqLmn6XnlbbliY3mmK/lkKblm57pppbpoIFVUkws5bCH5LmL6LOm5LqIdHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqICDliJ3lp4vljJYs5Y+q6K6T5LiA5YCL5bCI5qGI55Si55Sf5LiA5qyh6KmyY2xhc3NcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHNldEluc3RhbmNlKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEVycm9yTWFuYWdlcihjb25maWdNYW5hZ2VyKTtcclxuICAgICAgICAgICAgICAgIGVycm9yTWdyID0gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDnjbLlj5blt7LntpPliJ3lp4vljJbnmoTpnZzmhYvlr6bkvotjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IElGLklFcnJvck1hbmFnZXIge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yTWFuYWdlcumhnumMr+iqpCA6ICDoqbLpoZ7lsJrmnKrlr6bkvovljJZgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWft+ihjOipsumhnuWei+S5i+mMr+iqpOaPkOekulxyXG4gICAgICAgICAqIEBzdW1tYXJ5IC0g6LKs5Lu76Y+I5qih5byPIDogT3ZlcmxvYWRcclxuICAgICAgICAgKiBAdGhyb3dzIChudWxsLGFueSkgLSByZXR1cm4g6Kmy54mp5Lu2IG9yIHRocm93IChcIuipsueJqeS7tueCum51bGxcIilcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKiAgICAgIOWPg+aVuDpcclxuICAgICAgICAgKiAgICAgICAgICAobnVsbCxhbnkpIC0gcmV0dXJuIOipsueJqeS7tiBvciB0aHJvdyAoXCLoqbLnianku7bngrpudWxsXCIpXHJcbiAgICAgICAgICogICAgICAgICAgKGZjYy50eXBlLkVycm9yVHlwZSxzdHJpbmcpIC0gdGhyb3cgKGBFcnJvclR5cGUgKyAke3N0cmluZ31gKVxyXG4gICAgICAgICAqICAgICAgICAgIChzdHJpbmcpIC0gdGhyb3cgKGAke3N0cmluZ31gKVxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgZmNjLnR5cGUuRXJyb3JUeXBlfSBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIG9ialxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4ZWN1dGVFcnJvcihtZXNzYWdlOiBzdHJpbmcgfCB0eXBlLkVycm9yVHlwZSwgb2JqOiBhbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlci5jaGVja0Vycm9yVHlwZShtZXNzYWdlLCBvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6aGv56S66Yyv6Kqk6KaW56qXXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBwZXJtYW5lbnRTdGF0ZSAtIOaYr+WQpuW4uOmnkFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlICAtIOmMr+iqpOioiuaBr1xyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25UZXh0IC0gYnV0dG9u5paH5a2XXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhblNob3dCdXR0b24gOiDmmK/lkKblvLfliLbpoa/npLpCdXR0b25cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93RXJyb3JEaWFsb2cocGVybWFuZW50U3RhdGU6IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZywgYnV0dG9uVGV4dD86IHN0cmluZywgY2FuU2hvd0J1dHRvbj86IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyLmNoZWNrU2VydmVyRXJyb3IocGVybWFuZW50U3RhdGUsIG1lc3NhZ2UsIGJ1dHRvblRleHQsIGNhblNob3dCdXR0b24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6aGv56S66K2m5ZGKLOWwh+acg+iqv+eUqOW3suS/neWtmOeahOitpuWRik5vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBlcm1hbmVudFN0YXRlIC0g5piv5ZCm5bi46aeQXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIC0g6Yyv6Kqk6KiK5oGvXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblRleHQgLSBidXR0b27mloflrZdcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93V2FybmluZ0RpYWxvZyhwZXJtYW5lbnRTdGF0ZTogYm9vbGVhbiwgbWVzc2FnZTogc3RyaW5nLCBidXR0b25UZXh0Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlci5jaGVja1dhcm5pbmcocGVybWFuZW50U3RhdGUsIG1lc3NhZ2UsIGJ1dHRvblRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoOimgee2geWumueahEVycm9y57WE5Lu2XHJcbiAgICAgICAgICogQHBhcmFtIG5vZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRFcnJvck5vZGUobm9kZTogY2MuTm9kZSk6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZXJyb3JOb2RlID0gbm9kZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5re75Yqg6KaB6aGv56S6RXJyb3LoqIrmga/nmoRMYWJlbFxyXG4gICAgICAgICAqIEBwYXJhbSBsYWJlbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldEVycm9yTGFiZWwobGFiZWw6IGNjLkxhYmVsKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9lcnJvckxhYmVsID0gbGFiZWw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoGVycm9yQnV0dG9u57aB5a6aXHJcbiAgICAgICAgICogQHBhcmFtIG5vZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRFcnJvckJ1dHRvbihub2RlOiBjYy5Ob2RlKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9lcnJvckJ1dHRvbiA9IG5vZGU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoOimgee2geWumueahOmXnOmWieimlueql+eahOaMiemIlVxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZVxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Q2xvc2VCdXR0b25Ob2RlKG5vZGU6IGNjLk5vZGUpOiB0aGlzIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gbm9kZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoOimgemhr+ekuueahOaZgumWkyznm67liY3lj6rlsI0oRXJyb3JUeXBlLmJldCnnlJ/mlYhcclxuICAgICAgICAgKiBAcGFyYW0gdGltZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldEVycm9yRGVsYXlUaW1lKHRpbWU6IG51bWJlcik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZXJyb3JEZWxheVRpbWUgPSB0aW1lO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDorablkYropoHpoa/npLrnmoTmmYLplpNcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRXYXJuaW5nRGVsYXlUaW1lKHRpbWU6IG51bWJlcik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fd2FybmluZ0RlbGF5VGltZSA9IHRpbWU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoOimgemhr+ekuuitpuWRiueahE5vZGVcclxuICAgICAgICAgKiBAcGFyYW0gbm9kZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFdhcm5pbmdOb2RlKG5vZGU6IGNjLk5vZGUpOiB0aGlzIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3dhcm5pbmdOb2RlID0gbm9kZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5re75Yqg6KaB6aGv56S66K2m5ZGK55qETm9kZVxyXG4gICAgICAgICAqIEBwYXJhbSBsYWJlbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFdhcm5pbmdMYWJlbChsYWJlbDogY2MuTGFiZWwpOiB0aGlzIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3dhcm5pbmdMYWJlbCA9IGxhYmVsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDopoHpoa/npLrpjK/oqqToppbnqpfkuK3mjInpiJXnmoRsYWJlbFxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuTGFiZWx9IGxhYmVsXHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0RXJyb3JCdXR0b25MYWJlbChsYWJlbDogY2MuTGFiZWwpOiB0aGlzIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yQnV0dG9uTGFiZWwgPSBsYWJlbDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGdldCBlcnJvclN0YXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3JTdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeVtuWJjSBlcnJvciBkaWFsb2cg54uA5oWLXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBzZXQgZXJyb3JTdGF0ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvclN0YXRlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgc3RhdGljIGdldCB3YXJuaW5nU3RhdGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93YXJuaW5nU3RhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnlbbliY0gd2FybmluZyBkaWFsb2cg54uA5oWLXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBzZXQgd2FybmluZ1N0YXRlKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dhcm5pbmdTdGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGVycm9yTm9kZSgpOiBjYy5Ob2RlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yTm9kZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBnZXQgd2FybmluZ05vZGUoKTogY2MuTm9kZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93YXJuaW5nTm9kZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBnZXQgZXJyb3JCdXR0b24oKTogY2MuTm9kZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvckJ1dHRvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCB3YXJuaW5nTGFiZWwoKTogY2MuTGFiZWwge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2FybmluZ0xhYmVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGVycm9yTGFiZWwoKTogY2MuTGFiZWwge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3JMYWJlbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBnZXQgZXJyb3JEZWxheVRpbWUoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yRGVsYXlUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGdldCB3YXJuaW5nRGVsYXlUaW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93YXJuaW5nRGVsYXlUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGdldCBpc1Nob3dCYWNrSG9tZUJ1dHRvbigpOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1Nob3dCYWNrSG9tZUJ1dHRvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBlcnJvckJ1dHRvbkxhYmVsKCk6IGNjLkxhYmVsIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yQnV0dG9uTGFiZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgY2xvc2VCdXR0b24oKTogY2MuTm9kZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbG9zZUJ1dHRvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSB0eXBlIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiDpn7PmqILmkqXmlL7nlorliqDmmYIs5ZCE56iu54uA5oWL6Kit5a6aXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNS0xMyDkuIrljYggMTA6MjRcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgZW51bSBBdWRpb1N0YXRlVHlwZSB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICrmqqLmuKzliLDoqbLpn7PmqILmraPlnKjmkqXmlL7mmYIs5riF6Zmk5q2j5Zyo5pKl5pS+55qE6Z+z5qiCLOW+jOmHjeaWsOaSreaUvuipsumfs+aoglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7QXVkaW9TdGF0ZVR5cGUuQ0xFQVJfVE9fUkVQTEFZfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQ0xFQVJfVE9fUkVQTEFZID0gXCJDTEVBUl9UT19SRVBMQVlcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmqqLmuKzliLDoqbLpn7PmqILmraPlnKjmkqXmlL7mmYIs5bCH55u05o6l6Zui6ZaLXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBdWRpb1N0YXRlVHlwZS5OT1RfUExBWUlOR31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIE5PVF9QTEFZSU5HID0gXCJOT1RfUExBWUlOR1wiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOaqoua4rOWIsOipsumfs+aoguato+WcqOaSpeaUvuaZgizlsIflj6/nlorliqDmkqXmlL5cclxuICAgICAgICAgICAgICogQHR5cGUge0F1ZGlvU3RhdGVUeXBlLlNVUEVSSU1QT1NFfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU1VQRVJJTVBPU0UgPSBcIlNVUEVSSU1QT1NFXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iLCJuYW1lc3BhY2UgZmNjIHtcclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgZ2xvYmFsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOWFseeUqDrmk43kvZzmlbjlrZd7bnVtYmVyfemhnuaWueazlVxyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGNsYXNzIFV0aWwge1xyXG5cclxuICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZm9ybWF0dGluZyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgpO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWbm+aNqOS6lOWFpeWIsOWwj+aVuOm7nuesrE7kvY1cclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGZsb2F0IC0g5rWu6bue5pW4XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgLSDopoHlm5vmjajkupTlhaXliLDlk6rkuIDkvY1cclxuICAgICAgICAgICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc3RhdGljIHJvdW5kT2ZmKGZsb2F0OiBudW1iZXIsIG51bWJlcjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucm91bmQoZmxvYXQgKiBNYXRoLnBvdygxMCwgKG51bWJlciB8fCAwKSArIDEpKSAvIDEwKSAvIE1hdGgucG93KDEwLCAobnVtYmVyIHx8IDApKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeEoeaineS7tuaNqOWOu+WIsOWwj+aVuOm7nuesrE7kvY1cclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGZsb2F0IC0g5rWu6bue5pW4XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgLSDopoHnhKHmop3ku7bmjajljrvliLDlk6rkuIDkvY1cclxuICAgICAgICAgICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc3RhdGljIHJvdW5kRG93bihmbG9hdDogbnVtYmVyLCBudW1iZXI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLmZsb29yKGZsb2F0ICogTWF0aC5wb3coMTAsIChudW1iZXIgfHwgMCkgKyAxKSkgLyAxMCkgLyBNYXRoLnBvdygxMCwgKG51bWJlciB8fCAwKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnhKHmop3ku7bpgLLkvY3liLDlsI/mlbjpu57nrKxO5L2NXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmbG9hdCAtIOa1rum7nuaVuFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIC0g6KaB54Sh5qKd5Lu26YCy5L2N5Yiw5ZOq5LiA5L2NXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHN0YXRpYyByb3VuZFVwKGZsb2F0OiBudW1iZXIsIG51bWJlcjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5jZWlsKGZsb2F0ICogTWF0aC5wb3coMTAsIChudW1iZXIgfHwgMCkgKyAxKSkgLyAxMCkgLyBNYXRoLnBvdygxMCwgKG51bWJlciB8fCAwKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmqqLmn6XoqbLmlbjlrZfngrrlsI/mlbjmnInlub7kvY1cclxuICAgICAgICAgICAgICogQGV4YW1wbGUgaW5wdXQoMS4wMykgLT4gb3V0cHV0KDIpXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfWZsb2F0IC0g5rWu6bue5pW4XHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHN0YXRpYyBkZWNpbWFsc0NvdW50KGZsb2F0OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlY2ltYWxzSW5kZXggPSBTdHJpbmcoZmxvYXQpLmluZGV4T2YoJy4nKSArIDE7XHJcbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSBTdHJpbmcoZmxvYXQpLmxlbmd0aCAtIGRlY2ltYWxzSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbHNJbmRleCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWwh+ipsuaVuOWtl+i9ieWtl+S4suS4puWIpOaWt+aYr+WQpuiDveS9v+eUqChLKeWWruS9jeWPluS7o+mbtlxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSBpbnB1dCgxMDAwKSAtPiBvdXRwdXQoMUspXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIg6ZyA6KaB5qC85byP5YyW55qE5pW45a2XXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gLSDmoLzlvI/ljJblvoznmoTlrZfkuLLmlbjlrZdcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHN0YXRpYyBudW1iZXJGb3JtYXQobnVtYmVyOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA8IDEwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPiAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke251bWJlciAvIDEwMDB9S2A7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlsIfoqbLmlbjlrZfmoLzlvI/ljJYs5q+P5LiJ5YCLMOWJjeaWuee1puS6iCcsJ+aomeiomFxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSBpbnB1dCgxMDAwMDAwKSAtPiBvdXRwdXQoMSwwMDAsMDAwKVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIC0g6ZyA6KaB5qC85byP5YyW55qE5pW45a2XXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gLSDmoLzlvI/ljJblvoznmoTlrZfkuLLmlbjlrZdcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHN0YXRpYyBmb3JtYXQobnVtYmVyOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGluZy5mb3JtYXQobnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgdHlwZSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAgICAgKiBARGVzY3JpcHRpb24g5ZCE56iu6aGe5Z6L6LOH5rqQXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgZW51bSBMb2FkVHlwZSB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Zau5LiA5ZyW54mHXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5ZyW6Lyv6aGe5Z6LXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtmY2MudHlwZS5Mb2FkVHlwZS5JTUd9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBJTUcgPSBcIklNR1wiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWclui8r+mhnuWei1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTG9hZFR5cGUuSU1HX0FUTEFTfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgSU1HX0FUTEFTID0gXCJJTUdfQVRMQVNcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDpqqjpqrzliqjnlLvpoZ7lnotcclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLkxvYWRUeXBlLlNQSU5FfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU1BJTkUgPSBcIlNQSU5FXCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6aCQ6LyJ6LOH5rqQ6aGe5Z6LXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtmY2MudHlwZS5Mb2FkVHlwZS5QUkVGQUJ9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBQUkVGQUIgPSBcIlBSRUZBQlwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOmfs+aogumhnuWei1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTG9hZFR5cGUuTVVTSUN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBNVVNJQyA9IFwiTVVTSUNcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmloflrZfpoZ7lnoso5rOo5oSPOuebruWJjeWPquaOpeaUtiAuQ1NWIOaqlOahiClcclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLkxvYWRUeXBlLlRFWFR9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBURVhUID0gXCJURVhUXCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5aC05pmv6aGe5Z6LKOazqOaEjzrli5XmhYvovInlhaXos4fmupDpnIDmlL7lhaVyZXNvdXJjZeizh+aWmeWkvuWFpyBvciBidW5kbGXos4fmlpnlpL7lhacpXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtmY2MudHlwZS5Mb2FkVHlwZS5TQ0VORX1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIFNDRU5FID0gXCJTQ0VORVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWklumDqFVSTOiFs+acrFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTG9hZFR5cGUuU0NSSVBUfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU0NSSVBUID0gXCJTQ1JJUFRcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlpJbpg6hVUkwgQ1NTXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtmY2MudHlwZS5Mb2FkVHlwZS5TQ1JJUFR9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBDU1MgPSBcIkNTU1wiLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJuYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIHR5cGUge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIOiVreeri+WTgVxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiDliqDovInpoZ7lnotcclxuICAgICAgICAgKiBARGF0ZSAyMDIyLTA0LTE5IOS4i+WNiCAwMzozOVxyXG4gICAgICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4cG9ydCBlbnVtIEFTU0VUX01PREUge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOS4u+izh+a6kFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7QVNTRVRfTU9ERS5SRVNPVVJDRVN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBSRVNPVVJDRVMsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5YWn6YOoQnVuZGxl6LOH5rqQXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBU1NFVF9NT0RFLklOX1NJREVfQlVORExFfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgSU5fU0lERV9CVU5ETEUsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5aSW6YOo6LOH5rqQXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBU1NFVF9NT0RFLk9VVF9TSURFX0FTU0VUfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgT1VUX1NJREVfQVNTRVQsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FcnJvci9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9JRXZlbnRNYW5hZ2VyLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5LqL5Lu2566h55CG5ZmoLOeVtuWJjee2geWumueahOS6i+S7tizkuovku7bmlbjph49cclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEV2ZW50TWFuYWdlciBpbXBsZW1lbnRzIElGLklFdmVudE1hbmFnZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IElGLklFdmVudE1hbmFnZXI7XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS6i+S7tue4veaVuOmHj1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX2V2ZW50Q291bnQ6IG51bWJlclxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDpgYrmiLLlhafkuovku7ZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdGFyZ2V0OiBjYy5FdmVudFRhcmdldFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnlbbliY3mraPlnKjnm6Pogb3pgqPkupvkuovku7Y7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZXZlbnRzQ3VycmVudGx5QmVpbmc6IE1hcDxzdHJpbmcsIHN0cmluZz5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ01hbmFnZXIgPSBjb25maWdNYW5hZ2VyO1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudENvdW50ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzQ3VycmVudGx5QmVpbmcgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG5ldyBjYy5FdmVudFRhcmdldCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqICDliJ3lp4vljJYs5Y+q6K6T5LiA5YCL5bCI5qGI55Si55Sf5LiA5qyh6KmyY2xhc3NcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHNldEluc3RhbmNlKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEV2ZW50TWFuYWdlcihjb25maWdNYW5hZ2VyKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50TWdyID0gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDnjbLlj5blt7LntpPliJ3lp4vljJbnmoTpnZzmhYvlr6bkvotjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IElGLklFdmVudE1hbmFnZXIge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxJU1RFTkVSX0ZXLCBcIuipsumhnuWwmuacquWvpuS+i+WMllwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDkuovku7ZcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0g5LqL5Lu25ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHthbnl9IGFueSA6IOimgeWbnuWCs+eahOeJqeS7tlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBlbWl0RXZlbnQoZXZlbnROYW1lOiB0eXBlLlNlcnZlckV2ZW50VHlwZSB8IHN0cmluZywgLi4uYW55OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQuZW1pdChldmVudE5hbWUsIC4uLmFueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBzZXJ2ZXLnm6Pogb3lm57lgrPmjqXmlLZcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0g5LqL5Lu25ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbEZ1biAtIOi/lOWbnuaWueazlVxyXG4gICAgICAgICAqIEBwYXJhbSBpc1Blcm1hbmVudCAtIOaYr+WQpuW4uOmnkFxyXG4gICAgICAgICAqIEBwYXJhbSB7YW55fSBzZWxmIC0g6Kq/55So5Zue5ZOq5YCL5bCN6LGhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxGdW46ICguLi5wYXJhbWV0ZXI6IGFueSkgPT4gdm9pZCwgaXNQZXJtYW5lbnQ/OiBib29sZWFuLCBzZWxmPzogYW55KTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50Q291bnQgKz0gMTtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzQ3VycmVudGx5QmVpbmcuc2V0KFwic2V2ZXJFdmVudFwiLCBldmVudE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaXNQZXJtYW5lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0Lm9uKGV2ZW50TmFtZSwgY2FsbEZ1biwgc2VsZik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5vbmNlKGV2ZW50TmFtZSwgY2FsbEZ1biwgc2VsZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIqumZpOS5i+WJjeeUqOWQjOmhnuWei++8jOWbnuiqv++8jOebruaomeaIliB1c2VDYXB0dXJlIOiou+WGiueahOS6i+S7tuebo+iBveWZqO+8jOWmguaenOWPquWCs+mBniB0eXBl77yM5bCH5pyD5Yiq6ZmkIHR5cGUg6aGe5Z6L55qE5omA5pyJ5LqL5Lu255uj6IG95Zmo44CCXHJcbiAgICAgICAgICogQHBhcmFtIHtTZXJ2ZXJFdmVudFR5cGUgfCBHYW1lRXZlbnRUeXBlfSBldmVudE5hbWUgLSDkuovku7blkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0gY2FsbEZ1bj97RnVuY3Rpb259IC0g6KaB5Yiq6Zmk55qE5pa55rOVLOWmguaenOacquWCs+WPg+aVuCzlsIfpu5joqo3lhajpg6jnm7jpl5znmoRjYWxsRnVu5LiA5Lim5Yiq6ZmkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGRlc3Ryb3lFdmVudChldmVudE5hbWU6IHN0cmluZywgY2FsbEZ1bj86IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0Lm9mZihldmVudE5hbWUsIGNhbGxGdW4sIHRoaXMudGFyZ2V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaYr+WQpuipsuS6i+S7tuaMgee6jOebo+iBveS4rVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSDkuovku7blkI3nqLFcclxuICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBoYXNMaXN0ZW5pbmcoZXZlbnROYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0Lmhhc0V2ZW50TGlzdGVuZXIoZXZlbnROYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXQgZXZlbnRDb3VudCgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRDb3VudFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldCBldmVudHNDdXJyZW50bHlCZWluZygpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50c0N1cnJlbnRseUJlaW5nXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOmBiuaIsua1geeoi+euoeeQhuWZqCA6IOeuoeeQhueVtuWJjea1geeoiyzln7fooYznlbbliY3mtYHnqItcclxuICAgICAqIEBEYXRlIDIwMjEtMDUtMTQg5LiL5Y2IIDAzOjQ0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFByb2Nlc3NNYW5hZ2VyIGltcGxlbWVudHMgSUYuSVByb2Nlc3NNYW5hZ2VyIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBJRi5JUHJvY2Vzc01hbmFnZXJcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55W25YmN6YGK5oiy54uA5oWLXHJcbiAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLkdhbWVTdGF0ZVR5cGV9XHJcbiAgICAgICAgICogQGRlZmF1bHQgLSB0eXBlLkdhbWVTdGF0ZVR5cGUuU1RBTkRCWVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfZ2FtZVN0YXRlOiB0eXBlLkdhbWVTdGF0ZVR5cGU7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaYr+WQpueVtuWJjea1geeoi+Wft+ihjOS4rVxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBpc1N0YXJ0UHJvY2VzczogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5rWB56iL5bel5bugXHJcbiAgICAgICAgICogQHR5cGUge2ZjYy5JRi5JR2FtZVByb2Nlc3NGYWN0b3J5fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBnYW1lUHJvY2Vzc0ZhY3Rvcnk6IElGLklHYW1lUHJvY2Vzc0ZhY3Rvcnk7XHJcblxyXG5cclxuICAgICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnTWFuYWdlciA9IGNvbmZpZ01hbmFnZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+eNsuWPlkNvbmZpZ01hbmdlcizpm5nlkJHntoHlrppcclxuICAgICAgICAgICAgdGhpcy5nYW1lUHJvY2Vzc0ZhY3RvcnkgPSBuZXcgR2FtZVByb2Nlc3NGYWN0b3J5KHRoaXMpOyAgICAgIC8v5Yid5aeL5YyW5rWB56iL5bel5bugXHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVTdGF0ZSA9IHR5cGUuR2FtZVN0YXRlVHlwZS5TVEFOREJZOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+mBiuaIsueLgOaFi1xyXG4gICAgICAgICAgICB0aGlzLmlzU3RhcnRQcm9jZXNzID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vnlbbliY3ln7fooYzmtYHnqIvni4DmhYtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDmh7bmvKLliqDovIlcclxuICAgICAgICAgKiAg5Yid5aeL5YyWLOWPquiuk+S4gOWAi+WwiOahiOWPquacieS4gOasoeeUoueUn+atpGNsYXNzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzZXRJbnN0YW5jZShjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBQcm9jZXNzTWFuYWdlcihjb25maWdNYW5hZ2VyKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NNZ3IgPSB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDnjbLlj5blt7LntpPliJ3lp4vljJbnmoTpnZzmhYvlr6bkvotjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IElGLklQcm9jZXNzTWFuYWdlciB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuUFJPQ0VTU19GVywgXCLoqbLpoZ7lsJrmnKrlr6bkvovljJZcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6Kit5a6a5rWB56iLXHJcbiAgICAgICAgICogQHBhcmFtIHtmY2MudHlwZS5Qcm9jZXNzVHlwZSB8IHN0cmluZ30gcHJvY2Vzc05hbWUgLSDlj6/kvb/nlKjpoJDoqK0gUHJvY2Vzc1R5cGUg5oiW6Ieq6KiC576p5rWB56iL5ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHtmY2MuSUYuSVByb2Nlc3N9IHByb2Nlc3MgLSDmtYHnqItcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFByb2Nlc3MocHJvY2Vzc05hbWU6IHR5cGUuUHJvY2Vzc1R5cGUgfCBzdHJpbmcsIHByb2Nlc3M6IElGLklQcm9jZXNzKTogdGhpcyB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVByb2Nlc3NGYWN0b3J5LnNldFByb2Nlc3MocHJvY2Vzc05hbWUsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+a1geeoiyzln7fooYzntoHlrprnmoTmtYHnqIvlhafnmoRvbkNyZWF0ZeaWueazlVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgZmNjLnR5cGUuUHJvY2Vzc1R5cGV9IHByb2Nlc3NOYW1lIC0g5oyH5a6a5Y+q6KaB5Yid5aeL5ZOq5YCL5rWB56iLIGNsYXNzLOWmguaenOS9v+eUqOeEoeWPg+aWueazlSzlsIfmnIPliJ3lp4vljJbmiYDmnInntoHlrprnmoTmtYHnqItcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW5pdFByb2Nlc3MocHJvY2Vzc05hbWU/OiBzdHJpbmcgfCBmY2MudHlwZS5Qcm9jZXNzVHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQcm9jZXNzRmFjdG9yeS5pbml0UHJvY2Vzcyhwcm9jZXNzTmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDoqK3lrprliJ3lp4vopoHln7fooYznmoTmtYHnqItcclxuICAgICAgICAgKiBAcGFyYW0gcHJvY2Vzc05hbWUgLSDmtYHnqIvlkI3nqLFcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXREZWZhdWx0UHJvY2Vzcyhwcm9jZXNzTmFtZTogdHlwZS5Qcm9jZXNzVHlwZSB8IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQcm9jZXNzRmFjdG9yeS5jaGFuZ2VQcm9jZXNzKHByb2Nlc3NOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaPm+a1geeoi1xyXG4gICAgICAgICAqIEBwYXJhbSB7ZmNjLnR5cGUuUHJvY2Vzc1R5cGUgfCBzdHJpbmd9IHByb2Nlc3NOYW1lIC0g6KaB5pu05o+b55qE5rWB56iL5ZCN56ixXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hhbmdlUHJvY2Vzcyhwcm9jZXNzTmFtZTogdHlwZS5Qcm9jZXNzVHlwZSB8IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQcm9jZXNzRmFjdG9yeS5jaGFuZ2VQcm9jZXNzKHByb2Nlc3NOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWft+ihjOioreWumuWlveeahOa1geeoi1xyXG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHBsYXkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihhc3luYyAocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3RhcnRQcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9jZXNzU3RhdGUodHJ1ZSk7Ly/mtYHnqIvplovlp4tcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdhbWVQcm9jZXNzRmFjdG9yeS51c2VQcm9jZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9jZXNzU3RhdGUoZmFsc2UpOy8v5rWB56iL5b6q55Kw57WQ5p2fXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlBST0NFU1NfRlcsIFwi5rWB56iL5bCa5pyq57WQ5p2fLOiri+WLv+mHjeikh+Wft+ihjFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pS56K6K55W25YmN5rWB56iL6YCy6KGM54uA5oWLXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBzdGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlUHJvY2Vzc1N0YXRlKHN0YXRlOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTdGFydFByb2Nlc3MgPSBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa4hemZpOWgteWhnueLgOaFi1xyXG4gICAgICAgICAqIOazqOaEjzrmuIXpmaToqbLni4DmhYvlvows6Kmy5qyh55qE5rWB56iL5Y2z5L2/5bCa5pyq5Z+36KGM5a6MLOS5n+iDveWft+ihjOS4i+asoea1geeoi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbWFrZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1N0YXJ0UHJvY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHNldCBnYW1lU3RhdGUodmFsdWU6IHR5cGUuR2FtZVN0YXRlVHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nYW1lU3RhdGUgPSB2YWx1ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldCBnYW1lU3RhdGUoKTogdHlwZS5HYW1lU3RhdGVUeXBlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTdGF0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgdHlwZSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAgICAgKiBARGVzY3JpcHRpb24g6YGK5oiy5aC05pmv5qij5byPXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgZW51bSBTY2VuZVN0eWxlVHlwZSB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6Ieq5YuV5qih5byPLOWwh+acg+mFjeWQiOeOqeWutuiHquWLleWIh+aPm+ebtOW8j+aIluapq+W8j1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7U2NlbmVTdHlsZVR5cGUuQVVUT31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEFVVE8gPSAnQVVUTycsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5qmr5byP5qij5byPXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtTY2VuZVN0eWxlVHlwZS5IT1JJWk9OVEFMfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgSE9SSVpPTlRBTCA9ICdIT1JJWk9OVEFMJyxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnm7TlvI/mqKPlvI9cclxuICAgICAgICAgICAgICogQHR5cGUge1NjZW5lU3R5bGVUeXBlLlZFUlRJQ0FMfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgVkVSVElDQUwgPSAnVkVSVElDQUwnXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgdHlwZSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBBdXRob3Ig6JWt56uL5ZOBXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOeVtuWJjeaWueWQkVxyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDYtMjUg5LiL5Y2IIDA1OjE3XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4wXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGVudW0gU2NlbmVEaXJlY3Rpb25UeXBlIHtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnm7TlkJFcclxuICAgICAgICAgICAgICogQHR5cGUge1NjZW5lRGlyZWN0aW9uVHlwZS5QT1JUUkFJVH1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIFBPUlRSQUlUID0gJ1BPUlRSQUlUJyxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmqavlkJFcclxuICAgICAgICAgICAgICogQHR5cGUge1NjZW5lRGlyZWN0aW9uVHlwZS5MQU5EU0NBUEV9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBMQU5EU0NBUEUgPSAnTEFORFNDQVBFJyxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9TY2VuZU1hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDnm6Pogb3nlbbliY3pgYrmiLIs546p5a625piv5ZCm5pyJ5pu05YuV5a+s6auYXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBTY2VuZVNpemVDaGFuZ2VMaXN0ZW5lciB7XHJcblxyXG4gICAgICAgIC8v5piv5ZCm5Y+v5Lul5pu05paw55Wr6Z2iXHJcbiAgICAgICAgcHJpdmF0ZSBfaXNDYW5VcGRhdGVTY2VuZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25maWdNYW5hZ2VyIDogSUYuSUNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBzY2VuZU1hbmFnZXI6IElGLklTY2VuZU1hbmFnZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXIgOklGLklDb25maWdNYW5hZ2VyLHNjZW5lTWFuYWdlcjpJRi5JU2NlbmVNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnTWFuYWdlciA9IGNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmVNYW5hZ2VyID0gc2NlbmVNYW5hZ2VyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55uj6IG95piv5ZCm6KaB5pu05YuVc2NlbmXlr6zpq5hcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXlUaW1lIC0g5pu05paw6aC7546HXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVzaWduU2NlbmVFdmVudExpc3RlbmVyKGRlbGF5VGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGNjLnZpZXcub24oXCJjYW52YXMtcmVzaXplXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFrZURlc2lnblNjZW5lKGRlbGF5VGltZSk7XHJcbiAgICAgICAgICAgICAgICBjYy5sb2coXCLmm7TmlrDnlavpnaLlroznlaIuLi4uLi5cIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkvp3nhadkZXNpZ25TY2VuZUV2ZW50TGlzdGVuZXIoKeWPg+aVuOS4reeahGRlbGF55pmC6ZaTLOabtOaWsGNhdmVyc1xyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0g5pu05paw6aC7546HXHJcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgbWFrZURlc2lnblNjZW5lKHRpbWU6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0NhblVwZGF0ZVNjZW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNDYW5VcGRhdGVTY2VuZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lTWFuYWdlci51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FuVXBkYXRlU2NlbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdGltZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ01hbmFnZXIuaXNGcmFtZXdvcmtEZWJ1ZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwi5q2j5ZyoVXBkYXRlU2NlbmXkuK0g6KuL56iN5b6MLi4uLi4uXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgQUJTIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiBUT0RPXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNi0xMCDkuIrljYggMTE6MTJcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQUJhc2VOb3RpZmljYXRpb24gaW1wbGVtZW50cyBJRi5JQmFzZU5vdGlmaWNhdGlvbiB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogKOaKveixoSlOb3RpZmljYXRpb25IYW5kbGVyIOeUqOS+hueNsuWPlumAmeWAi2NsYXNz55qE5qiZ57GkXHJcbiAgICAgICAgICAgICAqIOips+e0sOeUseWtkOmhnuWvpuePvlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IFRBR19OQU1FOiBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6KeA5a+f6ICFXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtTZXQ8SUJhc2VPYnNlcnZlcj59XHJcbiAgICAgICAgICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHByb3RlY3RlZCByZWFkb25seSBvYnNlcnZlcjogU2V0PElGLklCYXNlT2JzZXJ2ZXI+O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqICjmir3osaEp5o6o5pKt5LqL5Lu2LOWPg+aVuOeUseWtkOmhnuips+e0sOWvpuePvlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gYW55XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgbm90aWZ5KC4uLmFueSk6IHZvaWQ7XHJcblxyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyID0gbmV3IFNldDxJRi5JQmFzZU9ic2VydmVyPigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6KiC6Zax6Kmy5LqL5Lu2XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7SUJhc2VPYnNlcnZlcn0gb2JzZXJ2ZXIgLSDpl5zms6jogIVcclxuICAgICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc1Blcm1hbmVudCAtIOaYr+WQpuW4uOmnkFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHVibGljIHN1YnNjcmliZShvYnNlcnZlcjogSUYuSUJhc2VPYnNlcnZlciwgaXNQZXJtYW5lbnQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVyLmhhcyhvYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlNDRU5FX0ZXLCBgJHtvYnNlcnZlcn0g6KmySUJhc2VPYnNlcnZlcuW3suiou+WGiumBjuiHquWLleeLgOaFi+aUueiuiuaZguS6i+S7tizoq4vmqqLmn6VgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5pc1Blcm1hbmVudCA9IGlzUGVybWFuZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5hZGQob2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOenu+mZpOiogumWsVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0lCYXNlT2JzZXJ2ZXJ9IG9ic2VydmVyIC0g6Zec5rOo6ICFXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgdW5zdWJzY3JpYmUob2JzZXJ2ZXI6IElGLklCYXNlT2JzZXJ2ZXIpOiB2b2lkIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVyLmhhcyhvYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyLmRlbGV0ZShvYnNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuUFJPQ0VTU19GVywgYCR7b2JzZXJ2ZXJ9IDog6Kmy6KeA5a+f6aGe5bCa5pyq57aB5a6a6YGOLOeEoemgiOenu+mZpOingOWvn+WwjeixoWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOenu+mZpOaJgOacieiogumWsVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVtb3ZlQWxsKCk6IHZvaWQge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog542y5Y+W6Kmy5LqL5Lu25omA5pyJ6KiC6Zax5pW46YePXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgZ2V0U3Vic2NyaWJlQ291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9ic2VydmVyLnNpemU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog542y5Y+W6Kmy5LqL5Lu25omA5pyJ6KiC6Zax6ICFXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgZ2V0QWxsU3Vic2NyaWJlKCk6IFNldDxJRi5JQmFzZU9ic2VydmVyPiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlcjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSB0eXBlIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiDmjqjmkq3kuovku7ZcclxuICAgICAgICAgKiBARGF0ZSAyMDIxLTA2LTEwIOS4i+WNiCAwNDo1OVxyXG4gICAgICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblR5cGUge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOiHquWLleeLgOaFi+aUueiuiuaZglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTm90aWZpY2F0aW9uVHlwZS5BVVRPX0NIQU5HRX1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEFVVE9fQ0hBTkdFID0gXCJBVVRPX0NIQU5HRVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeVtuWJjemBiuaIsumAn+W6pueLgOaFi+aUueiuiuaZglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTm90aWZpY2F0aW9uVHlwZS5TUEVFRF9DSEFOR0V9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBTUEVFRF9DSEFOR0UgPSBcIlNQRUVEX0NIQU5HRVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeUqOaItumHkemhjeiuiuabtOaZglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTm90aWZpY2F0aW9uVHlwZS5VU0VSX01PTkVZX0NIQU5HRX1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIFVTRVJfTU9ORVlfQ0hBTkdFID0gXCJVU0VSX01PTkVZX0NIQU5HRVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeUqOaItuabtOaPm+eahOaKvOS9j+mHkemhjeaZglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTm90aWZpY2F0aW9uVHlwZS5VU0VSX0JFVF9DSEFOR0V9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBVU0VSX0JFVF9DSEFOR0UgPSBcIlVTRVJfQkVUX0NIQU5HRVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeUqOaItui0j+WIhuaZglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTm90aWZpY2F0aW9uVHlwZS5VU0VSX0dFVF9XSU59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBVU0VSX0dFVF9XSU4gPSBcIlVTRVJfR0VUX1dJTlwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeUqOaItuaUueiuim1vYmlsZeaWueWQkeaZglxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7ZmNjLnR5cGUuTm90aWZpY2F0aW9uVHlwZS5TQ0VORV9ESVJFQ1RJT05fQ0hBTkdFfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU0NFTkVfRElSRUNUSU9OX0NIQU5HRSA9IFwiU0NFTkVfRElSRUNUSU9OX0NIQU5HRVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIHNlcnZlciDlm57lgrPntZDmnpzmmYJcclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLk5vdGlmaWNhdGlvblR5cGUuUkVTUE9OU0VfUkVTVUxUfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgUkVTUE9OU0VfUkVTVUxUID0gXCJSRVNQT05TRV9SRVNVTFRcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnnofmjpLkuovku7bmmYJcclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLk5vdGlmaWNhdGlvblR5cGUuU0NST0xMX0ZPQ1VTX1NUQVRFfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU0NST0xMX0ZPQ1VTX1NUQVRFID0gXCJTQ1JPTExfRk9DVVNfU1RBVEVcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnm6Pogb1TTE9U5omA5pyJ5YiXLOeVtuipsuWIl+e1kOadn+aZgizmjqjmkq3kuovku7ZcclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLk5vdGlmaWNhdGlvblR5cGUuQVVUT19DSEFOR0V9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBTTE9UX1JPV19FTkQgPSBcIlNMT1RfUk9XX0VORFwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWNs+WBnOS6i+S7tlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU1RPUF9OT1cgPSBcIlNUT1BfTk9XXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9TY2VuZS9FbnVtL1NjZW5lRGlyZWN0aW9uVHlwZS50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5aC05pmv5pa55ZCR5pS56K6K6KeA5a+f6ICFLOeVtuacieS6i+S7tuaOqOmAgeaZgizlsIfmnIPlsIfoqbLkuovku7bmjqjmkq3ntabntoHlrprogIVcclxuICAgICAqIEBEYXRlIDIwMjEtMDUtMTkg5LiL5Y2IIDAxOjQ2XHJcbiAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFNjZW5lRGlyZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIgaW1wbGVtZW50cyBJRi5JQmFzZU9ic2VydmVyIHtcclxuICAgICAgICBwcml2YXRlIF9pc1Blcm1hbmVudDogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNlbGY6IGFueTtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNhbGxGdW46ICh0eXBlOiB0eXBlLlNjZW5lRGlyZWN0aW9uVHlwZSkgPT4gdm9pZDtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoY2FsbEZ1bjogKHR5cGU6IHR5cGUuU2NlbmVEaXJlY3Rpb25UeXBlKSA9PiB2b2lkLCBzZWxmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUGVybWFuZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbEZ1biA9IGNhbGxGdW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdXNoTm90aWZpY2F0aW9uKHR5cGU6IHR5cGUuU2NlbmVEaXJlY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbEZ1bi5jYWxsKHRoaXMuc2VsZiwgdHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgaXNQZXJtYW5lbnQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1Blcm1hbmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBpc1Blcm1hbmVudCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1Blcm1hbmVudCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vU2NlbmUvRW51bS9TY2VuZURpcmVjdGlvblR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vQUJhc2VOb3RpZmljYXRpb24udHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRW51bS9Ob3RpZmljYXRpb25UeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL09ic2VydmVyVHlwZS9TY2VuZU9ic2VydmVyL1NjZW5lRGlyZWN0aW9uQ2hhbmdlT2JzZXJ2ZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDloLTmma/mlrnlkJHmlLnororpgJrnn6XnrqHnkIblmahcclxuICAgICAqIEBEYXRlIDIwMjEtMDUtMTkg5LiL5Y2IIDAxOjU3XHJcbiAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFNjZW5lRGlyZWN0aW9uQ2hhbmdlTm90aWZpY2F0aW9uIGV4dGVuZHMgQUJTLkFCYXNlTm90aWZpY2F0aW9uIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTm90aWZpY2F0aW9uSGFuZGxlciDnlKjkvobnjbLlj5bpgJnlgItjbGFzc+eahOaomeexpFxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IFRBR19OQU1FOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLlRBR19OQU1FID0gdHlwZS5Ob3RpZmljYXRpb25UeXBlLlNDRU5FX0RJUkVDVElPTl9DSEFOR0VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiogumWseipsuS6i+S7tlxyXG4gICAgICAgICAqIEBwYXJhbSB7QXV0b1N0YXRlQ2hhbmdlT2JzZXJ2ZXJ9IG9ic2VydmVyIC0g5o6o5pKl5o6l5pS26ICFXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc1Blcm1hbmVudCAtIOaYr+WQpuW4uOmnkOebo+iBvVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1YnNjcmliZShvYnNlcnZlcjogU2NlbmVEaXJlY3Rpb25DaGFuZ2VPYnNlcnZlciwgaXNQZXJtYW5lbnQ6IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgc3VwZXIuc3Vic2NyaWJlKG9ic2VydmVyLCBpc1Blcm1hbmVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnlKjmiLbmm7Tmj5vmlrnlkJHmmYLmjqjpgIHpgJrnn6VcclxuICAgICAgICAgKiBAcGFyYW0ge1NjZW5lRGlyZWN0aW9uVHlwZX0gdHlwZSAtIOeVtuWJjeeUqOaItuaWueWQkVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5vdGlmeSh0eXBlOiB0eXBlLlNjZW5lRGlyZWN0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vYnNlcnZlci5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgb2JzZXJ2ZXIgb2YgdGhpcy5vYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLnB1c2hOb3RpZmljYXRpb24odHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYnNlcnZlci5pc1Blcm1hbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKG9ic2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0VudW0vU2NlbmVEaXJlY3Rpb25UeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1NjZW5lTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9Ob3RpZmljYXRpb24vTm90aWZpY2F0aW9uVHlwZS9TY2VuZU5vdGlmaWNhdGlvbi9TY2VuZURpcmVjdGlvbkNoYW5nZU5vdGlmaWNhdGlvbi50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6Ieq5YuV5qih5byPIDog5L6d54Wn546p5a6255W25YmN55qE5L2/55So5pa55byPLOiHquWLleabtOaWsOeCuuapq+W8jyBvciDnm7TlvI9cclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEF1dG9TdHlsZSBpbXBsZW1lbnRzIElGLklTY2VuZVN0eWxlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzY2VuZU1hbmFnZXI6IElGLklTY2VuZU1hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBldmVudExvY2s6IGJvb2xlYW47ICAgIC8v6Zec6ZaJ5o6o5pKt5LqL5Lu255SoXHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHNjZW5lTWFuYWdlcjogSUYuSVNjZW5lTWFuYWdlcikge1xyXG4gICAgICAgICAgICB0aGlzLnNjZW5lTWFuYWdlciA9IHNjZW5lTWFuYWdlcjtcclxuICAgICAgICAgICAgaWYgKCFOb3RpZmljYXRpb25NYW5hZ2VyXHJcbiAgICAgICAgICAgICAgICAuaW5zdGFuY2UoKVxyXG4gICAgICAgICAgICAgICAgLmhhc05vdGlmaWNhdGlvbih0eXBlLk5vdGlmaWNhdGlvblR5cGUuU0NFTkVfRElSRUNUSU9OX0NIQU5HRSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMb2NrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5L2g5bCa5pyq57aB5a6a55W26YGK5oiy5pa55ZCR5pu05YuV5pmC55qE5o6o5pKt5LqL5Lu2LOWboOatpOS4jeacg+inuOeZvOaWueWQkeaUueiuiueahOaOqOaSreS6i+S7tlwiKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudExvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGV4ZWN1dGlvblN0eWxlKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2NlbmVEaXJlY3Rpb24oKTtcclxuICAgICAgICAgICAgaWYgKChjYy52aWV3LmdldEZyYW1lU2l6ZSgpLndpZHRoIC8gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQpID49ICh3aWR0aCAvIGhlaWdodCkpIHtcclxuICAgICAgICAgICAgICAgIC8v5a695bqm6LaF5Ye6XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3V2lkdGggPSBjYy52aWV3LmdldEZyYW1lU2l6ZSgpLndpZHRoICogKHdpZHRoIC8gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgY2Mudmlldy5zZXREZXNpZ25SZXNvbHV0aW9uU2l6ZShuZXdXaWR0aCwgaGVpZ2h0LCBjYy5SZXNvbHV0aW9uUG9saWN5LkZJWEVEX0hFSUdIVCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2Mudmlldy5nZXRGcmFtZVNpemUoKS53aWR0aCA+IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0hlaWdodCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkuaGVpZ2h0ICogKHdpZHRoIC8gY2Mudmlldy5nZXRGcmFtZVNpemUoKS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2Mudmlldy5zZXREZXNpZ25SZXNvbHV0aW9uU2l6ZSh3aWR0aCwgbmV3SGVpZ2h0LCBjYy5SZXNvbHV0aW9uUG9saWN5LkZJWEVEX1dJRFRIKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjYy52aWV3LmdldEZyYW1lU2l6ZSgpLndpZHRoIC8gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQpID49ICgxMDAwIC8gMTc3NykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0hlaWdodCA9IGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkuaGVpZ2h0ICogKDEwMDAgLyBjYy52aWV3LmdldEZyYW1lU2l6ZSgpLndpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2Mudmlldy5zZXREZXNpZ25SZXNvbHV0aW9uU2l6ZSgxMDAwLCBuZXdIZWlnaHQsIGNjLlJlc29sdXRpb25Qb2xpY3kuRklYRURfSEVJR0hUKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gY2Mudmlldy5nZXRGcmFtZVNpemUoKS5oZWlnaHQgKiAoMTAwMCAvIGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy52aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKDEwMDAsIG5ld0hlaWdodCwgY2MuUmVzb2x1dGlvblBvbGljeS5GSVhFRF9XSURUSCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmm7TmlrDnrqHnkIblmajlhafnmoQgc2NlbmVEaXJlY3Rpb24g6K6K5pW4LOS4puaOqOaSpeW3suabtOaWsOeVtuWJjeWgtOaZr+aWueWQkeeahOS6i+S7tlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICog5rOo5oSPIDog5aaC5p6c55W25YmN5pa55ZCR5LiN6K6KLOWNu+abtOaWsOS6humBiuaIsuaYr+mFjeW6pizmmK/kuI3mnIPmjqjms6Lkuovku7bnmoRcclxuICAgICAgICAgKiAgICAgICDlj6rmnInmlrnlkJHmlLnorormiY3mnIPmjqjpgIHmjqjms6Lkuovku7ZcclxuICAgICAgICAgKi9cclxuICAgICAgICB1cGRhdGVTY2VuZURpcmVjdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGNjLnZpZXcuZ2V0RnJhbWVTaXplKCkud2lkdGggPCBjYy52aWV3LmdldEZyYW1lU2l6ZSgpLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgLy/nm7TlkJFcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lTWFuYWdlci5zY2VuZURpcmVjdGlvbiA9PSB0eXBlLlNjZW5lRGlyZWN0aW9uVHlwZS5QT1JUUkFJVCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZU1hbmFnZXIuc2NlbmVEaXJlY3Rpb24gPSB0eXBlLlNjZW5lRGlyZWN0aW9uVHlwZS5QT1JUUkFJVDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRMb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uTWFuYWdlci5pbnN0YW5jZTxTY2VuZURpcmVjdGlvbkNoYW5nZU5vdGlmaWNhdGlvbj4oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Tm90aWZpY2F0aW9uKHR5cGUuTm90aWZpY2F0aW9uVHlwZS5TQ0VORV9ESVJFQ1RJT05fQ0hBTkdFKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubm90aWZ5KHR5cGUuU2NlbmVEaXJlY3Rpb25UeXBlLlBPUlRSQUlUKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8v5qmr5ZCRXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2VuZU1hbmFnZXIuc2NlbmVEaXJlY3Rpb24gPT0gdHlwZS5TY2VuZURpcmVjdGlvblR5cGUuTEFORFNDQVBFKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lTWFuYWdlci5zY2VuZURpcmVjdGlvbiA9IHR5cGUuU2NlbmVEaXJlY3Rpb25UeXBlLkxBTkRTQ0FQRTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRMb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uTWFuYWdlci5pbnN0YW5jZTxTY2VuZURpcmVjdGlvbkNoYW5nZU5vdGlmaWNhdGlvbj4oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Tm90aWZpY2F0aW9uKHR5cGUuTm90aWZpY2F0aW9uVHlwZS5TQ0VORV9ESVJFQ1RJT05fQ0hBTkdFKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubm90aWZ5KHR5cGUuU2NlbmVEaXJlY3Rpb25UeXBlLkxBTkRTQ0FQRSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5qmr5byP5qij5byP5pu05pawXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBIb3Jpem9udGFsU3R5bGUgaW1wbGVtZW50cyBJRi5JU2NlbmVTdHlsZSB7XHJcblxyXG4gICAgICAgIC8v55W25YmNY2F2ZXJz5a+s6auYXHJcbiAgICAgICAgcHJpdmF0ZSBjdXJEUjogYW55O1xyXG5cclxuICAgICAgICBwdWJsaWMgZXhlY3V0aW9uU3R5bGUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IGN2cyA9IGNjLmZpbmQoJ0NhbnZhcycpLmdldENvbXBvbmVudChjYy5DYW52YXMpO1xyXG4gICAgICAgICAgICAvL+S/neWtmOWOn+Wni+ioreioiOWIhui+qOeOh++8jOS+m+Wxj+W5leWkp+Wwj+iuiuWMluaZguS9v+eUqFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY3VyRFIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VyRFIgPSBjYy5zaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBkciA9IHRoaXMuY3VyRFI7XHJcbiAgICAgICAgICAgIGxldCBzID0gY2Muc2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCx3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICBsZXQgcncgPSBzLndpZHRoO1xyXG4gICAgICAgICAgICBsZXQgcmggPSBzLmhlaWdodDtcclxuICAgICAgICAgICAgbGV0IGZpbmFsVyA9IHJ3O1xyXG4gICAgICAgICAgICBsZXQgZmluYWxIID0gcmg7XHJcblxyXG4gICAgICAgICAgICBpZiAoKHJ3IC8gcmgpID4gKGRyLndpZHRoIC8gZHIuaGVpZ2h0KSkge1xyXG4gICAgICAgICAgICAgICAgLy/mqavlkJFcclxuICAgICAgICAgICAgICAgIC8vISN6aDog5piv5ZCm5YSq5YWI5bCH6Kit6KiI5YiG6L6o546H6auY5bqm5pKQ5ru/6KaW5ZyW6auY5bqmIOOAgiAqL1xyXG4gICAgICAgICAgICAgICAgY3ZzLmZpdEhlaWdodCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjdnMuZml0V2lkdGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5pu06ZW377yM5YmH55So5a6a6auYXHJcbiAgICAgICAgICAgICAgICBmaW5hbEggPSBkci5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBmaW5hbFcgPSBmaW5hbEggKiBydyAvIHJoO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/nm7TlkJFcclxuICAgICAgICAgICAgICAgIC8qISN6aDog5piv5ZCm5YSq5YWI5bCH6Kit6KiI5YiG6L6o546H5a+s5bqm5pKQ5ru/6KaW5ZyW5a+s5bqmIOOAgiAqL1xyXG4gICAgICAgICAgICAgICAgY3ZzLmZpdEhlaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY3ZzLmZpdFdpZHRoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5pu055+t77yM5YmH55So5a6a5a+sXHJcbiAgICAgICAgICAgICAgICBmaW5hbFcgPSBkci53aWR0aDtcclxuICAgICAgICAgICAgICAgIGZpbmFsSCA9IHJoIC8gcncgKiBmaW5hbFc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3ZzLmRlc2lnblJlc29sdXRpb24gPSBjYy5zaXplKGZpbmFsVywgZmluYWxIKTtcclxuICAgICAgICAgICAgY3ZzLm5vZGUud2lkdGggPSBmaW5hbFc7XHJcbiAgICAgICAgICAgIGN2cy5ub2RlLmhlaWdodCA9IGZpbmFsSDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOebtOW8j+aoo+W8j+abtOaWsFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFZlcnRpY2FsU3R5bGUgaW1wbGVtZW50cyBJRi5JU2NlbmVTdHlsZSB7XHJcblxyXG4gICAgICAgIHB1YmxpYyBleGVjdXRpb25TdHlsZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG5cclxuICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcihcIuWwmuacquWujOaIkOebtOWQkeaYr+mFjeaooeW8j1wiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0VudW0vU2NlbmVTdHlsZVR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9TY2VuZVN0eWxlL0F1dG9TdHlsZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1NjZW5lU3R5bGUvSG9yaXpvbnRhbFN0eWxlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vU2NlbmVTdHlsZS9WZXJ0aWNhbFN0eWxlLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5L6d54Wn5Yid5aeL6Kit5a6a5bCN5oeJ55qE5pu05paw5qih5byPLOabtOaWsOeVtuWJjemBiuaIsuWgtOaZr1xyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgU2NlbmVTdHlsZUhhbmRsZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIGF1dG9TdHlsZTogQXV0b1N0eWxlO1xyXG4gICAgICAgIHByaXZhdGUgaG9yaXpvbnRhbFN0eWxlOiBIb3Jpem9udGFsU3R5bGU7XHJcbiAgICAgICAgcHJpdmF0ZSB2ZXJ0aWNhbFN0eWxlOiBWZXJ0aWNhbFN0eWxlO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2NlbmVNYW5hZ2VyOiBJRi5JU2NlbmVNYW5hZ2VyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihzY2VuZU1hbmFnZXI6IElGLklTY2VuZU1hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zY2VuZU1hbmFnZXIgPSBzY2VuZU1hbmFnZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDljLnlsI3lsI3mh4nnmoTmm7TmlrDpoZ4s5YGa55u45bCN5oeJ55qE5pu05pawXHJcbiAgICAgICAgICogQHBhcmFtIHtmY2MudHlwZS5TY2VuZVN0eWxlVHlwZSB8IGZjYy5JRi5JU2NlbmVTdHlsZX0gc2NlbmVTdHlsZSAtIOWwjeaHieeahOeahOaoo+W8jyBvciDoh6roqILnvqnmqKPlvI9cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSDlr6xcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0g6auYXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0U3R5bGUoc2NlbmVTdHlsZTogdHlwZS5TY2VuZVN0eWxlVHlwZSB8IElGLklTY2VuZVN0eWxlLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHNjZW5lU3R5bGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5TY2VuZVN0eWxlVHlwZS5BVVRPOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hdXRvU3R5bGUpIHRoaXMuYXV0b1N0eWxlID0gbmV3IEF1dG9TdHlsZSh0aGlzLnNjZW5lTWFuYWdlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvU3R5bGUuZXhlY3V0aW9uU3R5bGUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHR5cGUuU2NlbmVTdHlsZVR5cGUuSE9SSVpPTlRBTDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaG9yaXpvbnRhbFN0eWxlKSB0aGlzLmhvcml6b250YWxTdHlsZSA9IG5ldyBIb3Jpem9udGFsU3R5bGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxTdHlsZS5leGVjdXRpb25TdHlsZSh3aWR0aCwgaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0eXBlLlNjZW5lU3R5bGVUeXBlLlZFUlRJQ0FMOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy52ZXJ0aWNhbFN0eWxlKSB0aGlzLnZlcnRpY2FsU3R5bGUgPSBuZXcgVmVydGljYWxTdHlsZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljYWxTdHlsZS5leGVjdXRpb25TdHlsZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxyXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lU3R5bGUuZXhlY3V0aW9uU3R5bGUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRXJyb3IvRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRXJyb3IvRXJyb3JNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0xvYWQvTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FbnVtL1NjZW5lU3R5bGVUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vRW51bS9TY2VuZURpcmVjdGlvblR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9JU2NlbmUvSVNjZW5lTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1NjZW5lU2l6ZUNoYW5nZUxpc3RlbmVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vU2NlbmVTdHlsZUhhbmRsZXIudHNcIiAvPlxyXG5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5aC05pmv566h55CG5ZmoIDog6Ieq5YuV5Yy56YWN6YGK5oiy5a+s6auYLOebo+iBveeVtuWJjeeOqeWutumBiueOqeaooeW8jyjmqavlvI9vcuebtOW8jylcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFNjZW5lTWFuYWdlciBpbXBsZW1lbnRzIElGLklTY2VuZU1hbmFnZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogSUYuSVNjZW5lTWFuYWdlcjtcclxuICAgICAgICBwcml2YXRlIHN0eWxlOiB0eXBlLlNjZW5lU3R5bGVUeXBlIHwgSUYuSVNjZW5lU3R5bGU7XHJcbiAgICAgICAgcHJpdmF0ZSBfZGVzaWduV2lkdGg6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIF9kZXNpZ25IZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHNjZW5lU2l6ZUNoYW5nZUxpc3RlbmVyOiBTY2VuZVNpemVDaGFuZ2VMaXN0ZW5lcjtcclxuICAgICAgICBwcml2YXRlIHNjZW5lU3R5bGVIYW5kbGVyOiBTY2VuZVN0eWxlSGFuZGxlcjtcclxuICAgICAgICBwcml2YXRlIF9zY2VuZURpcmVjdGlvbjogdHlwZS5TY2VuZURpcmVjdGlvblR5cGU7XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uc3RydWN0b3IoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gY29uZmlnTWFuYWdlcjtcclxuICAgICAgICAgICAgdGhpcy5fZGVzaWduV2lkdGggPSAxMjgwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Yid5aeL6aCQ6Kit5a+s5bqmXHJcbiAgICAgICAgICAgIHRoaXMuX2Rlc2lnbkhlaWdodCA9IDcyMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+mgkOioremrmOW6plxyXG4gICAgICAgICAgICB0aGlzLnNjZW5lU2l6ZUNoYW5nZUxpc3RlbmVyID0gbmV3IFNjZW5lU2l6ZUNoYW5nZUxpc3RlbmVyKGNvbmZpZ01hbmFnZXIsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnNjZW5lU3R5bGVIYW5kbGVyID0gbmV3IFNjZW5lU3R5bGVIYW5kbGVyKHRoaXMpOyAgICAgICAgICAgLy/lr6bkvovljJZzY2VuZeaoo+W8j+WwjuWQkeWZqFxyXG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gdHlwZS5TY2VuZVN0eWxlVHlwZS5IT1JJWk9OVEFMOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vpoJDoqK1zY2VuZeeVq+mdouiqv+aVtOeahOaooeW8j1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqICDliJ3lp4vljJYs5Y+q6K6T5LiA5YCL5bCI5qGI55Si55Sf5LiA5qyh6KmyY2xhc3NcclxuICAgICAgICAgKiBAcGFyYW0ge2ZjYy5JRi5JQ29uZmlnTWFuYWdlcn0gY29uZmlnTWFuYWdlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc2V0SW5zdGFuY2UoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgU2NlbmVNYW5hZ2VyKGNvbmZpZ01hbmFnZXIpO1xyXG4gICAgICAgICAgICAgICAgc2NlbmVNZ3IgPSB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOeNsuWPluW3sue2k+WIneWni+WMlueahOmdnOaFi+WvpuS+i2NsYXNzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogSUYuSVNjZW5lTWFuYWdlciB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuU0NFTkVfRlcsIFwi6Kmy6aGe5bCa5pyq5a+m5L6L5YyWXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGNhdmVycyDoqK3oqIjlr6zluqZcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSDlr6zluqZcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldERlc2lnbldpZHRoKHdpZHRoOiBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVzaWduV2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBjYXZlcnMg6Kit6KiI6auY5bqmXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIOmrmOW6plxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0RGVzaWduSGVpZ2h0KGhlaWdodDogbnVtYmVyKTogdGhpcyB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlc2lnbkhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaWsOeVtuWJjeekuumFjeWvrOmrmCzmnIPkv53lrZjkuIrmrKHnmoRzY2VuZeabtOWLleaooeW8j1xyXG4gICAgICAgICAqIOWmguS4jea3u+WKoOWPg+aVuCznrKzkuIDmrKHlsIfmnIPkvb/nlKjpoJDoqK3mqKHlvI/mm7Tli5VcclxuICAgICAgICAgKiBAcGFyYW0ge1NjZW5lU3R5bGVUeXBlIHwgRnVuY3Rpb259IHN0eWxlIC0g5Y+v6Ieq5a6a576p5pu05YuV5qij5byPLOS9humcgOWvpuS9nCjku4vpnaIpSVNjZW5lU3R5bGVcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVwZGF0ZVNpemUoc3R5bGU/OiB0eXBlLlNjZW5lU3R5bGVUeXBlIHwgSUYuSVNjZW5lU3R5bGUpOiB0aGlzIHtcclxuICAgICAgICAgICAgaWYgKHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlID0gc3R5bGU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0eXBlLlNjZW5lU3R5bGVUeXBlLkhPUklaT05UQUw6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NjZW5lRGlyZWN0aW9uID0gdHlwZS5TY2VuZURpcmVjdGlvblR5cGUuUE9SVFJBSVQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5TY2VuZVN0eWxlVHlwZS5WRVJUSUNBTDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2NlbmVEaXJlY3Rpb24gPSB0eXBlLlNjZW5lRGlyZWN0aW9uVHlwZS5MQU5EU0NBUEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZS5TY2VuZVN0eWxlVHlwZS5BVVRPOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuipsuabtOaWsOaooeW8j+WwmuacquWMheWQq+WcqOahhuaetuS4rSzoq4vnorroqo3mmK/lkKbmnInlr6bkvZxJU2NlbmVTdHlsZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNjZW5lU3R5bGVIYW5kbGVyLmdldFN0eWxlKHRoaXMuc3R5bGUsIHRoaXMuX2Rlc2lnbldpZHRoLCB0aGlzLl9kZXNpZ25IZWlnaHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOebo+iBveeVtuWJjWNhdmVyc+aYr+WQpuacieabtOWLleWkp+WwjyzlpoLmnpzmnInlsIfmnIPoh6rli5Xmm7TmlrDnlbbliY3mmK/phY3lr6zpq5hcclxuICAgICAgICAgKiDlsIfmnIPmr5TnhafkuIrmrKHmm7Tli5XnmoTmqKPlvI/pgLLooYzmm7Tli5VcclxuICAgICAgICAgKiDlpoLmnpzpnIDmsYLmm7Tli5XmqKPlvI8s6aCI5YWI5pu05pawIHVwZGF0ZVNpemUoKVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIDog5pu05paw55qE6aC7546HIOWWruS9jeavq+enkiBtc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGFydExpc3RlbmVyKHRpbWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLnNjZW5lU2l6ZUNoYW5nZUxpc3RlbmVyLmRlc2lnblNjZW5lRXZlbnRMaXN0ZW5lcih0aW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaPm+WgtOaZr1xyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIDog5aC05pmv6LOH5rqQ5ZCN56ix54K65L2gUmVz5YuV5oWL5Yqg6LyJ55qE6Ieq6KiC576p55qEc2NlbmXlkI3nqLFcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY2hhbmdlU2NlbmUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICghTG9hZFJlc01hbmFnZXIuaW5zdGFuY2Uuc2NlbmVSZXMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlNDRU5FX0ZXLCBcIuWKoOi8ieS4jeWIsOS9oOeahFNjZW5l6LOH5rqQLOiri+aqouafpeipsuizh+a6kOWQjeaYr+WQpuato+eiulwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYy5kaXJlY3Rvci5ydW5TY2VuZShMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5zY2VuZVJlcy5nZXQobmFtZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5riF6Zmk6Kmyc2NlbmXmiYDmnInli5XkvZxcclxuICAgICAgICAgKiBAcGFyYW0gc2NlbmV7Y2MuQ29tcG9uZW50fSAtIOimgea4hemZpOeahHNjZW5lIGNsYXNzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbW92ZVNjZW5lKHNjZW5lOiBjYy5Db21wb25lbnQpIHtcclxuICAgICAgICAgICAgc2NlbmUuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGdldCBzY2VuZURpcmVjdGlvbigpOiB0eXBlLlNjZW5lRGlyZWN0aW9uVHlwZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2VuZURpcmVjdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBzY2VuZURpcmVjdGlvbih2YWx1ZTogdHlwZS5TY2VuZURpcmVjdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2NlbmVEaXJlY3Rpb24gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lTbG90U3R5bGVNYW5hZ2VyLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6ICB6JmO5qmf566h55CG5ZmoIDog566h55CG6ICB6JmO5qmf5qij5byPLOWft+ihjOmAn+W6pizmlYjmnpxcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFNsb3RTdHlsZU1hbmFnZXIgaW1wbGVtZW50cyBJRi5JU2xvdFN0eWxlTWFuYWdlciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogSUYuSVNsb3RTdHlsZU1hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcjtcclxuICAgICAgICBwcml2YXRlIHRlbXBsYXRlOiBuZXcoc3R5bGVEYXRhOiBJRi5JQmFzZVNsb3RTZXR0aW5nLCBjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcikgPT4gQUJhc2VTbG90VGVtcGxhdGU8SUYuSUJhc2VTbG90U2V0dGluZz5cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9zbG90OiBNYXA8c3RyaW5nLCBmY2MuSUYuSUJhc2VTbG90VGVtcGxhdGU8SUYuSUJhc2VTbG90U2V0dGluZz4+O1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3Nsb3RTdHlsZTogTWFwPHN0cmluZywgSUYuSUJhc2VTbG90U2V0dGluZz47XHJcblxyXG5cclxuICAgICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnTWFuYWdlciA9IGNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nsb3QgPSBuZXcgTWFwPHN0cmluZywgSUYuSUJhc2VTbG90VGVtcGxhdGU8SUYuSUJhc2VTbG90U2V0dGluZz4+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nsb3RTdHlsZSA9IG5ldyBNYXA8c3RyaW5nLCBmY2MuSUYuSUJhc2VTbG90U2V0dGluZz4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDmh7bmvKLliqDovIlcclxuICAgICAgICAgKiAg5Yid5aeL5YyWLOWPquiuk+S4gOWAi+WwiOahiOeUoueUn+S4gOasoeipsmNsYXNzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzZXRJbnN0YW5jZShjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBTbG90U3R5bGVNYW5hZ2VyKGNvbmZpZ01hbmFnZXIpO1xyXG4gICAgICAgICAgICAgICAgc2xvdFN0eWxlTWdyID0gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDnjbLlj5blt7LntpPliJ3lp4vljJbnmoTpnZzmhYvlr6bkvotjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IElGLklTbG90U3R5bGVNYW5hZ2VyIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5TTE9UX1NUWUxFX0ZXLCBcIuipsumhnuWwmuacquWvpuS+i+WMllwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDln7fooYzmtYHnqIvnmoRjbGFzcyDpnIDnubzmib8gQUJhc2VTbG90VGVtcGxhdGVcclxuICAgICAgICAgKiBAcGFyYW0ge3tuZXcoc3R5bGVEYXRhOiBmY2MuSUYuSUJhc2VTbG90U2V0dGluZywgY29uZmlnTWFuYWdlcjogZmNjLklGLklDb25maWdNYW5hZ2VyKTogVH19IHNsb3RUZW1wbGF0ZVxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0U2xvdFRlbXBsYXRlPFQgZXh0ZW5kcyBBQmFzZVNsb3RUZW1wbGF0ZTxmY2MuSUYuSUJhc2VTbG90U2V0dGluZz4+KHNsb3RUZW1wbGF0ZTogbmV3IChzdHlsZURhdGE6IGZjYy5JRi5JQmFzZVNsb3RTZXR0aW5nLCBjb25maWdNYW5hZ2VyOiBmY2MuSUYuSUNvbmZpZ01hbmFnZXIpID0+IFQpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHNsb3RUZW1wbGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqBzbG905Li75LqL5Lu25qij5byP6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHt7bmV3KHNsb3RTdHlsZU1hbmFnZXI6IGZjYy5JRi5JU2xvdFN0eWxlTWFuYWdlcik6IFR9fSBzbG90U2V0dGluZ1xyXG4gICAgICAgICAqIEByZXR1cm4ge1R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0U2xvdFN0eWxlPFQgZXh0ZW5kcyBJRi5JQmFzZVNsb3RTZXR0aW5nPihzbG90U2V0dGluZz86IG5ldyhzbG90U3R5bGVNYW5hZ2VyOiBJRi5JU2xvdFN0eWxlTWFuYWdlcikgPT4gVCk6IFQge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHNsb3RTZXR0aW5nKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Yid5aeL5YyWU2xvdCA6IOWwh1Nsb3ToqK3lrprlj4PmlbjntabkuohTbG905YGa5Yid5aeL6JmV55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYnVpbGQoc2xvdFNldHRpbmc6IElGLklCYXNlU2xvdFNldHRpbmcpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXJcclxuICAgICAgICAgICAgICAgICAgICAuaW5zdGFuY2VcclxuICAgICAgICAgICAgICAgICAgICAuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLlVOREVGSU5FRF9GVyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTbG90IFRlbXBsYXRlIOacquizpuS6iCzpnIDlr6blgZrkuIDlgItTbG90VGVtcGxhdGVcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBuZXcgdGhpcy50ZW1wbGF0ZShzbG90U2V0dGluZywgdGhpcy5jb25maWdNYW5hZ2VyKVxyXG4gICAgICAgICAgICB0aGlzLl9zbG90LnNldChzbG90U2V0dGluZy50YWcsIHRlbXBsYXRlKVxyXG4gICAgICAgICAgICB0aGlzLl9zbG90U3R5bGUuc2V0KHNsb3RTZXR0aW5nLnRhZywgc2xvdFNldHRpbmcpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGdldCBzbG90KCk6IE1hcDxzdHJpbmcsIGZjYy5JRi5JQmFzZVNsb3RUZW1wbGF0ZTxJRi5JQmFzZVNsb3RTZXR0aW5nPj4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xvdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBzbG90U3R5bGUoKTogTWFwPHN0cmluZywgZmNjLklGLklCYXNlU2xvdFNldHRpbmc+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nsb3RTdHlsZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSB0eXBlIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiDpgYrmiLLoh6rli5Xni4DmhYvnqK7poZ5cclxuICAgICAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4cG9ydCBlbnVtIEF1dG9UeXBlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeEoemZkEFVVE9cclxuICAgICAgICAgICAgICogQHR5cGUge0F1dG9UeXBlLkFVVE99XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBBVVRPID0gLTEsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog55u05YiwRnJlZeWHuuePvuW+jCzntZDmnZ9BVVRP54uA5oWLXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBdXRvVHlwZS5BVVRPfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgRlJFRV9FTkQgPSAtMixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBVVRPIDUw5qyhXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBdXRvVHlwZS5BVVRPXzUwfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQVVUT181MCA9IDUwLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEFVVE8gMTAw5qyhXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBdXRvVHlwZS5BVVRPXzEwMH1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEFVVE9fMTAwID0gMTAwLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEFVVE8gNTAw5qyhXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtBdXRvVHlwZS5BVVRPXzEwMH1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEFVVE9fNTAwID0gNTAwLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEFVVE8gMTAwMOasoVxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7QXV0b1R5cGUuQVVUT18xMDAwfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQVVUT18xMDAwID0gMTAwMFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgdHlwZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiBUT0RPXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNi0xNSDkuIvljYggMDY6MDBcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgZXhwb3J0IGVudW0gTGFuZ3VhZ2VUeXBlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWPsOeBo1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7TGFuZ3VhZ2VUeXBlLlRBSVdBTn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIFRBSVdBTiA9IFwiTlREXCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Lit5ZyLXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtMYW5ndWFnZVR5cGUuQ0hJTkVTRX1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIENISU5FU0UgPSBcIkNOWVwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOazsOWci1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7TGFuZ3VhZ2VUeXBlLlRIQUlMQU5EfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgVEhBSUxBTkQgPSBcIlRIQlwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOe+juWci1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7TGFuZ3VhZ2VUeXBlLkFNRVJJQ0F9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBBTUVSSUNBID0gXCJVU0RcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDotorljZdcclxuICAgICAgICAgICAgICogQHR5cGUge0xhbmd1YWdlVHlwZS5WSUVUTkFNfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgVklFVE5BTSA9IFwiVk5EXCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Y2w5bC8XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBJTkRPTkVTSUEgPSBcIklEUlwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOmmrOS+huilv+S6nlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgTUFMQVlTSUEgPSBcIk1ZUlwiLFxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vQXVkaW8vQXVkaW9NYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FdmVudC9FdmVudE1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vTG9hZC9Mb2FkUmVzTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9Qcm9jZXNzL1Byb2Nlc3NNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL1NjZW5lL1NjZW5lTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9TbG90L1Nsb3RTdHlsZU1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vUHJvY2Vzcy9FbnVtL0F1dG9UeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vSUNvbmZpZy9JU2xvdENvbmZpZ01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vTGFuZ3VhZ2UvRW51bS9MYW5ndWFnZVR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vUHJvY2Vzcy9FbnVtL0F1dG9UeXBlLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6YGK5oiy5Yid5aeL6Kit5a6aLOS4pumAj+mBjmJ1aWxkZXLliqDovInmiYDmnIlNYW5hZ2VyXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA1LTEzIOS4iuWNiCAxMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBTbG90Q29uZmlnTWFuYWdlciBpbXBsZW1lbnRzIElGLklTbG90Q29uZmlnTWFuYWdlciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogSUYuSVNsb3RDb25maWdNYW5hZ2VyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDovInlhaXlpJbpg6jos4fmupBVUkxcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfZXh0ZXJuYWxseUxvYWRVUkw6IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55W25YmN6YGK5oiy5ZCN56ixXHJcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX2dhbWVOdW1iZXI6IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5piv5ZCm5Zyo6YGK5oiy6YCy5YWl5b6M6ZaL5ZWfYXV0b+eLgOaFi1xyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfaXNBdXRvOiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJ3lp4vpgYrmiLLmnIDliJ3nmoRhdXRv5qyh5pW4XHJcbiAgICAgICAgICogQHR5cGUge0F1dG9UeXBlfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfYXV0b0NvdW50OiB0eXBlLkF1dG9UeXBlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmK/lkKblnKjpgYrmiLLpgLLlhaXlvozmmK/liqDpgJ/nmoTni4DmhYtcclxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX2lzU3BlZWRVcDogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Yid5aeL6IOM5pmv6Z+z5qiC6Z+z6YePKOipsumfs+mHj+Wwh+acg+aIkOeCukF1ZGlvTWFuYWdlcuWFp+mgkOioremfs+mHjylcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfbXVzaWNWb2x1bWU6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Yid5aeL5bCH6IOM5pmv6Z+z5qiC6Z2c6Z+zXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9pc011c2ljT25NdXRlOiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJ3lp4vmlYjmnpzpn7Pph48o6Kmy6Z+z6YeP5bCH5pyD5oiQ54K6QXVkaW9NYW5hZ2Vy5YWn6aCQ6Kit6Z+z6YePKVxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9lZmZlY3RWb2x1bWU6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Yid5aeL5bCH5pWI5p6c6Z+z5pWI6Z2c6Z+zXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9pc0VmZmVjdE9uTXV0ZTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55W25YmN6Kqe57O7XHJcbiAgICAgICAgICogQHR5cGUge0xhbmd1YWdlVHlwZX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX2xhbmd1YWdlOiB0eXBlLkxhbmd1YWdlVHlwZSB8IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDov5Tlm57pppbpoIFVUkxcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9iYWNrSG9tZVVSTDogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmK/lkKbopoHplovllZ9GcmFtZXdvcmsgRGVidWfmqKHlvI9cclxuICAgICAgICAgKiDms6jmhI866YGK5oiy5q2j5byP5LiK57ea6aCI6Zec6ZaJXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9pc0ZyYW1ld29ya0RlYnVnOiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBjb2NvcyDmoYbmnrYgZGVidWfoqK3lrppcclxuICAgICAgICAgKiBAZGVmYXVsdCA6IElORk9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9jb2Nvc0RlYnVnU2V0dGluZzogY2MuZGVidWcuRGVidWdNb2RlO1xyXG5cclxuICAgICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9nYW1lTnVtYmVyID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6Kmy6YGK5oiy5ZCN56ixXHJcbiAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsbHlMb2FkVVJMID0gXCJcIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+i8ieWFpeWklumDqOizh+a6kFVSTFxyXG4gICAgICAgICAgICB0aGlzLl9pc0F1dG8gPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5piv5ZCm6Ieq5YuVXHJcbiAgICAgICAgICAgIHRoaXMuX2lzU3BlZWRVcCA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mmK/lkKbliqDpgJ9cclxuICAgICAgICAgICAgdGhpcy5fYXV0b0NvdW50ID0gdHlwZS5BdXRvVHlwZS5BVVRPOyAgICAgICAgICAgICAgICAgICAvL+WIneWni+iHquWLleeLgOaFi1xyXG4gICAgICAgICAgICB0aGlzLl9tdXNpY1ZvbHVtZSA9IDE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6YGK5oiy6Z+z6YePXHJcbiAgICAgICAgICAgIHRoaXMuX2VmZmVjdFZvbHVtZSA9IDE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mlYjmnpzpn7Pph49cclxuICAgICAgICAgICAgdGhpcy5faXNNdXNpY09uTXV0ZSA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+aYr+WQpuWwh+mfs+aogumdnOmfs1xyXG4gICAgICAgICAgICB0aGlzLl9pc0VmZmVjdE9uTXV0ZSA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5piv5ZCm5bCH6Z+z5pWI6Z2c6Z+zXHJcbiAgICAgICAgICAgIHRoaXMuX2xhbmd1YWdlID0gdHlwZS5MYW5ndWFnZVR5cGUuQ0hJTkVTRSAgICAgICAgICAgICAgLy/liJ3lp4vnlbbliY3oqp7ns7ss5bCH5L6d5pOa6Kmy6Kqe57O7LOi8ieWFpeaJgOacieiApuWQiOWcluaqlFxyXG4gICAgICAgICAgICB0aGlzLl9iYWNrSG9tZVVSTCA9IFwiXCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vov5Tlm57pppbpoIFVUkxcclxuICAgICAgICAgICAgdGhpcy5fY29jb3NEZWJ1Z1NldHRpbmcgPSBjYy5kZWJ1Zy5EZWJ1Z01vZGUuSU5GTyAgICAgICAvL+ioree9rmNvY29zIGRlYnVnIOaooeW8j1xyXG4gICAgICAgICAgICB0aGlzLl9pc0ZyYW1ld29ya0RlYnVnID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5piv5ZCm6KaB6ZaL5ZWf5qGG5p6255qERGVidWfmqKHlvI9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqIOWIneWni+WMlizlj6rorpPkuIDlgIvlsIjmoYjlj6rmnInkuIDmrKHnlKLnlJ/mraRjbGFzc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtTbG90Q29uZmlnTWFuYWdlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBJRi5JU2xvdENvbmZpZ01hbmFnZXIge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBTbG90Q29uZmlnTWFuYWdlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoOmBiuaIsuWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6YGK5oiy5ZCN56ixXHJcbiAgICAgICAgICogQGRlZmF1bHQgbnVsbFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldEdhbWVOdW1iZXIobmFtZTogc3RyaW5nKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9nYW1lTnVtYmVyID0gbmFtZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6Kit572u5Yid5aeL6aCQ6Kit6Z+z6YePXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciAtIOmfs+mHjyAwfjFcclxuICAgICAgICAgKiBAZGVmYXVsdCAxXHJcbiAgICAgICAgICogQHJldHVybnMge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0TXVzaWNWb2x1bWUobnVtYmVyOiBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5fbXVzaWNWb2x1bWUgPSBudW1iZXJcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDoqK3nva7liJ3lp4vpoJDoqK3mlYjmnpzpn7Pph49cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIC0g6Z+z6YePIDB+MVxyXG4gICAgICAgICAqIEBkZWZhdWx0IDFcclxuICAgICAgICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRFZmZlY3RWb2x1bWUobnVtYmVyOiBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5fZWZmZWN0Vm9sdW1lID0gbnVtYmVyO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+Wwh+iDjOaZr+mfs+aogumdnOmfs1xyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gT25NdXRlIC0g5piv5ZCm6Z2c6Z+zXHJcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAgICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRNdXNpY09uTXV0ZShPbk11dGU6IGJvb2xlYW4pOiB0aGlzIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2lzTXVzaWNPbk11dGUgPSBPbk11dGU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+aYr+WQpuWwh+aViOaenOmfs+aViOmdnOmfs1xyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gT25NdXRlIC0g5piv5ZCm6Z2c6Z+zXHJcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAgICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0RWZmZWN0T25NdXRlKE9uTXV0ZTogYm9vbGVhbik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faXNFZmZlY3RPbk11dGUgPSBPbk11dGU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+mBiuaIsuacgOWIneeahGF1dG/mrKHmlbhcclxuICAgICAgICAgKiBAcGFyYW0ge0F1dG9UeXBlfSB0eXBlXHJcbiAgICAgICAgICogQGRlZmF1bHQgdHlwZS5BdXRvVHlwZS5BVVRPXHJcbiAgICAgICAgICogQHJldHVybnMge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0QXV0b0NvbnQodHlwZTogdHlwZS5BdXRvVHlwZSk6IHRoaXMge1xyXG4gICAgICAgICAgICB0aGlzLl9hdXRvQ291bnQgPSB0eXBlO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJ3lp4vopoHlvp7lpJbpg6jmi7/lj5bos4fmupDnmoRVUkxcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIDog542y5Y+W5aSW6YOo6LOH5rqQ55qEVVJMXHJcbiAgICAgICAgICogQGRlZmF1bHQgXCJcIlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldEV4dGVybmFsbHlMb2FkVVJMKHVybDogc3RyaW5nKTogdGhpcyB7XHJcbiAgICAgICAgICAgIHRoaXMuX2V4dGVybmFsbHlMb2FkVVJMID0gdXJsO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+iqnuezu1xyXG4gICAgICAgICAqIEBwYXJhbSB7TGFuZ3VhZ2VUeXBlfSBsYW5ndWFnZVR5cGUgLSDoqp7ns7tcclxuICAgICAgICAgKiBAZGVmYXVsdCBMYW5ndWFnZVR5cGUuQ0hJTkVTRVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldExhbmd1YWdlKGxhbmd1YWdlVHlwZTogc3RyaW5nKTogdGhpcyB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhbmd1YWdlID0gbGFuZ3VhZ2VUeXBlO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+mAsuWFpemBiuaIsuaZgkF1dG/ni4DmhYtcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzQXV0byAtIOaYr+WQpuWcqOmBiuaIsumAsuWFpeW+jOmWi+WVn2F1dG/ni4DmhYtcclxuICAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldEF1dG9TdGF0ZShpc0F1dG86IGJvb2xlYW4pOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5faXNBdXRvID0gaXNBdXRvO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaYr+WQpuWcqOmBiuaIsumAsuWFpeW+jOaYr+WKoOmAn+eahOeLgOaFi1xyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTcGVlZFVwXHJcbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAgICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRTcGVlZFN0YXRlKGlzU3BlZWRVcDogYm9vbGVhbik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faXNTcGVlZFVwID0gaXNTcGVlZFVwO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmK/lkKbopoHplovllZ9GcmFtZXdvcmsgRGVidWfmqKHlvI9cclxuICAgICAgICAgKiDms6jmhI866YGK5oiy5q2j5byP5LiK57ea6aCI6Zec6ZaJXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB1c2VcclxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICAgICAgICogQHJldHVybnMge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0RnJhbWVXb3JrRGVidWcodXNlOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRnJhbWV3b3JrRGVidWcgPSB1c2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogY29jb3Mg5qGG5p62IGRlYnVn6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHtjYy5kZWJ1Zy5EZWJ1Z01vZGV9IHR5cGUgLSBkZWJ1ZyDmqKPlvI9cclxuICAgICAgICAgKiBAZGVmYXVsdCAtIGNjLmRlYnVnLkRlYnVnTW9kZS5JTkZPXHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRDb2Nvc0RlYnVnKHR5cGU6IGNjLmRlYnVnLkRlYnVnTW9kZSk6IHRoaXMge1xyXG4gICAgICAgICAgICB0aGlzLl9jb2Nvc0RlYnVnU2V0dGluZyA9IHR5cGU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6L+U5Zue6aaW6aCBVVJMXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG4gICAgICAgICAqIEBkZWZhdWx0IG51bGxcclxuICAgICAgICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRCYWNrSG9tZVVSTCh1cmw6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgICAgICB0aGlzLl9iYWNrSG9tZVVSTCA9IHVybDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlr6bkvovljJbmiYDmnIlNYW5hZ2VyIGNsYXNzO1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBidWlsZCgpIHtcclxuICAgICAgICAgICAgY2MuZGVidWdbXCJfcmVzZXREZWJ1Z1NldHRpbmdcIl0odGhpcy5fY29jb3NEZWJ1Z1NldHRpbmcpO1xyXG4gICAgICAgICAgICBFcnJvck1hbmFnZXIuc2V0SW5zdGFuY2UodGhpcyk7XHJcbiAgICAgICAgICAgIEF1ZGlvTWFuYWdlci5zZXRJbnN0YW5jZSh0aGlzKTtcclxuICAgICAgICAgICAgTGFuZ3VhZ2VNYW5hZ2VyLnNldEluc3RhbmNlKHRoaXMpO1xyXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIuc2V0SW5zdGFuY2UodGhpcyk7XHJcbiAgICAgICAgICAgIExvYWRSZXNNYW5hZ2VyLnNldEluc3RhbmNlKHRoaXMpO1xyXG4gICAgICAgICAgICBQcm9jZXNzTWFuYWdlci5zZXRJbnN0YW5jZSh0aGlzKTtcclxuICAgICAgICAgICAgU2NlbmVNYW5hZ2VyLnNldEluc3RhbmNlKHRoaXMpO1xyXG4gICAgICAgICAgICBTbG90U3R5bGVNYW5hZ2VyLnNldEluc3RhbmNlKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbi8vIGdldCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICBnZXQgZXh0ZXJuYWxseUxvYWRVUkwoKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4dGVybmFsbHlMb2FkVVJMO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGdhbWVOdW1iZXIoKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVOdW1iZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgaXNBdXRvKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNBdXRvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGF1dG9Db3VudCgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXV0b0NvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGlzU3BlZWRVcCgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU3BlZWRVcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBtdXNpY1ZvbHVtZSgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbXVzaWNWb2x1bWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgZWZmZWN0Vm9sdW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lZmZlY3RWb2x1bWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgbGFuZ3VhZ2UoKTogdHlwZS5MYW5ndWFnZVR5cGUgfCBzdHJpbmcge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgaXNGcmFtZXdvcmtEZWJ1ZygpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRnJhbWV3b3JrRGVidWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgaXNFZmZlY3RPbk11dGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0VmZmVjdE9uTXV0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGlzTXVzaWNPbk11dGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc011c2ljT25NdXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGJhY2tIb21lVVJMKCk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWNrSG9tZVVSTDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBjb2Nvc0RlYnVnU2V0dGluZygpOiBjYy5kZWJ1Zy5EZWJ1Z01vZGUge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29jb3NEZWJ1Z1NldHRpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgQUJTIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiAo5oq96LGh6aGeKei8ieWFpeWklumDqOiFs+acrFxyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFMb2FkU2NyaXB0VHlwZSB7XHJcblxyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgc2NyaXB0TmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgdHlwZTogc3RyaW5nO1xyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgdXJsOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHByb3RlY3RlZCBwYXJhbWV0ZXI6IHN0cmluZztcclxuICAgICAgICAgICAgcHJvdGVjdGVkIHN0YXRpYyBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cclxuICAgICAgICAgICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHNjcmlwdE5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCB1cmw6IHN0cmluZyxwYXJhbWV0ZXI6c3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdE5hbWUgPSBzY3JpcHROYW1lXHJcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHVybFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXIgPSBwYXJhbWV0ZXJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWJzdHJhY3QgbG9hZFNjcmlwdCgpOiB2b2lkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vQ29uZmlnL1Nsb3RDb25maWdNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9JTG9hZC9BTG9hZFNjcmlwdFR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDliqDovInlpJbpg6hjc3Pos4fmupBcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIENTU0xvYWQgZXh0ZW5kcyBBQlMuQUxvYWRTY3JpcHRUeXBlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsaW5rRWxlbTogSFRNTExpbmtFbGVtZW50XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHNjcmlwdE5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCB1cmw6IHN0cmluZywgcGFyYW1ldGVyOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3VwZXIoc2NyaXB0TmFtZSwgdHlwZSwgdXJsLHBhcmFtZXRlcilcclxuICAgICAgICAgICAgdGhpcy5saW5rRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9hZFNjcmlwdCgpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IGAke1Nsb3RDb25maWdNYW5hZ2VyLmluc3RhbmNlLmV4dGVybmFsbHlMb2FkVVJMfS8ke3RoaXMudXJsfS8ke3RoaXMuc2NyaXB0TmFtZX0uY3NzJHt0aGlzLnBhcmFtZXRlcn1gO1xyXG4gICAgICAgICAgICBpZiAoTG9hZFJlc01hbmFnZXIuaW5zdGFuY2Uuc2NyaXB0UmVzLmhhcyh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGDoq4vli7/ph43opIfliqDovInlt7LmnInnmoTlpJbpg6johbPmnKwgOiAke3VybH1gKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGlua0VsZW0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcbiAgICAgICAgICAgIHRoaXMubGlua0VsZW0udHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICAgICAgdGhpcy5saW5rRWxlbS5ocmVmID0gdXJsO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmtFbGVtLm9ubG9hZCA9ICgpPT57XHJcbiAgICAgICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5zY3JpcHRSZXMuYWRkKHVybCk7XHJcbiAgICAgICAgICAgICAgICBBQlMuQUxvYWRTY3JpcHRUeXBlLmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5saW5rRWxlbSk7XHJcbiAgICAgICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5sb2FkU2NyaXB0RXZlbnRDYWxsYmFjayh0aGlzLnNjcmlwdE5hbWUsZmFsc2UpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmxpbmtFbGVtLm9uZXJyb3IgPSAoKT0+e1xyXG4gICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubG9hZFNjcmlwdEV2ZW50Q2FsbGJhY2sodGhpcy5zY3JpcHROYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBBQlMuQUxvYWRTY3JpcHRUeXBlLmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5saW5rRWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9Db25maWcvU2xvdENvbmZpZ01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRXJyb3JNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0lMb2FkL0FMb2FkU2NyaXB0VHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9Mb2FkUmVzTWFuYWdlci50c1wiIC8+XHJcblxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2NyaXB0TG9hZCBleHRlbmRzIEFCUy5BTG9hZFNjcmlwdFR5cGUge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOi8ieWFpeWklumDqCBqcyDohbPmnKxcclxuICAgICAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbGlua0VsZW06IEhUTUxTY3JpcHRFbGVtZW50XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHNjcmlwdE5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCB1cmw6IHN0cmluZywgcGFyYW1ldGVyOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3VwZXIoc2NyaXB0TmFtZSwgdHlwZSwgdXJsLCBwYXJhbWV0ZXIpXHJcbiAgICAgICAgICAgIHRoaXMubGlua0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvYWRTY3JpcHQoKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSBgJHtTbG90Q29uZmlnTWFuYWdlci5pbnN0YW5jZS5leHRlcm5hbGx5TG9hZFVSTH0vJHt0aGlzLnVybH0vJHt0aGlzLnNjcmlwdE5hbWV9LmpzJHt0aGlzLnBhcmFtZXRlcn1gO1xyXG4gICAgICAgICAgICBpZiAoTG9hZFJlc01hbmFnZXIuaW5zdGFuY2Uuc2NyaXB0UmVzLmhhcyh1cmwpKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGDoq4vli7/ph43opIfliqDovInlt7LmnInnmoTlpJbpg6johbPmnKwgOiAke3VybH1gKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGlua0VsZW0udHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICAgICAgdGhpcy5saW5rRWxlbS5zcmMgPSB1cmw7XHJcbiAgICAgICAgICAgIHRoaXMubGlua0VsZW0ub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2Uuc2NyaXB0UmVzLmFkZCh1cmwpO1xyXG4gICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubG9hZFNjcmlwdEV2ZW50Q2FsbGJhY2sodGhpcy5zY3JpcHROYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMubGlua0VsZW0ub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLmxvYWRTY3JpcHRFdmVudENhbGxiYWNrKHRoaXMuc2NyaXB0TmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQUJTLkFMb2FkU2NyaXB0VHlwZS5oZWFkLmFwcGVuZENoaWxkKHRoaXMubGlua0VsZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRXJyb3JNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0dsb2JhbC9VdGlsLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBBQlMge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uICjmir3osaHpoZ4p6LyJ5YWl5ZCE6aGeY29jb3Pos4fmupBcclxuICAgICAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBTG9hZFR5cGUgaW1wbGVtZW50cyBJRi5JTG9hZFR5cGUge1xyXG5cclxuICAgICAgICAgICAgcHJvdGVjdGVkIHR5cGU6IGFueTtcclxuICAgICAgICAgICAgcHJvdGVjdGVkIHVybDogc3RyaW5nO1xyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgZGF0YU5hbWU6IHN0cmluZztcclxuICAgICAgICAgICAgcHJvdGVjdGVkIGZvbGRlcjogc3RyaW5nXHJcbiAgICAgICAgICAgIHByaXZhdGUgYmVmb3JlUHJvZ3Jlc3M6IG51bWJlcjtcclxuICAgICAgICAgICAgcHJpdmF0ZSBhc3NldEJ1bmRsZTogY2MuQXNzZXRNYW5hZ2VyLkJ1bmRsZVxyXG5cclxuICAgICAgICAgICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGRhdGFOYW1lOiBzdHJpbmcsIHR5cGU6IGNjLkFzc2V0LCB1cmw6IHN0cmluZywgZm9sZGVyOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7ICAgICAgICAgICAgICAgLy/nlbbliY3opoHnjbLlj5bnmoTos4fmupDpoZ7lnotcclxuICAgICAgICAgICAgICAgIHRoaXMudXJsID0gdXJsOyAgICAgICAgICAgICAgICAgLy/njbLlj5bnmoTlnLDlnYBcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YU5hbWUgPSBkYXRhTmFtZTsgICAgICAgLy/opoHmi7/lj5bos4fmupDnmoRrZXlcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9sZGVyID0gZm9sZGVyICAgICAgICAgICAgLy/niLbos4fmlpnlpL7lkI3nqLEs6buY6KqNIHJlc291cmNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZWZvcmVQcm9ncmVzcyA9IDA7ICAgICAgICAvL+eVtuWJjeS4iuasoeeahOi8ieWFpemAsuW6plxyXG4gICAgICAgICAgICAgICAgdGhpcy5hc3NldEJ1bmRsZSA9IGNjLmFzc2V0TWFuYWdlci5nZXRCdW5kbGUodGhpcy5mb2xkZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Yqg6LyJ6LOH5rqQ5pa55rOVXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgbG9hZFJlc291cmNlcygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgIT09IGNjLlNjZW5lQXNzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2V0QnVuZGxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5sb2FkRGlyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRSZXNQcm9ncmVzcy5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkUmVzQ2FsbEJhY2suYmluZCh0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL+i8ieWFpXNjZW5l6LOH5rqQLOWmguaenOWQjeeosemMr+iqpOacg3NjZW5l5ZCN56ix6Yyv6Kqk5pyD54Sh5rOV5ou/5Y+W6LOH5rqQXHJcbiAgICAgICAgICAgICAgICAgICAgLy/ovInlhaVzY2VuZeizh+a6kCznhKHpoIhVUkzlnLDlnYAs5L2G5pivMi40LljpnIDopoHmlL7lnKhSZXNvdXJjZeW6leS4i1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRCdW5kbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRTY2VuZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5TY2VuZUFzc2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkUmVzUHJvZ3Jlc3MuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZFJlc0NhbGxCYWNrLmJpbmQodGhpcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWbnuWCs+ipsuWKoOi8ieeahOizh+a6kFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvciAtIOmMr+iqpOioiuaBr1xyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1tdIHwgY2MuU2NlbmVBc3NldH0gYXNzZXRzIC0g6LOH5rqQXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIGxvYWRSZXNDYWxsQmFjayhlcnJvcjogRXJyb3IsIGFzc2V0czogW10gfCBjYy5TY2VuZUFzc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShhc3NldHMgaW5zdGFuY2VvZiBjYy5TY2VuZUFzc2V0KSAmJiBhc3NldHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGDnhKHovInlhaXku7vkvZXos4fmupAgJHt0aGlzLnVybH0gYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJlc1RvTWFuYWdlcih0aGlzLmRhdGFOYW1lLCBhc3NldHMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Zue5YKz55W25YmN6LyJ5YWl6YCy5bqmXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb21wbGV0ZSAtIOS7pei8ieWFpeWujOeVoueahOaVuOmHj1xyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gVG90YWxBbW91bnQgLSDnuL3mlbjph49cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHByaXZhdGUgbG9hZFJlc1Byb2dyZXNzKGNvbXBsZXRlOiBudW1iZXIsIFRvdGFsQW1vdW50OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIC8v542y5Y+W55m+5YiG5q+UXHJcbiAgICAgICAgICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBnbG9iYWwuVXRpbC5yb3VuZERvd24oKGNvbXBsZXRlIC8gVG90YWxBbW91bnQpLCAyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPiB0aGlzLmJlZm9yZVByb2dyZXNzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8v5LiN5b6e6YCZ6KOh5Yik5pa354uA5oWLLOebrueahOino+axuueVsOatpeaTjeS9nFxyXG4gICAgICAgICAgICAgICAgICAgIC8v55W26LOH5rqQ6YO96LyJ5YWl5YiwTG9hZE1hbmFnZXLmmYLmiY3lm57lgrPku6XovInlhaXlrozmiJDnmoTni4DmhYtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IDAuOTlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy/lm57lgrPkuIrmrKHoiIfpgJnmrKHkuYvplpPlop7liqDkuoblpJrlsJHpgLLluqZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1hbmFnZXJTdGF0ZSh0aGlzLmRhdGFOYW1lLCBwcm9ncmVzcywgKHByb2dyZXNzIC0gdGhpcy5iZWZvcmVQcm9ncmVzcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlUHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOi8ieWFpeWujOaIkOW+jOWbnuiqv1xyXG4gICAgICAgICAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlUHJvZ3Jlc3NFbmQoKSB7XHJcbiAgICAgICAgICAgICAgICAvL+ebrueahOino+axuueVsOatpeaTjeS9nFxyXG4gICAgICAgICAgICAgICAgLy/nlbbos4fmupDpg73ovInlhaXliLBMb2FkTWFuYWdlcuaZguaJjeWbnuWCs+S7pei8ieWFpeWujOaIkOeahOeLgOaFi1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9sZGVyID09PSBcInJlc291cmNlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UuaW5pdGlhbExvYWRTdGF0ZS5zZXQodGhpcy5kYXRhTmFtZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubG9hZE1haW5FdmVudENhbGxiYWNrKHRoaXMuZGF0YU5hbWUsIDAuMDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5zZWNvbmRhcnlMb2FkU3RhdGUuc2V0KHRoaXMuZGF0YU5hbWUsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLmxvYWRTZWNvbmRhcnlFdmVudENhbGxiYWNrKHRoaXMuZGF0YU5hbWUsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250aW51ZUxvYWQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOe5vOe6jOWKoOi8iVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBjb250aW51ZUxvYWQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZighTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UuY3VycmVudExvYWRPcmRlci5sZW5ndGgpcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UuY3VycmVudExvYWRPcmRlci5zaGlmdCgpOyAgIC8v5riF6Zmk6LyJ5YWl5a6M5oiQ55qERGF0YVxyXG4gICAgICAgICAgICAgICAgaWYgKExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLmN1cnJlbnRMb2FkT3JkZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzc2V0RGF0YSA9IExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLmN1cnJlbnRMb2FkT3JkZXJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUxvYWQoYXNzZXREYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOabtOaWsOeVtuWJjemAsuW6plxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0g6Kmy6LOH5rqQ5ZCN56ixXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0ZSAtIOeVtuWJjemAsuW6plxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBkYXRlIC0g5pu05LiK5qyh6YCy5bqm5q+U6LW3LOaWsOWinuS6huWkmuWwkemAsuW6plxyXG4gICAgICAgICAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlTWFuYWdlclN0YXRlKGtleTogc3RyaW5nLCBzdGF0ZTogbnVtYmVyLCB1cGRhdGU6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9sZGVyID09PSBcInJlc291cmNlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UuaW5pdGlhbExvYWRTdGF0ZS5zZXQoa2V5LCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubG9hZE1haW5FdmVudENhbGxiYWNrKGtleSwgdXBkYXRlLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLnNlY29uZGFyeUxvYWRTdGF0ZS5zZXQoa2V5LCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubG9hZFNlY29uZGFyeUV2ZW50Q2FsbGJhY2soa2V5LCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlsIfos4fmupDkv53lrZjlnKjnrqHnkIblmajkuK1cclxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFOYW1lIC0g6Ieq6KiC576p6Kmy6LOH5rqQ5ZCN56ixXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBhc3NldCAtIOizh+a6kFxyXG4gICAgICAgICAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0UmVzVG9NYW5hZ2VyKGRhdGFOYW1lOiBzdHJpbmcsIGFzc2V0OiBhbnkpOiB2b2lkO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9JTG9hZC9BTG9hZFR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDovInlhaXlnJbniYfos4fmupBcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEltZ0xvYWQgZXh0ZW5kcyBBQlMuQUxvYWRUeXBlIHtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoZGF0YU5hbWU6IHN0cmluZywgdHlwZTogYW55LCB1cmw6IHN0cmluZywgZm9sZGVyOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3VwZXIoZGF0YU5hbWUsIHR5cGUsIHVybCwgZm9sZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWwh+izh+a6kOS/neWtmOWcqOeuoeeQhuWZqOS4rVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhTmFtZSAtIOiHquiogue+qeipsuizh+a6kOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuU3ByaXRlQXRsYXN9IGFzc2V0IC0g6LOH5rqQXHJcbiAgICAgICAgICogQHByb3RlY3RlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJlc1RvTWFuYWdlcihkYXRhTmFtZTogc3RyaW5nLCBhc3NldDogY2MuU3ByaXRlRnJhbWVbXSk6IHZvaWQge1xyXG4gICAgICAgICAgICBsZXQgc3ByaXRlTWFwOiBNYXA8c3RyaW5nLCBjYy5TcHJpdGVGcmFtZT4gPSBuZXcgTWFwPHN0cmluZywgY2MuU3ByaXRlRnJhbWU+KCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHNwcml0ZUZyYW1lIG9mIGFzc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBzcHJpdGVNYXAuc2V0KHNwcml0ZUZyYW1lLm5hbWUsIHNwcml0ZUZyYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5pbWdSZXMuc2V0KGRhdGFOYW1lLCBzcHJpdGVNYXApO1xyXG4gICAgICAgICAgICAvL+ebrueahOino+axuueVsOatpeaTjeS9nFxyXG4gICAgICAgICAgICAvL+eVtuizh+a6kOmDvei8ieWFpeWIsExvYWRNYW5hZ2Vy5pmC5omN5Zue5YKz5Lul6LyJ5YWl5a6M5oiQ55qE54uA5oWLXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3NFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9JTG9hZC9BTG9hZFR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDovInlhaXpn7PmqILos4fmupBcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIE11c2ljTG9hZCBleHRlbmRzIEFCUy5BTG9hZFR5cGUge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihkYXRhTmFtZTogc3RyaW5nLCB0eXBlOiBhbnksIHVybDogc3RyaW5nLCBmb2xkZXI6IHN0cmluZykge1xyXG4gICAgICAgICAgICBzdXBlcihkYXRhTmFtZSwgdHlwZSwgdXJsLCBmb2xkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5bCH6LOH5rqQ5L+d5a2Y5Zyo566h55CG5Zmo5LitXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFOYW1lIC0g6Ieq6KiC576p6Kmy6LOH5rqQ5ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHtjYy5BdWRpb0NsaXB9IGFzc2V0IC0g6LOH5rqQXHJcbiAgICAgICAgICogQHByb3RlY3RlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJlc1RvTWFuYWdlcihkYXRhTmFtZTogc3RyaW5nLCBhc3NldDogQXJyYXk8Y2MuQXVkaW9DbGlwPikge1xyXG4gICAgICAgICAgICAvL+aLv+WPlumfs+aoguaqlOWQjSznlbbkvZzpjbXlgLxcclxuICAgICAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgYXNzZXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBrZXk6IHN0cmluZyA9IHZhbHVlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubXVzaWNSZXMuaGFzKGtleSkpXHJcbiAgICAgICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5MT0FEX0ZXLCBgJHtrZXl9IOmNteWAvOmHjeikhyzoq4vmqqLmn6XoqbLpn7PmqILos4fmupDmmK/lkKblt7LliqDovInpgY5gKVxyXG4gICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubXVzaWNSZXMuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8v55uu55qE6Kej5rG655Ww5q2l5pON5L2cXHJcbiAgICAgICAgICAgIC8v55W26LOH5rqQ6YO96LyJ5YWl5YiwTG9hZE1hbmFnZXLmmYLmiY3lm57lgrPku6XovInlhaXlrozmiJDnmoTni4DmhYtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9ncmVzc0VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vSUxvYWQvQUxvYWRUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0xvYWRSZXNNYW5hZ2VyLnRzXCIgLz5cclxuXHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOi8ieWFpeWclueJh+izh+a6kFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgUHJlZmFiTG9hZCBleHRlbmRzIEFCUy5BTG9hZFR5cGUge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihkYXRhTmFtZTogc3RyaW5nLCB0eXBlOiBhbnksIHVybDogc3RyaW5nLCBmb2xkZXI6IHN0cmluZykge1xyXG4gICAgICAgICAgICBzdXBlcihkYXRhTmFtZSwgdHlwZSwgdXJsLCBmb2xkZXIpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWwh+izh+a6kOS/neWtmOWcqOeuoeeQhuWZqOS4rVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhTmFtZSAtIOiHquiogue+qeipsuizh+a6kOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuQXVkaW9DbGlwfSBhc3NldCAtIOizh+a6kFxyXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRSZXNUb01hbmFnZXIoZGF0YU5hbWU6IHN0cmluZywgYXNzZXQ6IEFycmF5PGNjLlByZWZhYj4pIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHByZWZhYiBvZiBhc3NldCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5wcmVmYWJSZXMuaGFzKHByZWZhYi5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuTE9BRF9GVywgYCR7cHJlZmFiLm5hbWV9IHByZWZhYuWQjeeosemHjeikhyzoq4vmqqLmn6XmmK/lkKbmnInnm7jlkIzlkI3nqLFwcmVmYWJgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UucHJlZmFiUmVzLnNldChwcmVmYWIubmFtZSwgcHJlZmFiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy/nm67nmoTop6PmsbrnlbDmraXmk43kvZxcclxuICAgICAgICAgICAgLy/nlbbos4fmupDpg73ovInlhaXliLBMb2FkTWFuYWdlcuaZguaJjeWbnuWCs+S7pei8ieWFpeWujOaIkOeahOeLgOaFi1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2dyZXNzRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9JTG9hZC9BTG9hZFR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6LyJ5YWl5aC05pmv6LOH5rqQXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCAgY2xhc3MgU2NlbmVMb2FkIGV4dGVuZHMgQUJTLkFMb2FkVHlwZSB7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGRhdGFOYW1lOiBzdHJpbmcsIHR5cGU6IGFueSwgdXJsOiBzdHJpbmcsIGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGRhdGFOYW1lLCB0eXBlLCB1cmwsIGZvbGRlcilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWwh+izh+a6kOS/neWtmOWcqOeuoeeQhuWZqOS4rVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhTmFtZSAtIOiHquiogue+qeipsuizh+a6kOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuQXVkaW9DbGlwfSBhc3NldCAtIOizh+a6kFxyXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRSZXNUb01hbmFnZXIoZGF0YU5hbWU6IHN0cmluZywgYXNzZXQ6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLnNjcmlwdFJlcy5oYXMoZGF0YU5hbWUpKVxyXG4gICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5MT0FEX0ZXLCBgJHtkYXRhTmFtZX0g6Y215YC86YeN6KSHLOiri+aqouafpeipsuizh+a6kOaYr+WQpuW3suWKoOi8iemBjmApXHJcblxyXG4gICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5zY2VuZVJlcy5zZXQoZGF0YU5hbWUsIGFzc2V0KTtcclxuXHJcbiAgICAgICAgICAgIC8v55uu55qE6Kej5rG655Ww5q2l5pON5L2cXHJcbiAgICAgICAgICAgIC8v55W26LOH5rqQ6YO96LyJ5YWl5YiwTG9hZE1hbmFnZXLmmYLmiY3lm57lgrPku6XovInlhaXlrozmiJDnmoTni4DmhYtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9ncmVzc0VuZCgpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRXJyb3JNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0lMb2FkL0FMb2FkVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9Mb2FkUmVzTWFuYWdlci50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOi8ieWFpemqqOmqvOWKqOeUu+izh+a6kFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgU3BpbmVMb2FkIGV4dGVuZHMgQUJTLkFMb2FkVHlwZSB7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGRhdGFOYW1lOiBzdHJpbmcsIHR5cGU6IGFueSwgdXJsOiBzdHJpbmcsIGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGRhdGFOYW1lLCB0eXBlLCB1cmwsIGZvbGRlcik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5bCH6LOH5rqQ5L+d5a2Y5Zyo566h55CG5Zmo5LitXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFOYW1lIC0g6Ieq6KiC576p6Kmy6LOH5rqQ5ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHtjYy5Ta2VsZXRvbkRhdGF9IGFzc2V0IC0g6LOH5rqQXHJcbiAgICAgICAgICogQHByb3RlY3RlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJlc1RvTWFuYWdlcihkYXRhTmFtZTogc3RyaW5nLCBhc3NldDogQXJyYXk8c3AuU2tlbGV0b25EYXRhPikge1xyXG5cclxuICAgICAgICAgICAgaWYgKExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLnNwaW5lUmVzLmhhcyhkYXRhTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuTE9BRF9GVywgXCLoq4vmqqLlr5/os4fmupDmmK/lkKbku6XovInlhaXpgY4s6Y215YC86YeN6KSHXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5zcGluZVJlcy5zZXQoZGF0YU5hbWUsIGFzc2V0WzBdKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBsb3dlckNhc2UgPSBkYXRhTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBsZXQgY2hlY2tHcmlkID0gbG93ZXJDYXNlLm1hdGNoKFwiZ3JpZFwiKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc3BpbmUgb2YgYXNzZXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3BpbmVOYW1lczogQXJyYXk8c3RyaW5nPiA9IE9iamVjdC5rZXlzKHNwaW5lLnNrZWxldG9uSnNvbi5hbmltYXRpb25zKTtcclxuICAgICAgICAgICAgICAgIGxldCBzcGluZVRvTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuICAgICAgICAgICAgICAgIC8v5Y+W5Ye6c3BpbmXli5XnlavlkI3nqLFcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNwaW5lTmFtZSBvZiBzcGluZU5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy/mqqLmn6XmmK/lkKbmnIlncmlk6Zec6Y215a2XLOWwh+aKiuWPlnNwaW5lTmFtZSDnmoRrZXkg5pu05o+b54K65pW45a2XXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrR3JpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3BpbmVOYW1lVG9OdW1iZXIgPSBzcGluZU5hbWUucmVwbGFjZSgvW14wLTldL2lnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c5YuV55Wr5YWn5YyF5ZCr5LiN5ZCr5pW45a2X55qE55qE5YuV55Wr5ZCNLOWwh+ebtOaOpeWwh+WLleeVq+WQjeaVtOWAi+S/neWtmOaIkGtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BpbmVOYW1lVG9OdW1iZXIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5lVG9NYXAuc2V0KHNwaW5lTmFtZSwgc3BpbmVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGluZVRvTWFwLmhhcyhzcGluZU5hbWVUb051bWJlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGAke3NwaW5lTmFtZX0gc3BpbmXli5Xnlavlj5ZudW1iZXLmnInoqqQs6KuL5qqi5p+l6Kmyc3BpbmUgQW5pbWF0aW9u5piv5ZCm5pyJ6YeN6KSH5pW45a2X5oOF5rOBYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGluZVRvTWFwLnNldChzcGluZU5hbWVUb051bWJlciwgc3BpbmVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5lVG9NYXAuc2V0KHNwaW5lTmFtZSwgc3BpbmVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL1RPRE865bCa5pyq5oOz5Yiw6KaB5oqKZ3JpZOWLleaPm+izh+a6kOaUvuWcqOWTqlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL+ebrueahOino+axuueVsOatpeaTjeS9nFxyXG4gICAgICAgICAgICAvL+eVtuizh+a6kOmDvei8ieWFpeWIsExvYWRNYW5hZ2Vy5pmC5omN5Zue5YKz5Lul6LyJ5YWl5a6M5oiQ55qE54uA5oWLXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3NFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0lMb2FkL0FMb2FkVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9Mb2FkUmVzTWFuYWdlci50c1wiIC8+XHJcblxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDovInlhaXmlofmnKzos4fmupAs55uu5YmN5Y+q6IO96LyJ5YWlLkNTViDmqpTmoYhcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFRleHRMb2FkIGV4dGVuZHMgQUJTLkFMb2FkVHlwZSB7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGRhdGFOYW1lOiBzdHJpbmcsIHR5cGU6IGFueSwgdXJsOiBzdHJpbmcsIGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGRhdGFOYW1lLCB0eXBlLCB1cmwsIGZvbGRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAg55uu5YmN5Y+q6IO95YKz5YWlIC5DU1Yg5qqU5qGILOebruWJjeeEoeW+nuWIpOaWt+ipsuaqlOahiOWJr+aqlOWQjVxyXG4gICAgICAgICAqICDlm6DmraTpnIDoh6rooYzmqqLmn6Xlm57lgrPos4fmlpnmmK/lkKbmraPnorpcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YU5hbWUgLSDoh6roqILnvqnoqbLos4fmupDlkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0ge2NjLlNrZWxldG9uRGF0YX0gYXNzZXQgLSDos4fmupBcclxuICAgICAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0UmVzVG9NYW5hZ2VyKGRhdGFOYW1lOiBzdHJpbmcsIGFzc2V0OiBjYy5UZXh0QXNzZXQpIHtcclxuXHJcbiAgICAgICAgICAgIC8v5riF6Zmk5Zue6LuKXHJcbiAgICAgICAgICAgIGxldCB0ZXh0QXJyYXk6IEFycmF5PHN0cmluZz4gPSBhc3NldFswXVtcInRleHRcIl0uc3BsaXQoL1tcXHNcXG5dLyk7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0TWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRleHRzIG9mIHRleHRBcnJheSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8v5YiH5YmyIENTVueJueacieeahCAsXHJcbiAgICAgICAgICAgICAgICBsZXQgYXJyYXk6IEFycmF5PHN0cmluZz4gPSB0ZXh0cy5zcGxpdCgnLCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8v5L2g5Y+v5Lul5Zyo56ys5LiJ5qC85pS+5YWl6Ki76KejLOaIkeWPquaKk+WJjeWFqeagvOizh+aWmVxyXG4gICAgICAgICAgICAgICAgbGV0IGtleSA9IGFycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8v5riF6Zmk5omA5pyJ5YyF5ZCr55qEIFwiXCIgJycg562J54m55q6K56ym6JmfXHJcbiAgICAgICAgICAgICAgICBsZXQgcHJvY2Vzc2luZ3ZhbHVlID0gdmFsdWUucmVwbGFjZSgvWydcIl0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgdGV4dE1hcC5zZXQoa2V5LCBwcm9jZXNzaW5ndmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5yZWFkRmlsZVJlcy5zZXQoZGF0YU5hbWUsIHRleHRNYXApO1xyXG5cclxuICAgICAgICAgICAgLy/nm67nmoTop6PmsbrnlbDmraXmk43kvZxcclxuICAgICAgICAgICAgLy/nlbbos4fmupDpg73ovInlhaXliLBMb2FkTWFuYWdlcuaZguaJjeWbnuWCs+S7pei8ieWFpeWujOaIkOeahOeLgOaFi1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2dyZXNzRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0VudW0vTG9hZFR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Mb2FkU2NyaXB0VHlwZS9DU1NMb2FkLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTG9hZFNjcmlwdFR5cGUvU2NyaXB0TG9hZC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0xvYWRUeXBlL0ltZ0xvYWQudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Mb2FkVHlwZS9NdXNpY0xvYWQudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Mb2FkVHlwZS9QcmVmYWJMb2FkLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTG9hZFR5cGUvU2NlbmVMb2FkLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTG9hZFR5cGUvU3BpbmVMb2FkLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTG9hZFR5cGUvVGV4dExvYWQudHNcIiAvPlxyXG5cclxuXHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOi8ieWFpeWQhOmhnuizh+a6kOW3peW7oFxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgTG9hZFR5cGVGYWN0b3J5IGltcGxlbWVudHMgSUYuSUxvYWRGYWN0b3J5IHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBhc3NldEJ1bmRsZXM6IE1hcDxzdHJpbmcsIGNjLkFzc2V0TWFuYWdlci5CdW5kbGU+O1xyXG4gICAgICAgIHByaXZhdGUgY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBsb2FkUmVzTWFuYWdlcjogSUYuSUxvYWRSZXNNYW5hZ2VyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihsb2FkUmVzTWFuYWdlcjogSUYuSUxvYWRSZXNNYW5hZ2VyLCBjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ01hbmFnZXIgPSBjb25maWdNYW5hZ2VyO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRSZXNNYW5hZ2VyID0gbG9hZFJlc01hbmFnZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXRCdW5kbGVzID0gbmV3IE1hcDxzdHJpbmcsIGNjLkFzc2V0TWFuYWdlci5CdW5kbGU+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDovInlhaXlpJbpg6hCdW5kbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2FkT3V0U2lkZUJ1bmRsZShvdXRTaWRlRGF0YTogSUYuSU91dFNpZGVEYXRhKSB7XHJcbiAgICAgICAgICAgIC8v5Yqg6LyJQnVuZGxl6LOH5rqQ5pmC6aCI5YWI5Yqg6LyJQnVuZGxl5riF5ZauXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRCdW5kbGVzLmhhcyhvdXRTaWRlRGF0YS5idW5kbGVOYW1lKSkgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogb3V0U2lkZURhdGEudmVyc2lvbixcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjYy5hc3NldE1hbmFnZXIubG9hZEJ1bmRsZShvdXRTaWRlRGF0YS5idW5kbGVVUkwsIHZlcnNpb24sIChlcnJvciwgYnVuZGxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IoZmNjLnR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2V0QnVuZGxlcy5zZXQob3V0U2lkZURhdGEuYnVuZGxlTmFtZSwgYnVuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOasoeizh+a6kOWKoOi8iVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhTmFtZSAtIOaqlOahiOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7ZmNjLnR5cGUuTG9hZFR5cGV9IHR5cGUgLSDmqpTmoYjpoZ7lnotcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0g5qqU5qGI5L2N572uXHJcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2FkSW5TaWRlQnVuZGxlKGRhdGFOYW1lOiBzdHJpbmcsIHR5cGU6IHR5cGUuTG9hZFR5cGUsIHVybDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgICAgIC8v5Yqg6LyJQnVuZGxl6LOH5rqQ5pmC6aCI5YWI5Yqg6LyJQnVuZGxl5riF5ZauXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXNzZXRCdW5kbGVzLmhhcyhcInNlY29uZGFyeVJlc1wiKSkgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIGNjLmFzc2V0TWFuYWdlci5sb2FkQnVuZGxlKFwic2Vjb25kYXJ5UmVzXCIsIChlcnJvciwgYnVuZGxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IoZmNjLnR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIGVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2V0QnVuZGxlcy5zZXQoXCJzZWNvbmRhcnlSZXNcIiwgYnVuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaqoua4rOeVtuWJjVR5cGUs5YGa5ZCE6Ieq5bCN5oeJ55qE5Yqg6LyJ5YuV5L2cXHJcbiAgICAgICAgICogQHBhcmFtIGRhdGFOYW1lIC0g6Ieq6KiC576p6LOH5rqQ5ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUgLSDos4fmupDpoZ7lnotcclxuICAgICAgICAgKiBAcGFyYW0gdXJsIC0g6LOH5rqQ5L2N572uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGV4ZWN1dGVMb2FkKGRhdGFOYW1lOiBzdHJpbmcsIHR5cGU6IHR5cGUuTG9hZFR5cGUsIHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tMb2FkVHlwZShkYXRhTmFtZSwgdHlwZSwgdXJsLCBcInJlc291cmNlc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWft+ihjEJ1bmRsZei8ieWFpeWLleS9nFxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhTmFtZSAtIOiHquiogue+qeizh+a6kOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIC0g6LOH5rqQ6aGe5Z6LXHJcbiAgICAgICAgICogQHBhcmFtIHVybCAtIOizh+a6kOS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhc3luYyBleGVjdXRlTG9hZEJ1bmRsZShkYXRhTmFtZTogc3RyaW5nLCB0eXBlOiB0eXBlLkxvYWRUeXBlLCB1cmw6IHN0cmluZykge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRJblNpZGVCdW5kbGUoZGF0YU5hbWUsIHR5cGUsIHVybCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tMb2FkVHlwZShkYXRhTmFtZSwgdHlwZSwgdXJsLCBcInNlY29uZGFyeVJlc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOi8ieWFpeWklumDqOizh+a6kFxyXG4gICAgICAgICAqIEBwYXJhbSB7ZmNjLklGLklPdXRTaWRlRGF0YX0gb3V0U2lkZURhdGFcclxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXN5bmMgZXhlY3V0ZUxvYWRPdXRTaWRlQnVuZGxlKG91dFNpZGVEYXRhOiBJRi5JT3V0U2lkZURhdGEpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkT3V0U2lkZUJ1bmRsZShvdXRTaWRlRGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tMb2FkVHlwZShvdXRTaWRlRGF0YS5uYW1lLCBvdXRTaWRlRGF0YS5sb2FkVHlwZSwgb3V0U2lkZURhdGEudXJsLCBvdXRTaWRlRGF0YS5idW5kbGVOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeiuuiqjeeVtuWJjeizh+a6kOmhnuWeiyzntabnm7jlsI3mh4ljbGFzcyDomZXnkIZcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YU5hbWUgLSDoh6roqILnvqnos4fmupDlkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0ge2ZjYy50eXBlLkxvYWRUeXBlfSB0eXBlIC0g6LOH5rqQ6aGe5Z6LXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIOizh+a6kOS9jee9rlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmb2xkZXIgLSDos4fmupDniLbpoZ7os4fmlpnlpL4s6buY6KqNIHJlc291cmNlXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGNoZWNrTG9hZFR5cGUoZGF0YU5hbWU6IHN0cmluZywgdHlwZTogdHlwZS5Mb2FkVHlwZSwgdXJsOiBzdHJpbmcsIGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBmY2MudHlwZS5Mb2FkVHlwZS5JTUc6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEltZ0xvYWQoZGF0YU5hbWUsIGNjLlNwcml0ZUZyYW1lLCB1cmwsIGZvbGRlcikubG9hZFJlc291cmNlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBmY2MudHlwZS5Mb2FkVHlwZS5JTUdfQVRMQVM6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEltZ0F0bGFzTG9hZChkYXRhTmFtZSwgY2MuU3ByaXRlQXRsYXMsIHVybCwgZm9sZGVyKS5sb2FkUmVzb3VyY2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGZjYy50eXBlLkxvYWRUeXBlLk1VU0lDOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNdXNpY0xvYWQoZGF0YU5hbWUsIGNjLkF1ZGlvQ2xpcCwgdXJsLCBmb2xkZXIpLmxvYWRSZXNvdXJjZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZmNjLnR5cGUuTG9hZFR5cGUuUFJFRkFCOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQcmVmYWJMb2FkKGRhdGFOYW1lLCBjYy5QcmVmYWIsIHVybCwgZm9sZGVyKS5sb2FkUmVzb3VyY2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGZjYy50eXBlLkxvYWRUeXBlLlNQSU5FOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTcGluZUxvYWQoZGF0YU5hbWUsIHNwLlNrZWxldG9uRGF0YSwgdXJsLCBmb2xkZXIpLmxvYWRSZXNvdXJjZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZmNjLnR5cGUuTG9hZFR5cGUuU0NFTkU6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNjZW5lTG9hZChkYXRhTmFtZSwgY2MuU2NlbmVBc3NldCwgbnVsbCwgZm9sZGVyKS5sb2FkUmVzb3VyY2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGZjYy50eXBlLkxvYWRUeXBlLlRFWFQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRleHRMb2FkKGRhdGFOYW1lLCBjYy5UZXh0QXNzZXQsIHVybCwgZm9sZGVyKS5sb2FkUmVzb3VyY2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcclxuICAgICAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKGZjYy50eXBlLkVycm9yVHlwZS5UWVBFX0ZXLCBcIuizh+a6kOmhnuWei+mMr+iqpCzlsJrnhKHmraTpoZ7lnovovInlhaXmlrnms5VcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWKoOi8ieWklumDqOiFs+acrFxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0g5qqU5qGI5ZCN56ixLOS4jeWQq+WJr+aqlOWQjVxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIC0g5qqU5qGI6aGe5Z6LXHJcbiAgICAgICAgICogQHBhcmFtIHVybCAtIOaqlOahiHVybCzkuI3lkKvlpJbpg6ggdXJsXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlciAtIGdldCDlj4PmlbhcclxuICAgICAgICAgKi9cclxuICAgICAgICBleGVjdXRlTG9hZEV4dGVybmFsU2NyaXB0KG5hbWU6IHN0cmluZywgdHlwZTogdHlwZS5Mb2FkVHlwZSwgdXJsOiBzdHJpbmcsIHBhcmFtZXRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBmY2MudHlwZS5Mb2FkVHlwZS5DU1M6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IENTU0xvYWQobmFtZSwgXCJ0ZXh0L2Nzc1wiLCB1cmwsIHBhcmFtZXRlcikubG9hZFNjcmlwdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlIGZjYy50eXBlLkxvYWRUeXBlLlNDUklQVDpcclxuICAgICAgICAgICAgICAgICAgICBuZXcgU2NyaXB0TG9hZChuYW1lLCBcInRleHQvamF2YXNjcmlwdFwiLCB1cmwsIHBhcmFtZXRlcikubG9hZFNjcmlwdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IoZmNjLnR5cGUuRXJyb3JUeXBlLlRZUEVfRlcsIFwiTG9hZFR5cGUg54Sh5rOV5YG15risXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FcnJvci9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FbnVtL0xvYWRUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vSUxvYWQvSUxvYWRGYWN0b3J5LnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vSUxvYWQvSUxvYWRSZXNNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTG9hZFR5cGVGYWN0b3J5LnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6JmV55CG5YCL5Yil6aGe5Z6L6LOH5rqQ6LyJ5YWlXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBMb2FkVHlwZUhhbmRsZXIgaW1wbGVtZW50cyBJRi5JTG9hZEZhY3Rvcnkge1xyXG5cclxuICAgICAgICBwcml2YXRlIGZhY3Rvcnk6IExvYWRUeXBlRmFjdG9yeTtcclxuICAgICAgICBwcml2YXRlIGxvYWRSZXNNYW5hZ2VyOiBJRi5JTG9hZFJlc01hbmFnZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGxvYWRSZXNNYW5hZ2VyOiBJRi5JTG9hZFJlc01hbmFnZXIsIGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFJlc01hbmFnZXIgPSBsb2FkUmVzTWFuYWdlcjtcclxuICAgICAgICAgICAgdGhpcy5mYWN0b3J5ID0gbmV3IExvYWRUeXBlRmFjdG9yeShsb2FkUmVzTWFuYWdlciwgY29uZmlnTWFuYWdlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmqqLmuKznlbbliY1UeXBlLOWBmuWQhOiHquWwjeaHieeahOWKoOi8ieWLleS9nFxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lXHJcbiAgICAgICAgICogQHBhcmFtIHR5cGVcclxuICAgICAgICAgKiBAcGFyYW0gdXJsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGV4ZWN1dGVMb2FkKG5hbWU6IHN0cmluZywgdHlwZTogdHlwZS5Mb2FkVHlwZSwgdXJsOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1JlcGVhdFRoZU5hbWUobmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFJlc01hbmFnZXIuaW5pdGlhbExvYWRTdGF0ZS5zZXQobmFtZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5leGVjdXRlTG9hZChuYW1lLCB0eXBlLCB1cmwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Z+36KGMQnVuZGxl6LyJ5YWl5YuV5L2cXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0gdHlwZVxyXG4gICAgICAgICAqIEBwYXJhbSB1cmxcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXN5bmMgZXhlY3V0ZUxvYWRCdW5kbGUobmFtZTogc3RyaW5nLCB0eXBlOiB0eXBlLkxvYWRUeXBlLCB1cmw6IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrUmVwZWF0VGhlTmFtZShuYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkUmVzTWFuYWdlci5zZWNvbmRhcnlMb2FkU3RhdGUuc2V0KG5hbWUsIG51bGwpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZhY3RvcnkuZXhlY3V0ZUxvYWRCdW5kbGUobmFtZSwgdHlwZSwgdXJsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWklumDqOWKoOi8ieizh+a6kFxyXG4gICAgICAgICAqIEBwYXJhbSB7ZmNjLklGLklPdXRTaWRlRGF0YX0gb3V0U2lkZURhdGFcclxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXN5bmMgZXhlY3V0ZUxvYWRPdXRTaWRlQnVuZGxlKG91dFNpZGVEYXRhOiBJRi5JT3V0U2lkZURhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1JlcGVhdFRoZU5hbWUob3V0U2lkZURhdGEubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFJlc01hbmFnZXIuc2Vjb25kYXJ5TG9hZFN0YXRlLnNldChvdXRTaWRlRGF0YS5uYW1lLCBudWxsKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5mYWN0b3J5LmV4ZWN1dGVMb2FkT3V0U2lkZUJ1bmRsZShvdXRTaWRlRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmqqLmn6Xph43opIflkb3lkI1cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBjaGVja1JlcGVhdFRoZU5hbWUobmFtZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5sb2FkUmVzTWFuYWdlci5pbml0aWFsTG9hZFN0YXRlLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5MT0FEX0ZXLCBgJHtuYW1lfSDmraQo5Li76LOH5rqQKeW3sui8ieWFpemBjuS6hizmiJblkI3nqLHph43opIcs6KuL5qqi5a+fYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubG9hZFJlc01hbmFnZXIuc2Vjb25kYXJ5TG9hZFN0YXRlLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5MT0FEX0ZXLCBgJHtuYW1lfSDmraQo5qyh6LOH5rqQKeW3sui8ieWFpemBjuS6hizmiJblkI3nqLHph43opIcs6KuL5qqi5a+fYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWKoOi8ieWklumDqOiFs+acrFxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0g5qqU5qGI5ZCN56ixLOS4jeWQq+WJr+aqlOWQjVxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIC0g5qqU5qGI6aGe5Z6LXHJcbiAgICAgICAgICogQHBhcmFtIHVybCAtIOaqlOahiHVybCzkuI3lkKvlpJbpg6ggdXJsXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlciAtIGdldCDlj4PmlbhcclxuICAgICAgICAgKi9cclxuICAgICAgICBleGVjdXRlTG9hZEV4dGVybmFsU2NyaXB0KG5hbWU6IHN0cmluZywgdHlwZTogdHlwZS5Mb2FkVHlwZSwgdXJsOiBzdHJpbmcsIHBhcmFtZXRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5leGVjdXRlTG9hZEV4dGVybmFsU2NyaXB0KG5hbWUsIHR5cGUsIHVybCwgcGFyYW1ldGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9HbG9iYWwvVXRpbC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0VudW0vTG9hZFR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FbnVtL0FTU0VUX01PREUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9JTG9hZC9JTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Mb2FkVHlwZUhhbmRsZXIudHNcIiAvPlxyXG5cclxuXHJcbm5hbWVzcGFjZSBmY2Mge1xyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBJRiB7XHJcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBJQXNzZXREYXRhIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOizh+a6kOiHquiogue+qeWQjeeosVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgbmFtZTogc3RyaW5nLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOizh+a6kOmhnuWei1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgbG9hZFR5cGU6IGZjYy50eXBlLkxvYWRUeXBlLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOizh+a6kOS9jee9rlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdXJsOiBzdHJpbmcsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog55W25YmN5piv5ZCm54K65aSW6YOo6LOH5rqQXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBhc3NldE1vZGU6IHR5cGUuQVNTRVRfTU9ERSxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDos4fmupDnrqHnkIbogIUgOiDliqDovInos4fmupAs5L+d5a2Y6LOH5rqQLOaIluWPlueVtuWJjeWKoOi8iemAsuW6plxyXG4gICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgTG9hZFJlc01hbmFnZXIgaW1wbGVtZW50cyBJRi5JTG9hZFJlc01hbmFnZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyO1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IElGLklMb2FkUmVzTWFuYWdlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Yid5aeL5Yqg6LyJ54mp5Lu26YCy5bqmXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfaW5pdGlhbExvYWRTdGF0ZTogTWFwPHN0cmluZywgbnVtYmVyPjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmrKHliqDovIks5Y+v5Lul5Zyo6YKE5pyq5Yqg6LyJ5a6M5oiQ5pmCLOS5n+iDvemAsuWFpU1haW5HYW1lIFNjZW5lXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfc2Vjb25kYXJ5TG9hZFN0YXRlOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpJbpg6jos4fmlpnliqDovInos4fmupDni4DmhYtcclxuICAgICAgICAgKiBAdHlwZSB7TWFwPHN0cmluZywgbnVtYmVyPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3NjcmlwdExvYWRTdGF0ZTogTWFwPHN0cmluZywgbnVtYmVyPjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogaW1n54mp5Lu25L+d5a2YXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfaW1nUmVzOiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBjYy5TcHJpdGVGcmFtZT4+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNwaW5lIOeJqeS7tuS/neWtmFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX3NwaW5lUmVzOiBNYXA8c3RyaW5nLCBzcC5Ta2VsZXRvbkRhdGE+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiugOWPluW+jOeahOaWh+S7tuaqlOahiCzkv53lrZjkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9yZWFkRmlsZVJlczogTWFwPHN0cmluZywgTWFwPHN0cmluZywgc3RyaW5nPj47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6K6A5Y+W5b6M55qEUHJlZmFiLOS/neWtmOS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX3ByZWZhYlJlczogTWFwPHN0cmluZywgY2MuUHJlZmFiPjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDpn7PmqILkv53lrZjkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9tdXNpY1JlczogTWFwPHN0cmluZywgY2MuQXVkaW9DbGlwPjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpJbpg6johbPmnKzkv53lrZhVUkzlnLDlnYAs5Zau5a2Y5Yik5pa35piv5ZCm6YeN6KSH5Yqg6LyJXHJcbiAgICAgICAgICogQHR5cGUge1NldDxzdHJpbmc+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX3NjcmlwdFJlczogU2V0PHN0cmluZz47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWgtOaZr+S/neWtmOS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX3NjZW5lUmVzOiBNYXA8c3RyaW5nLCBjYy5TY2VuZUFzc2V0PlxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDovInlhaXpoIbluo9cclxuICAgICAgICAgKi9cclxuICAgICAgICBjdXJyZW50TG9hZE9yZGVyOiBBcnJheTxJRi5JQXNzZXREYXRhIHwgSUYuSU91dFNpZGVEYXRhPlxyXG5cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWRUeXBlSGFuZGxlcjogTG9hZFR5cGVIYW5kbGVyO1xyXG4gICAgICAgIHByaXZhdGUgY2FsbEZ1bjogTWFwPHN0cmluZywgKHByb2dyZXNzOiBudW1iZXIsIGlzRXJyb3I/OiBib29sZWFuKSA9PiB2b2lkPjtcclxuICAgICAgICBwcml2YXRlIGNvdW50OiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBhbGxQcm9ncmVzczogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgYmVmb3JlUHJvZ3Jlc3M6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIGFsbFByb2dyZXNzRW5kQ291bnQ6IG51bWJlcjtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihjb25maWdNYW5hZ2VyOiBJRi5JQ29uZmlnTWFuYWdlcikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ01hbmFnZXIgPSBjb25maWdNYW5hZ2VyO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRUeXBlSGFuZGxlciA9IG5ldyBMb2FkVHlwZUhhbmRsZXIodGhpcywgY29uZmlnTWFuYWdlcik7ICAgICAgIC8v6YWN55m86KaB55So5ZOq5YCLY2xhc3Pln7fooYzovInlhaXli5XkvZxcclxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbExvYWRTdGF0ZSA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/kuLvliqDovInni4DmhYtcclxuICAgICAgICAgICAgdGhpcy5fc2Vjb25kYXJ5TG9hZFN0YXRlID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mrKHliqDovInni4DmhYtcclxuICAgICAgICAgICAgdGhpcy5fc2NyaXB0TG9hZFN0YXRlID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5aSW5qyh6LOH5rqQ5Yqg6LyJXHJcbiAgICAgICAgICAgIHRoaXMuX2ltZ1JlcyA9IG5ldyBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBjYy5TcHJpdGVGcmFtZT4+KCk7ICAgICAgICAgICAgICAgICAgICAgIC8v5ZyW54mHXHJcbiAgICAgICAgICAgIHRoaXMuX3NwaW5lUmVzID0gbmV3IE1hcDxzdHJpbmcsIHNwLlNrZWxldG9uRGF0YT4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6aqo5p62XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYWRGaWxlUmVzID0gbmV3IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIHN0cmluZz4+KCk7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGV4dOaWh+S7tlxyXG4gICAgICAgICAgICB0aGlzLl9wcmVmYWJSZXMgPSBuZXcgTWFwPHN0cmluZywgY2MuUHJlZmFiPigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+mgkOi8iemrlFxyXG4gICAgICAgICAgICB0aGlzLmNhbGxGdW4gPSBuZXcgTWFwPHN0cmluZywgKHByb2dyZXNzOiBudW1iZXIsIGlzRXJyb3I/OiBib29sZWFuKSA9PiB2b2lkPigpOyAgICAgICAgICAgICAgICAgICAgICAgLy9jYWxsYmFja+aWueazlVxyXG4gICAgICAgICAgICB0aGlzLl9tdXNpY1JlcyA9IG5ldyBNYXA8c3RyaW5nLCBjYy5BdWRpb0NsaXA+KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+mfs+aoglxyXG4gICAgICAgICAgICB0aGlzLl9zY3JpcHRSZXMgPSBuZXcgU2V0PHN0cmluZz4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WklumDqOiFs+acrOS/neWtmFVSTOWcsOWdgCzllq7lrZjliKTmlrfmmK/lkKbph43opIfliqDovIlcclxuICAgICAgICAgICAgdGhpcy5fc2NlbmVSZXMgPSBuZXcgTWFwPHN0cmluZywgY2MuU2NlbmVBc3NldD4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/kv53lrZhzY2VuZeWgtOWgtOaZr+izh+a6kFxyXG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+imgei8ieWFpeaVuOmHj1xyXG4gICAgICAgICAgICB0aGlzLmFsbFByb2dyZXNzID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+WKoOi8iemAsuW6plxyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZVByb2dyZXNzID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+S4iuasoeWKoOi8ieeahOmAsuW6plxyXG4gICAgICAgICAgICB0aGlzLmFsbFByb2dyZXNzRW5kQ291bnQgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WboOeyvua6luW6puWVj+mhjCzpoY3lpJbliKTmlrfmmK/lkKbmiYDmnInos4fmupDpg73liqDovInlroznlaJcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9hZE9yZGVyID0gbmV3IEFycmF5PElGLklBc3NldERhdGEgfCBJRi5JT3V0U2lkZURhdGE+KCk7ICAgICAgICAgICAgICAgLy/kv53lrZjnlbbliY3ovInlhaXpoIbluo9cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAg5oe25ryi5Yqg6LyJXHJcbiAgICAgICAgICogIOWIneWni+WMlizlj6rorpPkuIDlgIvlsIjmoYjnlKLnlJ/kuIDmrKHoqbJjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc2V0SW5zdGFuY2UoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgTG9hZFJlc01hbmFnZXIoY29uZmlnTWFuYWdlcik7XHJcbiAgICAgICAgICAgICAgICBsb2FkTWdyID0gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAg542y5Y+W5bey57aT5Yid5aeL5YyW55qE6Z2c5oWL5a+m5L6LY2xhc3NcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBJRi5JTG9hZFJlc01hbmFnZXIge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkxPQURfRlcsIFwi6Kmy6aGe5bCa5pyq5a+m5L6L5YyWXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS4u+izh+a6kOWKoOi8ieeJqeS7tiznm6Pogb3mmK/lkKbmnIljYWxsYmFjayzpmqjkuYvov5Tlm57oqbLni4DmhYtcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIOWKoOi8ieeJqeS7tuWQjeeosSznlLHkvb/nlKjogIXoh6roqILnvqnliqDovInlkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0gcHJvZ3Jlc3MgLSDliqDovInpgLLluqZcclxuICAgICAgICAgKiBAcGFyYW0gc3RhdGUgLSDoqbLnianku7bliqDovInnmb7liIbmr5RcclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2FkTWFpbkV2ZW50Q2FsbGJhY2sobmFtZTogc3RyaW5nLCBwcm9ncmVzczogbnVtYmVyLCBzdGF0ZTogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9ubHlSZXNFdmVudENhbGxiYWNrKG5hbWUsIHN0YXRlKTtcclxuICAgICAgICAgICAgLy/nlbbliY3nuL3liqDovInpgLLluqZcclxuICAgICAgICAgICAgdGhpcy5hbGxQcm9ncmVzcyArPSBwcm9ncmVzcyAvIHRoaXMuY291bnQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbFByb2dyZXNzID49IDEpIHRoaXMuYWxsUHJvZ3Jlc3MgPSAwLjk5Oy8v57K+5bqm5ZWP6aGMLOS4jeWbnuWCszFcclxuXHJcbiAgICAgICAgICAgIC8v5Zug54K65rWu6bue5pW457K+5bqmLOeUsemAmeijj+mhjeWkluWIpOaWt+aJgOacieizh+a6kOW3suWKoOi8ieWujOeVouaZgizliqDovInpgLLluqbnrYnmlrwxXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFByb2dyZXNzRW5kQ291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsbFByb2dyZXNzRW5kQ291bnQgPT0gdGhpcy5jb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUHJvZ3Jlc3MgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL+eVtuWJjeaJgOacieWKoOi8ieeahOe4vemAsuW6plxyXG4gICAgICAgICAgICBpZiAodGhpcy5jYWxsRnVuLmhhcyhudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgLy/poJDpmLLlpJrlgIvph43opIfpgLLluqblm57lgrNcclxuICAgICAgICAgICAgICAgIC8v5Yik5pa36IiH5LiK5LiA5YCL6YCy5bqm5piv5LiA5qij55qE6KmxLOWwh+S4jeWft+ihjOWbnuWCsyznrYnlvoXmnInmlrDpgLLluqbov5HkvoZcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja1Byb2dyZXNzOiBib29sZWFuID1cclxuICAgICAgICAgICAgICAgICAgICAoZ2xvYmFsLlV0aWwucm91bmREb3duKHRoaXMuYmVmb3JlUHJvZ3Jlc3MsIDIpID09XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5VdGlsLnJvdW5kRG93bih0aGlzLmFsbFByb2dyZXNzLCAyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrUHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWZvcmVQcm9ncmVzcyA9IHRoaXMuYWxsUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgLy/lm57lgrPnlbbliY3pgLLluqYs5bCH57K+5bqm5bCH5L2O54K65bCP5pW46bue5b6M5YWp5L2NXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRnVuLmdldChudWxsKShnbG9iYWwuVXRpbC5yb3VuZERvd24odGhpcy5hbGxQcm9ncmVzcywgMikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsbFByb2dyZXNzID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/nlbblhajpg6jliqDovInlrozlvows5riF6Zmk55W25YmN5Yqg6LyJ5aSa5bCR5Lu25p2x6KW/55qE6KiI5pW4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+S6i+S7tue1kOadnyzmuIXpmaToqbLmmK/kv53lrZjnmoRmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxGdW4uZGVsZXRlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5qyh6LOH5rqQ5Yqg6LyJ54mp5Lu2LOebo+iBveaYr+WQpuaciWNhbGxiYWNrLOmaqOS5i+i/lOWbnuipsueLgOaFi1xyXG4gICAgICAgICAqIOazqOaEjyzoqbLni4DmhYvnhKHnuL3os4fmupDnm6Pogb3lm57lgrPkuovku7ZcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIOWKoOi8ieeJqeS7tuWQjeeosSznlLHkvb/nlKjogIXoh6roqILnvqnliqDovInlkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhdGUgLSDoqbLnianku7bliqDovInnmb7liIbmr5RcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbG9hZFNlY29uZGFyeUV2ZW50Q2FsbGJhY2sobmFtZTogc3RyaW5nLCBzdGF0ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25seVJlc0V2ZW50Q2FsbGJhY2sobmFtZSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5aSW6YOo6LOH5rqQ5Yqg6LyJ5a6M5oiQ6L+U5ZueXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDliqDovInnianku7blkI3nqLEo5qqU5ZCNKVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpc0Vycm9yIC0g5piv5ZCm5Yqg6LyJ6Yyv6KqkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGxvYWRTY3JpcHRFdmVudENhbGxiYWNrKG5hbWU6IHN0cmluZywgaXNFcnJvcjogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLm9ubHlSZXNFdmVudENhbGxiYWNrKG5hbWUsIDEsIGlzRXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Zau5LiA6LOH5rqQ6L+U5Zue5Yik5pa3LOeUqOaItuaYr+WQpuaciea3u+WKoGNhbGxiYWNr5Y+D5pW4XHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDliqDovInnianku7blkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhdGUgLSDoqbLnianku7bliqDovInnmb7liIbmr5RcclxuICAgICAgICAgKiBAcGFyYW0gaXNFcnJvciAtIOaYr+WQpuaciemMr+iqpOWbnuWCsyjlpJbpg6jliqDovInohbPmnKznlKgpXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIG9ubHlSZXNFdmVudENhbGxiYWNrKG5hbWU6IHN0cmluZywgc3RhdGU6IG51bWJlciwgaXNFcnJvcj86IGJvb2xlYW4pIHtcclxuXHJcbiAgICAgICAgICAgIC8v5aaC5p6c5pyJ57aB6KiC55qE5Zue5YKz5pa55rOV5pmCLOWwh+WbnuWCs+ipsuizh+a6kOeVtuWJjeeahOWKoOi8iemAsuW6plxyXG4gICAgICAgICAgICBpZiAodGhpcy5jYWxsRnVuLmhhcyhuYW1lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBmdW4gPSB0aGlzLmNhbGxGdW4uZ2V0KG5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy/kuovku7bntZDmnZ8s5riF6Zmk6Kmy5piv5L+d5a2Y55qEZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxGdW4uZGVsZXRlKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuKHN0YXRlLCBpc0Vycm9yKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWKoOi8ieipsuizh+aWmeWkvuW6leS4i+aJgOacieizh+a6kCDms6jmhI86IOmcgOWtmOaUvuaWvCByZXNvdXJjZXPkuK1cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIOiHquiogue+qeaLv+WPluizh+a6kOaZgueahOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7TG9hZFR5cGV9IGxvYWRUeXBlIC0g6KaB542y5Y+W55qE6LOH5rqQ6aGe5Z6LXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIOimgeeNsuWPlueahOizh+a6kOS9jee9rlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMYW5ndWFnZVVzZWQgLSDmmK/lkKbopoHkvb/nlKjoqp7ns7vkvY3nva5cclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxvYWRBc3NldChuYW1lOiBzdHJpbmcsIGxvYWRUeXBlOiB0eXBlLkxvYWRUeXBlLCB1cmw6IHN0cmluZywgaXNMYW5ndWFnZVVzZWQ/OiBib29sZWFuKTogdGhpcyB7XHJcbiAgICAgICAgICAgIHRoaXMuY291bnQgKz0gMTtcclxuICAgICAgICAgICAgaWYgKGlzTGFuZ3VhZ2VVc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB1cmwgPSBgJHt1cmx9LyR7dGhpcy5jb25maWdNYW5hZ2VyLmxhbmd1YWdlfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudExvYWRPcmRlci5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkVHlwZUhhbmRsZXIuZXhlY3V0ZUxvYWQobmFtZSwgbG9hZFR5cGUsIHVybCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9hZE9yZGVyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGxvYWRUeXBlOiBsb2FkVHlwZSxcclxuICAgICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICAgICAgYXNzZXRNb2RlOiB0eXBlLkFTU0VUX01PREUuUkVTT1VSQ0VTXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliqDovIkg6KmyIGFzc2V0QnVuZGxlIOW6leS4i+izh+a6kFxyXG4gICAgICAgICAqIOS9v+eUqOatpOaWueazleiAhSzliqDovInni4DmhYvlrZjmlL7mrKHliqDovInkuK0gc2Vjb25kYXJ5TG9hZFN0YXRlXHJcbiAgICAgICAgICog5rOo5oSPOumgiOaWvFVJ5Yu+6YG46YWN572u54K6QnVuZGxl6LOH5paZ5aS+XHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDoh6roqILnvqnmi7/lj5bos4fmupDmmYLnmoTlkI3nqLFcclxuICAgICAgICAgKiBAcGFyYW0ge0xvYWRUeXBlfSBsb2FkVHlwZSAtIOimgeeNsuWPlueahOizh+a6kOmhnuWei1xyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSDopoHnjbLlj5bnmoTos4fmupDkvY3nva5cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTGFuZ3VhZ2VVc2VkIC0g5piv5ZCm6KaB5L2/55So6Kqe57O75L2N572uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbG9hZEJ1bmRsZShuYW1lOiBzdHJpbmcsIGxvYWRUeXBlOiB0eXBlLkxvYWRUeXBlLCB1cmw6IHN0cmluZywgaXNMYW5ndWFnZVVzZWQ/OiBib29sZWFuKTogdGhpcyB7XHJcbiAgICAgICAgICAgIGlmIChpc0xhbmd1YWdlVXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdXJsID0gYCR7dXJsfS8ke3RoaXMuY29uZmlnTWFuYWdlci5sYW5ndWFnZX1gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudExvYWRPcmRlci5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkVHlwZUhhbmRsZXIuZXhlY3V0ZUxvYWRCdW5kbGUobmFtZSwgbG9hZFR5cGUsIHVybCkudGhlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExvYWRPcmRlci5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBsb2FkVHlwZTogbG9hZFR5cGUsXHJcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgICAgIGFzc2V0TW9kZTogdHlwZS5BU1NFVF9NT0RFLklOX1NJREVfQlVORExFXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOi8ieWFpemBoOeoi+WklumDqEJ1bmRsZVxyXG4gICAgICAgICAqIEBwYXJhbSB7ZmNjLklGLklPdXRTaWRlRGF0YX0gb3V0U2lkZURhdGFcclxuICAgICAgICAgKiBAcmV0dXJucyB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2FkT3V0U2lkZUFzc2V0KG91dFNpZGVEYXRhOiBJRi5JT3V0U2lkZURhdGEpIHtcclxuICAgICAgICAgICAgaWYgKG91dFNpZGVEYXRhLmlzTGFuZ3VhZ2VVc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRTaWRlRGF0YS51cmwgPSBgJHtvdXRTaWRlRGF0YS51cmx9LyR7dGhpcy5jb25maWdNYW5hZ2VyLmxhbmd1YWdlfWBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TG9hZE9yZGVyLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRUeXBlSGFuZGxlci5leGVjdXRlTG9hZE91dFNpZGVCdW5kbGUob3V0U2lkZURhdGEpLnRoZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2FkT3JkZXIucHVzaChvdXRTaWRlRGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Z+36KGM6LyJ5YWlLOS4jeWIpOaWt+i8ieWFpeizh+a6kOizh+a6kOmAsuW6plxyXG4gICAgICAgICAqIEBwYXJhbSB7ZmNjLklGLklBc3NldERhdGEgfCBJRi5JT3V0U2lkZURhdGF9IGFzc2V0RGF0YSAtIOmcgOi8ieWFpeeahOizh+a6kOizh+aWmVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4ZWN1dGVMb2FkKGFzc2V0RGF0YTogSUYuSUFzc2V0RGF0YSB8IElGLklPdXRTaWRlRGF0YSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGFzc2V0RGF0YS5hc3NldE1vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgZmNjLnR5cGUuQVNTRVRfTU9ERS5SRVNPVVJDRVM6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkVHlwZUhhbmRsZXIuZXhlY3V0ZUxvYWQoYXNzZXREYXRhLm5hbWUsIGFzc2V0RGF0YS5sb2FkVHlwZSwgYXNzZXREYXRhLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGZjYy50eXBlLkFTU0VUX01PREUuSU5fU0lERV9CVU5ETEU6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkVHlwZUhhbmRsZXIuZXhlY3V0ZUxvYWRCdW5kbGUoYXNzZXREYXRhLm5hbWUsIGFzc2V0RGF0YS5sb2FkVHlwZSwgYXNzZXREYXRhLnVybCkudGhlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBmY2MudHlwZS5BU1NFVF9NT0RFLk9VVF9TSURFX0FTU0VUOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZFR5cGVIYW5kbGVyLmV4ZWN1dGVMb2FkT3V0U2lkZUJ1bmRsZSg8SUYuSU91dFNpZGVEYXRhPmFzc2V0RGF0YSkudGhlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkv53lrZjkvb/nlKjogIXopoFjYWxsYmFja+eahOaWueazlSznlbbmnInlm57lgrPpgLLluqbmmYLlsIfpgI/pgY4gbG9hZEV2ZW50Q2FsbGJhY2vmlrnms5Xlm57lgrPpgLLluqZcclxuICAgICAgICAgKiBAcGFyYW0geyhwcm9ncmVzczogbnVtYmVyLGlzRXJyb3I/OmJvb2xlYW4pID0+IHZvaWR9IGNhbGxGdW5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzTmFtZSAtIOaqlOahiOWQjeeosVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt0aGlzfTogbWV0aG9kTmFtZSDmnKrkvb/nlKjmg4Xms4Es5Zue5YKzIHZvaWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsYmFjayhjYWxsRnVuOiAocHJvZ3Jlc3M6IG51bWJlciwgaXNFcnJvcj86IGJvb2xlYW4pID0+IHZvaWQsIHJlc05hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKHJlc05hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxGdW4uaGFzKHJlc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5MT0FEX0ZXLCBcIuWmguaenOaLv+WPluipsuizh+a6kOmAsuW6pizoq4vli7/ph43opIdjYWxsYmFja1wiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxGdW4uc2V0KHJlc05hbWUsIGNhbGxGdW4pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsRnVuLmhhcyhudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuTE9BRF9GVywgXCLlpoLmnpzmi7/lj5bnuL3pgLLluqYs6KuL5Yu/5Zyo5LmL5YmN6LOH5rqQ5bCa5pyq5Yqg6LyJ5a6M5YmNLOmHjeikh2NhbGxiYWNrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbEZ1bi5zZXQobnVsbCwgY2FsbEZ1bik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOafpeeci+ipsuizh+a6kOaYr+WQpuW3suWKoOi8ieWujOeVolxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lXHJcbiAgICAgICAgICogQHBhcmFtIGlzTWFpblJlc291cmNlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldExvYWRTdGF0ZShuYW1lOiBzdHJpbmcsIGlzTWFpblJlc291cmNlczogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzTWFpblJlc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYWxMb2FkU3RhdGUuZ2V0KG5hbWUpID09IDE7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWNvbmRhcnlMb2FkU3RhdGUuZ2V0KG5hbWUpID09IDE7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliqDovInlpJbpg6johbPmnKxcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIOaqlOahiOWQjeeosSzkuI3lkKvlia/mqpTlkI1cclxuICAgICAgICAgKiBAcGFyYW0gdHlwZSAtIOaqlOahiOmhnuWei1xyXG4gICAgICAgICAqIEBwYXJhbSB1cmwgLSDmqpTmoYhVUkws5LiN5ZCr5aSW6YOoIFVSTFxyXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbWV0ZXIgLSBHRVQg5Y+D5pW4XHJcbiAgICAgICAgICogQHJldHVybnMge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbG9hZEV4dGVybmFsU2NyaXB0KG5hbWU6IHN0cmluZywgdHlwZTogdHlwZS5Mb2FkVHlwZSwgdXJsOiBzdHJpbmcsIHBhcmFtZXRlcjogc3RyaW5nID0gXCJcIikge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRUeXBlSGFuZGxlci5leGVjdXRlTG9hZEV4dGVybmFsU2NyaXB0KG5hbWUsIHR5cGUsIHVybCwgcGFyYW1ldGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmuIXpmaTos4fmupBcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIOizh+a6kOmhnuWei1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZSh0eXBlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGZjYy50eXBlLkxvYWRUeXBlLlNQSU5FOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BpbmVSZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZmNjLnR5cGUuTG9hZFR5cGUuTVVTSUM6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXNpY1Jlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBmY2MudHlwZS5Mb2FkVHlwZS5QUkVGQUI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVmYWJSZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZmNjLnR5cGUuTG9hZFR5cGUuU0NFTkU6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZVJlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBmY2MudHlwZS5Mb2FkVHlwZS5URVhUOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZEZpbGVSZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXNldHRlci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICBzZXQgaW5pdGlhbExvYWRTdGF0ZSh2YWx1ZTogTWFwPHN0cmluZywgbnVtYmVyPikge1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsTG9hZFN0YXRlID0gdmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBzZWNvbmRhcnlMb2FkU3RhdGUodmFsdWU6IE1hcDxzdHJpbmcsIG51bWJlcj4pIHtcclxuICAgICAgICAgICAgdGhpcy5fc2Vjb25kYXJ5TG9hZFN0YXRlID0gdmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBpbWdSZXModmFsdWU6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIGNjLlNwcml0ZUZyYW1lPj4pIHtcclxuICAgICAgICAgICAgdGhpcy5faW1nUmVzID0gdmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBzcGluZVJlcyh2YWx1ZTogTWFwPHN0cmluZywgc3AuU2tlbGV0b25EYXRhPikge1xyXG4gICAgICAgICAgICB0aGlzLl9zcGluZVJlcyA9IHZhbHVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXQgcmVhZEZpbGVSZXModmFsdWU6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIHN0cmluZz4+KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYWRGaWxlUmVzID0gdmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBwcmVmYWJSZXModmFsdWU6IE1hcDxzdHJpbmcsIGNjLlByZWZhYj4pIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJlZmFiUmVzID0gdmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldCBtdXNpY1Jlcyh2YWx1ZTogTWFwPHN0cmluZywgY2MuQXVkaW9DbGlwPikge1xyXG4gICAgICAgICAgICB0aGlzLl9tdXNpY1JlcyA9IHZhbHVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXQgc2NyaXB0UmVzKHZhbHVlOiBTZXQ8c3RyaW5nPikge1xyXG4gICAgICAgICAgICB0aGlzLl9zY3JpcHRSZXMgPSB2YWx1ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0IHNjZW5lUmVzKHZhbHVlOiBNYXA8c3RyaW5nLCBjYy5TY2VuZUFzc2V0Pikge1xyXG4gICAgICAgICAgICB0aGlzLl9zY2VuZVJlcyA9IHZhbHVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tZ2V0dGVyLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIGdldCBpbml0aWFsTG9hZFN0YXRlKCk6IE1hcDxzdHJpbmcsIG51bWJlcj4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbExvYWRTdGF0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IHNlY29uZGFyeUxvYWRTdGF0ZSgpOiBNYXA8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlY29uZGFyeUxvYWRTdGF0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IHNjcmlwdExvYWRTdGF0ZSgpOiBNYXA8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjcmlwdExvYWRTdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBpbWdSZXMoKTogTWFwPHN0cmluZywgTWFwPHN0cmluZywgY2MuU3ByaXRlRnJhbWU+PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbWdSZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBzcGluZVJlcygpOiBNYXA8c3RyaW5nLCBzcC5Ta2VsZXRvbkRhdGE+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NwaW5lUmVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgcmVhZEZpbGVSZXMoKTogTWFwPHN0cmluZywgTWFwPHN0cmluZywgc3RyaW5nPj4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZEZpbGVSZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBwcmVmYWJSZXMoKTogTWFwPHN0cmluZywgY2MuUHJlZmFiPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmVmYWJSZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBtdXNpY1JlcygpOiBNYXA8c3RyaW5nLCBjYy5BdWRpb0NsaXA+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX211c2ljUmVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgc2NyaXB0UmVzKCk6IFNldDxzdHJpbmc+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjcmlwdFJlc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IHNjZW5lUmVzKCk6IE1hcDxzdHJpbmcsIGNjLlNjZW5lQXNzZXQ+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lUmVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FbnVtL0Vycm9yVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vTG9hZC9Mb2FkUmVzTWFuYWdlci50c1wiIC8+XHJcblxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICBlbnVtIE11c2ljU3RhdGVUeXBlIHtcclxuICAgICAgICBTVE9QID0gLTEsICAgICAgLy/nhKHmkqXmlL5cclxuICAgICAgICBQTEFZSU5HID0gMSwgICAgLy/mkqXmlL7kuK1cclxuICAgICAgICBQQVVTRSA9IDIsICAgICAgLy/mmqvlgZzkuK1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDpn7PmqILmkqXmlL585pqr5YGc5o6n5Yi25ZmoLOi3n+mfs+aViOmhnueojeW+ruS4jeWQjCzlj6rkv53lrZjnlbbkuIvkuIDlgItNdXNpY0lEXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCAgY2xhc3MgTXVzaWNDb250cm9sbGVyIGltcGxlbWVudHMgSUYuSUF1ZGlvVHlwZSB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgbXVzaWNJRDogbnVtYmVyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5tdXNpY0lEID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaSpeaUvuiDjOaZr+mfs+aogizkuKbphY3lkIjkuqvlhYPos4fmlpks5L2c55u45bCN5oeJ55qE5pKl5pS+5qih5byP6JmV55CGXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0ge01hcDxzdHJpbmcsIGFueT59IGRhdGFcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcGxheShuYW1lOiBzdHJpbmcsIGRhdGE6IE1hcDxzdHJpbmcsIGFueT4pOnZvaWQge1xyXG5cclxuICAgICAgICAgICAgbGV0IHZvbHVtZTogbnVtYmVyID0gZGF0YS5nZXQoXCJ2b2x1bWVcIik7ICAgICAgICAgICAgLy/pn7Pph49cclxuICAgICAgICAgICAgbGV0IGxvb3A6IGJvb2xlYW4gPSBkYXRhLmdldChcImxvb3BcIik7ICAgICAgICAgICAgICAgLy/mmK/lkKblvqrnkrBcclxuXHJcbiAgICAgICAgICAgIC8v542y5Y+W55W25YmN6Z+z5qiC5pKl5pS+54uA5oWLLC0xIOeEoeaSpeaUviAsIDEg5pKl5pS+5LitICAyIOaaq+WBnOS4rVxyXG4gICAgICAgICAgICBsZXQgc3RhdGU6IG51bWJlciA9IGNjLmF1ZGlvRW5naW5lLmdldFN0YXRlKHRoaXMubXVzaWNJRCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIUxvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLm11c2ljUmVzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5BVURJT19GVywgYCR7bmFtZX0g54Sh5q2k6LOH5rqQLOiri+aqouWvn+izh+a6kOmhniBtdXNpY1Jlc+WFp+eahOizh+a6kOaYr+WQpumMr+iqpGApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL+WmguaenOipsumfs+aoguaYr+aaq+WBnOaooeW8jyzlm57lvqnmkqXmlL5cclxuICAgICAgICAgICAgaWYgKHN0YXRlID09IE11c2ljU3RhdGVUeXBlLlBBVVNFKSB7XHJcbiAgICAgICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5yZXN1bWUodGhpcy5tdXNpY0lEKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy/lpoLmnpzkuIrkuIDpppbog4zmma/pn7PmqILmraPlnKjmkqXmlL4s5YWI5pqr5YGcXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSBNdXNpY1N0YXRlVHlwZS5QTEFZSU5HKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGF1ZGlvQ2xpcCA9IExvYWRSZXNNYW5hZ2VyLmluc3RhbmNlLm11c2ljUmVzLmdldChuYW1lKTtcclxuICAgICAgICAgICAgbGV0IG11c2ljSUQgPSBjYy5hdWRpb0VuZ2luZS5wbGF5TXVzaWMoYXVkaW9DbGlwLCBsb29wKTtcclxuICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0Vm9sdW1lKG11c2ljSUQsIHZvbHVtZSk7XHJcbiAgICAgICAgICAgIHRoaXMubXVzaWNJRCA9IG11c2ljSUQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKuWBnOatouiDjOaZr+mfs+aoglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdG9wKCk6dm9pZCB7XHJcblxyXG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5zZXRWb2x1bWUodGhpcy5tdXNpY0lELCAwKTtcclxuICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc3RvcCh0aGlzLm11c2ljSUQpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaaq+WBnOiDjOaZr+mfs+aoglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwYXVzZSgpOnZvaWQge1xyXG4gICAgICAgICAgICBpZiAoY2MuYXVkaW9FbmdpbmUuZ2V0U3RhdGUodGhpcy5tdXNpY0lEKSAhPSBjYy5hdWRpb0VuZ2luZS5BdWRpb1N0YXRlLlBMQVlJTkcpIHJldHVybjtcclxuICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUucGF1c2UodGhpcy5tdXNpY0lEKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vRXJyb3IvRXJyb3JNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0xvYWQvTG9hZFJlc01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRW51bS9BdWRpb1N0YXRlVHlwZS50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOaViOaenOmfs+aViOaSpeaUvnzmmqvlgZzmjqfliLblmahcclxuICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEVmZmVjdENvbnRyb2xsZXIgaW1wbGVtZW50cyBJRi5JQXVkaW9UeXBlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBlZmZlY3RJRDogTWFwPHN0cmluZywgbnVtYmVyPjtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0SUQgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pKl5pS+5pWI5p6c6Z+z5pWILOS4pumFjeWQiOS6q+WFg+izh+aWmSzkvZznm7jlsI3mh4nnmoTmkqXmlL7mqKHlvI/omZXnkIZcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSB7TWFwPHN0cmluZywgYW55Pn0gZGF0YSA6IOaSpeaUvuaooeW8j+izh+aWmVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwbGF5KG5hbWU6IHN0cmluZywgZGF0YTogTWFwPHN0cmluZywgYW55Pik6dm9pZCB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdm9sdW1lOiBudW1iZXIgPSBkYXRhLmdldChcInZvbHVtZVwiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+mfs+mHj1xyXG4gICAgICAgICAgICBsZXQgY2FuU3VwZXJpbXBvc2U6IHR5cGUuQXVkaW9TdGF0ZVR5cGUgPSBkYXRhLmdldChcImNhblN1cGVyaW1wb3NlXCIpOyAgICAgICAvL+WPr+WQpueWiuWKoOaSpeaUvlxyXG4gICAgICAgICAgICBsZXQgbG9vcDogYm9vbGVhbiA9IGRhdGEuZ2V0KFwibG9vcFwiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+W+queSsOeLgOaFi1xyXG4gICAgICAgICAgICBsZXQgaWQgPSB0aGlzLmVmZmVjdElELmdldChuYW1lKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6Kmy6Z+z5qiCSURcclxuICAgICAgICAgICAgbGV0IHN0YXRlOiBib29sZWFuO1xyXG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5nZXRTdGF0ZShpZCkgPT0gY2MuYXVkaW9FbmdpbmUuQXVkaW9TdGF0ZS5FUlJPUiA/IHN0YXRlID0gZmFsc2UgOiBzdGF0ZSA9IHRydWU7ICAgLy/liKTmlrfoqbLpn7PmqILmmK/lkKblnKjmraPmkqXmlL5cclxuXHJcbiAgICAgICAgICAgIGlmICghTG9hZFJlc01hbmFnZXIuaW5zdGFuY2UubXVzaWNSZXMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkFVRElPX0ZXLCBgJHtuYW1lfSDnhKHmraTos4fmupAs6KuL5qqi5a+f6LOH5rqQ6aGeIG11c2ljUmVz5YWn55qE6LOH5rqQ5piv5ZCm6Yyv6KqkYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjYW5TdXBlcmltcG9zZSA9PT0gdHlwZS5BdWRpb1N0YXRlVHlwZS5OT1RfUExBWUlORyAmJiBzdGF0ZSkgcmV0dXJuOyAgICAgICAgIC8v5aaC5p6c55W25YmN5q2j5Zyo5pKl5pS+LOWwh+ebtOaOpemboumWi1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhblN1cGVyaW1wb3NlID09PSB0eXBlLkF1ZGlvU3RhdGVUeXBlLkNMRUFSX1RPX1JFUExBWSAmJiBzdGF0ZSkgeyAgICAgICAgICAgLy/lpoLmnpznlbbliY3mraPlnKjmkqXmlL4s5bCH55u05o6l5YGc5q2i5q2j5Zyo5pKl5pS+55qE6Z+z5qiCLOS4pumHjeaWsOaSpeaUvlxyXG4gICAgICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc3RvcChpZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBhdWRpb0NsaXAgPSBMb2FkUmVzTWFuYWdlci5pbnN0YW5jZS5tdXNpY1Jlcy5nZXQobmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBlZmZJRCA9IGNjLmF1ZGlvRW5naW5lLnBsYXlFZmZlY3QoYXVkaW9DbGlwLCBsb29wKTtcclxuICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0Vm9sdW1lKGVmZklELCB2b2x1bWUpO1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdElELnNldChuYW1lLCBlZmZJRCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlgZzmraLoqbLpn7PmqIIs5Lim5riF6Zmk6KmyTWFwIGVmZmVjdElEXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RvcChuYW1lOiBzdHJpbmcpOnZvaWQge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmVmZmVjdElELmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNjLmF1ZGlvRW5naW5lLnN0b3AodGhpcy5lZmZlY3RJRC5nZXQobmFtZSkpO1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdElELmRlbGV0ZShuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWBnOatouaJgOaciemfs+aViCzkuKbmuIXpmaTmlbTlgItNYXAgZWZmZWN0SURcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RvcEFsbCgpOnZvaWQge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgb2YgdGhpcy5lZmZlY3RJRC5rZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgIGNjLmF1ZGlvRW5naW5lLnN0b3AodGhpcy5lZmZlY3RJRC5nZXQoa2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lZmZlY3RJRC5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lBdWRpby9JQXVkaW9GYWN0b3J5LnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vSUF1ZGlvL0lBdWRpb01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9BdWRpb1R5cGUvTXVzaWNDb250cm9sbGVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vQXVkaW9UeXBlL0VmZmVjdENvbnRyb2xsZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FbnVtL0F1ZGlvU3RhdGVUeXBlLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6Z+z5qiC5bel5bug6aGeLOa0vueZvOmfs+aoguS6i+S7tlxyXG4gICAgICogQERhdGUgMjAyMS0wNS0xMyDkuIrljYggMTA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQXVkaW9GYWN0b3J5IGltcGxlbWVudHMgSUYuSUF1ZGlvRmFjdG9yeSB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbXVzaWNWb2x1bWU6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVmZmVjdFZvbHVtZTogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2FuU3VwZXJpbXBvc2U6IGJvb2xlYW47XHJcbiAgICAgICAgcHJpdmF0ZSBtdXNpY09uTXV0ZTogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIGVmZmVjdE9uTXV0ZTogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxvb3A6IGJvb2xlYW47XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBtdXNpY0RhdGE6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXI+PjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVmZmVjdERhdGE6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIHN0cmluZyB8IHR5cGUuQXVkaW9TdGF0ZVR5cGUgfCBib29sZWFuIHwgbnVtYmVyPj47XHJcbiAgICAgICAgcHJpdmF0ZSBtdXNpY05vcm1hbERhdGE6IE1hcDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXI+O1xyXG4gICAgICAgIHByaXZhdGUgZWZmZWN0Tm9ybWFsRGF0YTogTWFwPHN0cmluZywgc3RyaW5nIHwgdHlwZS5BdWRpb1N0YXRlVHlwZSB8IGJvb2xlYW4gfCBudW1iZXI+O1xyXG4gICAgICAgIHByaXZhdGUgbXVzaWNDb250cm9sbGVyOiBNdXNpY0NvbnRyb2xsZXJcclxuICAgICAgICBwcml2YXRlIGVmZmVjdENvbnRyb2xsZXI6IEVmZmVjdENvbnRyb2xsZXJcclxuICAgICAgICBwcml2YXRlIGF1ZGlvTWFuYWdlcjogSUYuSUF1ZGlvTWFuYWdlcjtcclxuICAgICAgICBwcml2YXRlIGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihhdWRpb01hbmFnZXI6IElGLklBdWRpb01hbmFnZXIsIGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9NYW5hZ2VyID0gYXVkaW9NYW5hZ2VyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/pm5nlkJHntoHlrppcclxuICAgICAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gY29uZmlnTWFuYWdlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+mbmeWQkee2geWumlxyXG4gICAgICAgICAgICB0aGlzLm11c2ljVm9sdW1lID0gdGhpcy5jb25maWdNYW5hZ2VyLm11c2ljVm9sdW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Yid5aeL6Z+z6YePXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Vm9sdW1lID0gdGhpcy5jb25maWdNYW5hZ2VyLmVmZmVjdFZvbHVtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vpn7Pph49cclxuICAgICAgICAgICAgdGhpcy5jYW5TdXBlcmltcG9zZSA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+eEoUxvb3DnmoTpn7PmqILmmK/lkKblj6/ku6XnlorliqBcclxuICAgICAgICAgICAgdGhpcy5tdXNpY09uTXV0ZSA9IHRoaXMuY29uZmlnTWFuYWdlci5pc011c2ljT25NdXRlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+mfs+aoguaYr+WQpuaJk+mWi1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdE9uTXV0ZSA9IHRoaXMuY29uZmlnTWFuYWdlci5pc0VmZmVjdE9uTXV0ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Yid5aeL5pWI5p6c6Z+z5piv5ZCm5omT6ZaLXHJcbiAgICAgICAgICAgIHRoaXMubG9vcCA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vpn7PmqILlvqrnkrBcclxuICAgICAgICAgICAgdGhpcy5tdXNpY0RhdGEgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlcj4+KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIneWni+S6q+WFg+aooeW8j+eahOmfs+aoglxyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdERhdGEgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgc3RyaW5nIHwgdHlwZS5BdWRpb1N0YXRlVHlwZSB8IGJvb2xlYW4gfCBudW1iZXI+PigpOyAgIC8v5Yid5aeL5Lqr5YWD5qih5byP55qE5pWI5p6c6Z+z5pWIXHJcbiAgICAgICAgICAgIHRoaXMubXVzaWNDb250cm9sbGVyID0gbmV3IE11c2ljQ29udHJvbGxlcigpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vmkq3mlL5NdXNpY+mfs+aogumhnlxyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdENvbnRyb2xsZXIgPSBuZXcgRWZmZWN0Q29udHJvbGxlcigpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Yid5aeL5pKt5pS+RWZmZWN06Z+z5pWI6aGeXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vljJbkuqvlhYPpoJDoqK3mkqXmlL7mqKHlvI9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+WMluS6q+WFg+mgkOioreaSpeaUvuaooeW8j1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaW5pdGlhbGl6ZURhdGEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXVzaWNOb3JtYWxEYXRhID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9ybWFsRGF0YSA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmcgfCB0eXBlLkF1ZGlvU3RhdGVUeXBlIHwgYm9vbGVhbiB8IG51bWJlcj4oKTtcclxuICAgICAgICAgICAgdGhpcy5tdXNpY05vcm1hbERhdGEuc2V0KFwidm9sdW1lXCIsIHRoaXMubXVzaWNWb2x1bWUpO1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljTm9ybWFsRGF0YS5zZXQoXCJsb29wXCIsIHRoaXMubG9vcCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9ybWFsRGF0YS5zZXQoXCJjYW5TdXBlcmltcG9zZVwiLCB0eXBlLkF1ZGlvU3RhdGVUeXBlLk5PVF9QTEFZSU5HKTtcclxuICAgICAgICAgICAgdGhpcy5lZmZlY3ROb3JtYWxEYXRhLnNldChcInZvbHVtZVwiLCB0aGlzLmVmZmVjdFZvbHVtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9ybWFsRGF0YS5zZXQoXCJsb29wXCIsIHRoaXMubG9vcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkv53lrZjoqbLog4zmma/pn7PmqILmkqXmlL7mqKHlvI/oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIOmfs+aoguaqlOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWUgLSDpn7Pph49cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3AgLSDmmK/lkKblvqrnkrBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0dGluZ011c2ljKFxyXG4gICAgICAgICAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIHZvbHVtZTogbnVtYmVyID0gdGhpcy5tdXNpY1ZvbHVtZSxcclxuICAgICAgICAgICAgbG9vcDogYm9vbGVhbiA9IHRoaXMubG9vcCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0YTogTWFwPHN0cmluZywgc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlcj4gPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlcj4oKTtcclxuICAgICAgICAgICAgZGF0YS5zZXQoXCJ2b2x1bWVcIiwgdm9sdW1lKTtcclxuICAgICAgICAgICAgZGF0YS5zZXQoXCJsb29wXCIsIGxvb3ApO1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljRGF0YS5zZXQobmFtZSwgZGF0YSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5L+d5a2Y6Kmy5pWI5p6c6Z+z5pWI5pKl5pS+5qih5byP6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLemfs+aoguaqlOWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7QXVkaW9TdGF0ZVR5cGV9IGNhblN1cGVyaW1wb3NlIC0g5piv5ZCm55aK5Yqg5pKl5pS+XHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZvbHVtZSAtIOmfs+mHj1xyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9vcCAtIOaYr+WQpuW+queSsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXR0aW5nRWZmZWN0KG5hbWU6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5TdXBlcmltcG9zZTogdHlwZS5BdWRpb1N0YXRlVHlwZSA9IHR5cGUuQXVkaW9TdGF0ZVR5cGUuTk9UX1BMQVlJTkcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiBudW1iZXIgPSB0aGlzLm11c2ljVm9sdW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3A6IGJvb2xlYW4gPSB0aGlzLmxvb3ApIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRhOiBNYXA8c3RyaW5nLCBzdHJpbmcgfCB0eXBlLkF1ZGlvU3RhdGVUeXBlIHwgYm9vbGVhbiB8IG51bWJlcj4gPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nIHwgdHlwZS5BdWRpb1N0YXRlVHlwZSB8IGJvb2xlYW4gfCBudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIGRhdGEuc2V0KFwiY2FuU3VwZXJpbXBvc2VcIiwgY2FuU3VwZXJpbXBvc2UpO1xyXG4gICAgICAgICAgICBkYXRhLnNldChcInZvbHVtZVwiLCB2b2x1bWUpO1xyXG4gICAgICAgICAgICBkYXRhLnNldChcImxvb3BcIiwgbG9vcCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0RGF0YS5zZXQobmFtZSwgZGF0YSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pKl5pS+6IOM5pmv6Z+z5qiCXHJcbiAgICAgICAgICog5aaC5p6c5ou/5Y+W5LiN5Yiw5Lqr5YWD5pKl5pS+6LOH5paZLOWwh+aLv+WPlumgkOioreizh+aWmVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5qiC5qqU5ZCNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG11c2ljUGxheShuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKCFuYW1lLnRyaW0oKSkgcmV0dXJuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+aqlOWQjeepuuWAvOWIpOaWt1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hdWRpb01hbmFnZXIubXVzaWNPbk11dGUpIHJldHVybjsgICAgICAgICAgICAgIC8v5aaC5p6c55W25YmN54K66Z2c6Z+z5qih5byPXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tdXNpY0RhdGEuaGFzKG5hbWUpKSB7ICAgICAgICAgICAgICAgICAgICAvL+WIpOaWt+aYr+WQpuipsumfs+aoguacieaSpeaUvuWFseeUqOizh+aWmVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tdXNpY0RhdGEuc2V0KG5hbWUsIHRoaXMubXVzaWNOb3JtYWxEYXRhKTsgICAgIC8v5L+d5a2Y6aCQ6Kit6LOH5paZXHJcbiAgICAgICAgICAgICAgICB0aGlzLm11c2ljQ29udHJvbGxlci5wbGF5KG5hbWUsIHRoaXMubXVzaWNOb3JtYWxEYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXVzaWNDb250cm9sbGVyLnBsYXkobmFtZSwgdGhpcy5tdXNpY0RhdGEuZ2V0KG5hbWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pKl5pS+5pWI5p6c6Z+z5pWIXHJcbiAgICAgICAgICog5aaC5p6c5ou/5Y+W5LiN5Yiw5Lqr5YWD5pKl5pS+6LOH5paZLOWwh+aLv+WPlumgkOioreizh+aWmVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5qiC5qqU5ZCNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGVmZmVjdFBsYXkobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICghbmFtZS50cmltKCkpIHJldHVybjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5qqU5ZCN56m65YC85Yik5pa3XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF1ZGlvTWFuYWdlci5lZmZlY3RPbk11dGUpIHJldHVybjsgICAgICAgICAgICAgIC8v5aaC5p6c55W25YmN54K66Z2c6Z+z5qih5byPXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lZmZlY3REYXRhLmhhcyhuYW1lKSkgeyAgICAgICAgICAgICAgICAgICAgLy/liKTmlrfmmK/lkKboqbLpn7PmqILmnInmkqXmlL7os4fmlplcclxuICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0RGF0YS5zZXQobmFtZSwgdGhpcy5lZmZlY3ROb3JtYWxEYXRhKTsgICAgLy/kv53lrZjpoJDoqK3os4fmlplcclxuICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0Q29udHJvbGxlci5wbGF5KG5hbWUsIHRoaXMuZWZmZWN0Tm9ybWFsRGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdENvbnRyb2xsZXIucGxheShuYW1lLCB0aGlzLmVmZmVjdERhdGEuZ2V0KG5hbWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YGc5q2i6IOM5pmv6Z+z5qiCXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbXVzaWNTdG9wKCkge1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljQ29udHJvbGxlci5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmqvlgZzog4zmma/pn7PmqIJcclxuICAgICAgICAgKi9cclxuICAgICAgICBtdXNpY1BhdXNlKCkge1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljQ29udHJvbGxlci5wYXVzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YGc5q2i5pWI5p6c6Z+z5qChXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDpn7PmqILmqpTlkI1cclxuICAgICAgICAgKi9cclxuICAgICAgICBlZmZlY3RTdG9wKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdENvbnRyb2xsZXIuc3RvcChuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWBnOatouaJgOacieaViOaenOmfs+aViFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVmZmVjdFN0b3BBbGwoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Q29udHJvbGxlci5zdG9wQWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnjbLlj5boqbLpn7PmqILmkqXmlL7mqKHlvI8s5aaC5p6c6L+U5ZueTlVsbOWwh+eFp+WOn+mgkOiorVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5qiC5qqU5ZCNXHJcbiAgICAgICAgICogQHJldHVybnMge01hcDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXI+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldE11c2ljU3RhdGUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11c2ljRGF0YS5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnjbLlj5boqbLpn7PmlYjmkqXmlL7mqKHlvI8s5aaC5p6c6L+U5ZueTlVsbOWwh+eFp+WOn+mgkOiorVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5qiC5qqU5ZCNXHJcbiAgICAgICAgICogQHJldHVybnMge01hcDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXI+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEVmZmVjdFN0YXRlKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lZmZlY3REYXRhLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0Vycm9yTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0F1ZGlvRmFjdG9yeS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lBdWRpby9JQXVkaW9NYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vRW51bS9BdWRpb1N0YXRlVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0VudW0vQXVkaW9TdGF0ZVR5cGUudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAqIEBEZXNjcmlwdGlvbiDpn7PmqILnrqHnkIblmags5Yid5aeL6Kit5a6a5ZCE6Z+z5qiC54uA5oWLLOS/neWtmOeVtuWJjeaSpeaUvumfs+mHj1xyXG4gICAgICogQERhdGUgMjAyMS0wNS0xMyDkuIrljYggMTA6MjRcclxuICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQXVkaW9NYW5hZ2VyIGltcGxlbWVudHMgSUYuSUF1ZGlvTWFuYWdlciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBJRi5JQXVkaW9NYW5hZ2VyO1xyXG4gICAgICAgIHByaXZhdGUgZmFjdG9yeTogQXVkaW9GYWN0b3J5OyAgICAgICAgICAgICAgLy/pn7PmqILlt6Xlu6BcclxuICAgICAgICBwcml2YXRlIF9tdXNpY09uTXV0ZTogYm9vbGVhbjsgICAgICAgICAgICAgIC8v55W25YmN5piv5ZCm6Z2c6Z+zXHJcbiAgICAgICAgcHJpdmF0ZSBfZWZmZWN0T25NdXRlOiBib29sZWFuOyAgICAgICAgICAgICAvL+eVtuWJjeaYr+WQpumdnOmfs1xyXG5cclxuICAgICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ01hbmFnZXIgPSBjb25maWdNYW5hZ2VyO1xyXG4gICAgICAgICAgICB0aGlzLmZhY3RvcnkgPSBuZXcgQXVkaW9GYWN0b3J5KHRoaXMsIGNvbmZpZ01hbmFnZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RPbk11dGUgPSB0aGlzLmNvbmZpZ01hbmFnZXIuaXNFZmZlY3RPbk11dGU7XHJcbiAgICAgICAgICAgIHRoaXMuX211c2ljT25NdXRlID0gdGhpcy5jb25maWdNYW5hZ2VyLmlzTXVzaWNPbk11dGU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqICDliJ3lp4vljJYs5Y+q6K6T5LiA5YCL5bCI5qGI5Y+q5pyJ5LiA5qyh55Si55Sf5q2kY2xhc3NcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHNldEluc3RhbmNlKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEF1ZGlvTWFuYWdlcihjb25maWdNYW5hZ2VyKTtcclxuICAgICAgICAgICAgICAgIGF1ZGlvTWdyID0gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDnjbLlj5blt7LntpPliJ3lp4vljJbnmoTpnZzmhYvlr6bkvotjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IElGLklBdWRpb01hbmFnZXIge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKHR5cGUuRXJyb3JUeXBlLkFVRElPX0ZXLCBcIuipsumhnuWwmuacquWvpuS+i+WMllwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDpoY3lpJblsI3oqbLpn7PmqILlgZroqK3lrpos5Y+v5Lul5LiN5YGa6Kit5a6aLOWwh+acg+S+neeFp+m7mOiqjeioreWumuiHquWLleioreWumlxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqICAgICAg6aCQ6Kit5Y+D5pW4OlxyXG4gICAgICAgICAqICAgICAgICAgIHZvbHVtZSA6IOm7mOiqjeeCuiBDb25maWcg5YWn55qE6Z+z6YeP5Y+D5pW4XHJcbiAgICAgICAgICogICAgICAgICAgbG9vcCA6IOm7mOiqjSBmYWxzZVxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5qiC5ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZvbHVtZSAtIOmfs+mHjyAwfjFcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3AgLSDmmK/lkKbph43opIfmkqXmlL5cclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXR0aW5nTXVzaWMobmFtZTogc3RyaW5nLCB2b2x1bWU/OiBudW1iZXIsIGxvb3A/OiBib29sZWFuKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZhY3Rvcnkuc2V0dGluZ011c2ljKG5hbWUsIHZvbHVtZSwgbG9vcCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOmhjeWkluWwjeipsumfs+aViOWBmuioreWumizkvaDlj6/ku6XkuI3lgZroqK3lrpos5bCH5pyD5L6d54Wn6buY6KqN6Kit5a6a6Ieq5YuV6Kit5a6aXHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICogICAgICDpoJDoqK3lj4Pmlbg6XHJcbiAgICAgICAgICogICAgICAgICAgY2FuU3VwZXJpbXBvc2UgOiBmY2MudHlwZS5BdWRpb1N0YXRlVHlwZS5OT1RfUExBWUlOR1xyXG4gICAgICAgICAqICAgICAgICAgIHZvbHVtZSA6IOm7mOiqjeeCuiBDb25maWcg5YWn55qE6Z+z6YeP5Y+D5pW4XHJcbiAgICAgICAgICogICAgICAgICAgbG9vcCA66buY6KqN54K6IGZhbHNlXHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgOiDpn7PmlYjmqpTlkI1cclxuICAgICAgICAgKiBAcGFyYW0ge0F1ZGlvU3RhdGVUeXBlfSBjYW5TdXBlcmltcG9zZSA6IOiDveWQpueWiuWKoFxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWUgOiDpn7Pph48gMH4xXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBsb29wIDog5piv5ZCm6YeN6KSH5pKl5pS+XHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0dGluZ0VmZmVjdChuYW1lOiBzdHJpbmcsIGNhblN1cGVyaW1wb3NlPzogdHlwZS5BdWRpb1N0YXRlVHlwZSwgdm9sdW1lPzogbnVtYmVyLCBsb29wPzogYm9vbGVhbik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhblN1cGVyaW1wb3NlID09PSB0eXBlLkF1ZGlvU3RhdGVUeXBlLlNVUEVSSU1QT1NFICYmIGxvb3ApIHtcclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuQVVESU9fRlcsIGAke25hbWV9IOS9v+eUqOeWiuWKoOaViOaenOaZguS4jeW7uuitsOS9v+eUqOW+queSsOaSpeaUvmApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZhY3Rvcnkuc2V0dGluZ0VmZmVjdChuYW1lLCBjYW5TdXBlcmltcG9zZSwgdm9sdW1lLCBsb29wKVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmkqXmlL7pn7PmqIIs5bCH5pyD5L6d54Wn55W25Yid6Kit5a6a55qE5Y+D5pW46YCy6KGM5pKt5pS+XHJcbiAgICAgICAgICog6Iul54Sh55m854++5Y+v55So5Y+D5pW46Kit5a6aLOS+neeFp+m7mOiqjeWPg+aVuOaSpeaUvlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5qiC5qqU5ZCNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG11c2ljUGxheShuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5mYWN0b3J5Lm11c2ljUGxheShuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaSpeaUvumfs+aViCzlsIfmnIPkvp3nhafnlbbliJ3oqK3lrprnmoTlj4PmlbjpgLLooYzmkq3mlL5cclxuICAgICAgICAgKiDoi6XnhKHnmbznj77lj6/nlKjlj4PmlbjoqK3lrpos5L6d54Wn6buY6KqN5Y+D5pW45pKl5pS+XHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDpn7PmlYjmqpTlkI1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZWZmZWN0UGxheShuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5mYWN0b3J5LmVmZmVjdFBsYXkobmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlgZzmraLpn7PmqIJcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbXVzaWNTdG9wKCkge1xyXG4gICAgICAgICAgICB0aGlzLmZhY3RvcnkubXVzaWNTdG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmqvlgZzpn7PmqIJcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbXVzaWNQYXVzZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5mYWN0b3J5Lm11c2ljUGF1c2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWBnOatoumfs+aViFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0g6Z+z5pWI5qqU5ZCNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGVmZmVjdFN0b3AobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5lZmZlY3RTdG9wKG5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YGc5q2i5omA5pyJ6Z+z5pWIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGVmZmVjdFN0b3BBbGwoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5lZmZlY3RTdG9wQWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnjbLlj5bmkqXmlL7nmoTni4DmhYtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKiAgICAgIHJldHVybiBkYXRhOlxyXG4gICAgICAgICAqICAgICAgICAgIHZvbHVtZSA6IG51bWJlclxyXG4gICAgICAgICAqICAgICAgICAgIGxvb3AgOiBib29sZWFuXHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDpn7PmlYjmqpTlkI1cclxuICAgICAgICAgKiBAcmV0dXJuIHtNYXA8c3RyaW5nLCBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyPn0gLSDmkqXmlL7oqK3lrprlj4PmlbhcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TXVzaWNTdGF0ZShuYW1lOiBzdHJpbmcpOiBNYXA8c3RyaW5nLCBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnkuZ2V0TXVzaWNTdGF0ZShuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeNsuWPluaSpeaUvueahOeLgOaFi1xyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqICAgICAgcmV0dXJuIGRhdGE6XHJcbiAgICAgICAgICogICAgICAgICAgdm9sdW1lIDogbnVtYmVyXHJcbiAgICAgICAgICogICAgICAgICAgY2FuU3VwZXJpbXBvc2UgOiBmY2MudHlwZS5BdWRpb1N0YXRlVHlwZVxyXG4gICAgICAgICAqICAgICAgICAgIGxvb3AgOiBib29sZWFuXHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSDpn7PmqILmqpTlkI1cclxuICAgICAgICAgKiBAcmV0dXJuIHtNYXA8c3RyaW5nLCBzdHJpbmcgfCBmY2MudHlwZS5BdWRpb1N0YXRlVHlwZSB8Ym9vbGVhbiB8IG51bWJlcj59IC1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RWZmZWN0U3RhdGUobmFtZTogc3RyaW5nKTogTWFwPHN0cmluZywgc3RyaW5nIHwgdHlwZS5BdWRpb1N0YXRlVHlwZSB8IGJvb2xlYW4gfCBudW1iZXI+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFjdG9yeS5nZXRFZmZlY3RTdGF0ZShuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaWsOeVtuWJjeaYr+WQpumdnOmfs+aooeW8j1xyXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IOeVtuWJjeaYr+WQpumdnOmfs1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGVFZmZlY3RPbk11dGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VmZmVjdE9uTXV0ZSA9ICF0aGlzLl9lZmZlY3RPbk11dGU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lZmZlY3RPbk11dGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5lZmZlY3RTdG9wQWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VmZmVjdE9uTXV0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaWsOeVtuWJjeaYr+WQpumdnOmfs+aooeW8j1xyXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IOeVtuWJjeaYr+WQpumdnOmfs1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGVNdXNpY09uTXV0ZSgpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgdGhpcy5fbXVzaWNPbk11dGUgPSAhdGhpcy5fbXVzaWNPbk11dGU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tdXNpY09uTXV0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tdXNpY1BhdXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX211c2ljT25NdXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55W25YmN5piv5ZCm6Z2c6Z+z6IOM5pmv6Z+z5qiCXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldCBlZmZlY3RPbk11dGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lZmZlY3RPbk11dGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeVtuWJjeaYr+WQpumdnOmfs+aViOaenOmfs+aViFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXQgbXVzaWNPbk11dGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tdXNpY09uTXV0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOijnemjvuWZqFxyXG4gICAgICog5pKl5pS+6IOM5pmv6Z+z5qiCXHJcbiAgICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSA6IOmfs+aoguaqlOWQjVxyXG4gICAgICogQHJldHVybnMgeyh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikgPT4gdm9pZH1cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gTXVzaWMobmFtZTpzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYW55KSB7XHJcbiAgICAgICAgICAgICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UubXVzaWNQbGF5KG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICBtZXRob2QuY2FsbCh0aGlzLCAuLi5hbnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KOd6aO+5ZmoXHJcbiAgICAgKiDlgZzmraLog4zmma/pn7PmqIJcclxuICAgICAqIEByZXR1cm5zIHsodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHZvaWR9XHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIE11c2ljU3RvcCgpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYW55KSB7XHJcbiAgICAgICAgICAgICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UubXVzaWNTdG9wKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgLi4uYW55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOijnemjvuWZqFxyXG4gICAgICog5pKl5pS+5pWI5p6c6Z+z5pWIXHJcbiAgICAgKiBAcGFyYW0gbmFtZVtdIHtzdHJpbmd9IDog6Z+z5qiC5qqU5ZCNXHJcbiAgICAgKiBAcmV0dXJucyB7KHRhcmdldDogYW55LCBrZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSA9PiB2b2lkfVxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBFZmZlY3QoLi4ubmFtZTogc3RyaW5nW10pIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYW55KSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lLmZvckVhY2goKG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5lZmZlY3RQbGF5KG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCAuLi5hbnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KOd6aO+5ZmoXHJcbiAgICAgKiDmmqvlgZzmlYjmnpzpn7PmlYhcclxuICAgICAqIEBwYXJhbSBuYW1lW10ge3N0cmluZ30gOiDpn7PmqILmqpTlkI1cclxuICAgICAqIEByZXR1cm5zIHsodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHZvaWR9XHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIEVmZmVjdFN0b3AoLi4ubmFtZTogc3RyaW5nW10pIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYW55KSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lLmZvckVhY2goKG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5lZmZlY3RTdG9wKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCAuLi5hbnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGNvbnN0IENOWTogSUYuSUxhbmd1YWdlU3R5bGUgPSB7XHJcbiAgICAgICAgZm9udFNpemU6IDM2LFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6IDQ2LFxyXG4gICAgICAgIHRleHRTY2FsZToge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAxLFxyXG4gICAgICAgICAgICB0aXRsZTogMS4yLFxyXG4gICAgICAgICAgICB0ZXh0OiAwLjhcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZvbnRGYW1pbHk6IFwi5b6u6Luf5q2j6buR6auUXCJcclxuICAgIH1cclxuICAgIGNvbnN0IE5URDogSUYuSUxhbmd1YWdlU3R5bGUgPSB7XHJcbiAgICAgICAgZm9udFNpemU6IDM2LFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6IDQ2LFxyXG4gICAgICAgIHRleHRTY2FsZToge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAxLFxyXG4gICAgICAgICAgICB0aXRsZTogMS4yLFxyXG4gICAgICAgICAgICB0ZXh0OiAwLjhcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZvbnRGYW1pbHk6IFwi5b6u6Luf5q2j6buR6auUXCJcclxuICAgIH1cclxuICAgIGNvbnN0IFVTRDogSUYuSUxhbmd1YWdlU3R5bGUgPSB7XHJcbiAgICAgICAgZm9udFNpemU6IDMwLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6IDQwLFxyXG4gICAgICAgIHRleHRTY2FsZToge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAxLFxyXG4gICAgICAgICAgICB0aXRsZTogMS4yLFxyXG4gICAgICAgICAgICB0ZXh0OiAwLjhcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZvbnRGYW1pbHk6IFwiQXJpYWwgVW5pY29kZSBNUyxBcmlhbFwiXHJcbiAgICB9XHJcbiAgICBjb25zdCBWTkQ6IElGLklMYW5ndWFnZVN0eWxlID0ge1xyXG4gICAgICAgIGZvbnRTaXplOiAzMCxcclxuICAgICAgICBsaW5lSGVpZ2h0OiA0MCxcclxuICAgICAgICB0ZXh0U2NhbGU6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IDEuMixcclxuICAgICAgICAgICAgdGV4dDogMC44XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb250RmFtaWx5OiBcIkFyaWFsIFVuaWNvZGUgTVMsQXJpYWxcIlxyXG4gICAgfVxyXG4gICAgY29uc3QgVEhCOiBJRi5JTGFuZ3VhZ2VTdHlsZSA9IHtcclxuICAgICAgICBmb250U2l6ZTogMzAsXHJcbiAgICAgICAgbGluZUhlaWdodDogNDYsXHJcbiAgICAgICAgdGV4dFNjYWxlOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IDEsXHJcbiAgICAgICAgICAgIHRpdGxlOiAxLjIsXHJcbiAgICAgICAgICAgIHRleHQ6IDAuOFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9udEZhbWlseTogXCJBcmlhbCBVbmljb2RlIE1TLEFyaWFsXCJcclxuICAgIH1cclxuICAgIGNvbnN0IElEUjogSUYuSUxhbmd1YWdlU3R5bGUgPSB7XHJcbiAgICAgICAgZm9udFNpemU6IDMwLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6IDQwLFxyXG4gICAgICAgIHRleHRTY2FsZToge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiAxLFxyXG4gICAgICAgICAgICB0aXRsZTogMS4yLFxyXG4gICAgICAgICAgICB0ZXh0OiAwLjhcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZvbnRGYW1pbHk6IFwiQXJpYWwgVW5pY29kZSBNUyxBcmlhbFwiXHJcbiAgICB9XHJcbiAgICBjb25zdCBNWVI6IElGLklMYW5ndWFnZVN0eWxlID0ge1xyXG4gICAgICAgIGZvbnRTaXplOiAzMCxcclxuICAgICAgICBsaW5lSGVpZ2h0OiA0MCxcclxuICAgICAgICB0ZXh0U2NhbGU6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IDEuMixcclxuICAgICAgICAgICAgdGV4dDogMC44XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb250RmFtaWx5OiBcIkFyaWFsIFVuaWNvZGUgTVMsQXJpYWxcIlxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3Ig6JWt56uL5ZOBXHJcbiAgICAgKiBARGVzY3JpcHRpb24g6Kqe57O7566h55CG5ZmoIDog5L+d5a2Y55W25YmN6Kqe6KiA5pysLOiqnuezu+aoo+W8j1xyXG4gICAgICogQERhdGUgMjAyMS0wNi0yOCDkuIvljYggMTI6MDZcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgTGFuZ3VhZ2VNYW5hZ2VyIGltcGxlbWVudHMgSUYuSUxhbmd1YWdlTWFuYWdlciB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeVtuWJjeiqnuiogOaWh+Wtl+e3qeWtmFxyXG4gICAgICAgICAqIEB0eXBlIHt7W3A6IHN0cmluZ106IHN0cmluZ319XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBsYW5ndWFnZUNhY2hlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnlbbliY3oqp7ns7tcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX25vd0xhbmc6IHN0cmluZyB8IHR5cGUuTGFuZ3VhZ2VUeXBlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnlbbliY3ntoHlrprnmoTntYTku7ZcclxuICAgICAgICAgKiBAdHlwZSB7TWFwPGNjLkxhYmVsLCBzdHJpbmc+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX25vd0xhbmd1YWdlTGFiZWxzOiBNYXA8Y2MuTGFiZWwsIHN0cmluZz47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaJgOacieabtOaWsOWujOW+jOeahGxhYmVsIOmDveacg+S/neWtmOiHs+mAmSzpnIDopoHlho3mrKHmm7Tmj5voqp7ns7vmmYLkvb/nlKhcclxuICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TWFwPGNjLkxhYmVsLCBzdHJpbmc+Pn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYWxsTGFuZ3VhZ2VMYWJlbDogQXJyYXk8TWFwPGNjLkxhYmVsLCBzdHJpbmc+PjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55W25YmN5omA5pyJ6Kqe57O75qij5byP5YiX6KGoXHJcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9zdHlsZTogTWFwPHN0cmluZyB8IGZjYy50eXBlLkxhbmd1YWdlVHlwZSwgZmNjLklGLklMYW5ndWFnZVN0eWxlPjtcclxuICAgICAgICBwcml2YXRlIGNvbmZpZ01hbmFnZXI6IGZjYy5JRi5JQ29uZmlnTWFuYWdlcjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IElGLklMYW5ndWFnZU1hbmFnZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IElGLklDb25maWdNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnTWFuYWdlciA9IGNvbmZpZ01hbmFnZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gbmV3IE1hcDxzdHJpbmcgfCBmY2MudHlwZS5MYW5ndWFnZVR5cGUsIGZjYy5JRi5JTGFuZ3VhZ2VTdHlsZT4oKTsgIC8v5Yid5aeL5ZCE6Kqe57O75qij5byPXHJcbiAgICAgICAgICAgIHRoaXMuYWxsTGFuZ3VhZ2VMYWJlbCA9IG5ldyBBcnJheTxNYXA8Y2MuTGFiZWwsIHN0cmluZz4+KCk7ICAgICAgICAgICAgICAgICAgICAgIC8v5Yid5aeL5omA5pyJbGFiZWxcclxuICAgICAgICAgICAgdGhpcy5fbm93TGFuZ3VhZ2VMYWJlbHMgPSBuZXcgTWFwPGNjLkxhYmVsLCBzdHJpbmc+KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Yid5aeL55W25YmN57aB5a6a55qE5omA5pyJbGFiZWxcclxuICAgICAgICAgICAgdGhpcy5pbml0RGVmYXVsdFN0eWxlKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vljJbpoJDoqK3oqp7ns7vmqKPlvI9cclxuICAgICAgICAgICAgdGhpcy5fbm93TGFuZyA9IHRoaXMuY29uZmlnTWFuYWdlci5sYW5ndWFnZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vnlbbliY3oqp7ns7tcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAg5oe25ryi5Yqg6LyJXHJcbiAgICAgICAgICogIOWIneWni+WMlizlj6rorpPkuIDlgIvlsIjmoYjlj6rmnInkuIDmrKHnlKLnlJ/mraRjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc2V0SW5zdGFuY2UoY29uZmlnTWFuYWdlcjogSUYuSUNvbmZpZ01hbmFnZXIpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgTGFuZ3VhZ2VNYW5hZ2VyKGNvbmZpZ01hbmFnZXIpO1xyXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VNZ3IgPSB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOeNsuWPluW3sue2k+WIneWni+WMlueahOmdnOaFi+WvpuS+i2NsYXNzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogSUYuSUxhbmd1YWdlTWFuYWdlciB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuQVVESU9fRlcsIFwi6Kmy6aGe5bCa5pyq5a+m5L6L5YyWXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDpu5joqo3mqKPlvI9cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaW5pdERlZmF1bHRTdHlsZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3R5bGUuc2V0KHR5cGUuTGFuZ3VhZ2VUeXBlLlRBSVdBTiwgTlREKTtcclxuICAgICAgICAgICAgdGhpcy5fc3R5bGUuc2V0KHR5cGUuTGFuZ3VhZ2VUeXBlLkNISU5FU0UsIENOWSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlLnNldCh0eXBlLkxhbmd1YWdlVHlwZS5BTUVSSUNBLCBVU0QpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZS5zZXQodHlwZS5MYW5ndWFnZVR5cGUuSU5ET05FU0lBLCBJRFIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZS5zZXQodHlwZS5MYW5ndWFnZVR5cGUuVEhBSUxBTkQsIFRIQik7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlLnNldCh0eXBlLkxhbmd1YWdlVHlwZS5NQUxBWVNJQSwgTVlSKTtcclxuICAgICAgICAgICAgdGhpcy5fc3R5bGUuc2V0KHR5cGUuTGFuZ3VhZ2VUeXBlLlZJRVROQU0sIFZORCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDpoY3lpJbmt7vliqDmlrDnmoToqp7ns7vmqKPlvI9cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZyB8IGZjYy50eXBlLkxhbmd1YWdlVHlwZX0ga2V5IC0g5ZyL5a6257Ch5a+rXHJcbiAgICAgICAgICogQHBhcmFtIHtmY2MuSUYuSUxhbmd1YWdlU3R5bGV9IHN0eWxlIC0g5paw5qij5byPXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkU3R5bGUoa2V5OiBzdHJpbmcgfCB0eXBlLkxhbmd1YWdlVHlwZSwgc3R5bGU6IElGLklMYW5ndWFnZVN0eWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlLnNldChrZXksIHN0eWxlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pu05paw6Kqe57O7LOacg+abtOaWsOeVtuWJjeaJgOacieW3sue2k+e2geWumueahCBjYy5MYWJlbFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgZmNjLnR5cGUuTGFuZ3VhZ2VUeXBlfSBsYW5ndWFnZSAtIOimgeabtOaWsOeahOiqnuezu1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVwZGF0ZUxhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcgfCB0eXBlLkxhbmd1YWdlVHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbm93TGFuZyAhPSBsYW5ndWFnZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbm93TGFuZyA9IGxhbmd1YWdlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbWFwIG9mIHRoaXMuYWxsTGFuZ3VhZ2VMYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxhYmVsIG9mIG1hcC5rZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRLZXkgPSBtYXAuZ2V0KGxhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUZXh0KGxhYmVsLCB0ZXh0S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5re75Yqg55W25YmN6Kqe57O7LOaLv+WPliB3aW5kb3cubGFuZ3VhZ2VfTW9kZSDlhafnianku7Ys5L2c5L+d5a2YXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2VPYmplY3Q6IG9iamVjdCk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubGFuZ3VhZ2VDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZUNhY2hlID0gbGFuZ3VhZ2VPYmplY3RbdGhpcy5fbm93TGFuZ107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeNsuWPlueVtuWJjeiqnuezu1xyXG4gICAgICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRMYW5ndWFnZSgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm93TGFuZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeNsuWPlueVtuWJjeiqnuezu+aVuOaTmizov5Tlm57oqbJrZXnlsI3mh4nnmoTmloflrZdcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0ga2V5IC0g5ou/5Y+W55W25YmN57ep5a2Y6Kqe57O75paH5pys55qE5p+Q5LiA5q615paH5a2XIHwo56m65Y+D5pW4KeeNsuWPlueVtuWJjeiqnuezu+aVuOaTmizov5Tlm57miYDmnInmlbjmk5pcclxuICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0g6L+U5Zue6Kmy5q615paH5a2XLOWmguaenOaJvuS4jeWIsOmNteWAvCzpu5joqo3ov5Tlm54ga2V5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0VGV4dChrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlQ2FjaGVba2V5XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeNsuWPlueVtuWJjeiqnuezu+e3qeWtmFxyXG4gICAgICAgICAqIEByZXR1cm4ge29iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRBbGxUZXh0KCk6IG9iamVjdCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlQ2FjaGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDph43mlrDnjbLlj5boqp7ns7ss5Lim5pu05paw57ep6KGd5YWnXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGxhbmd1YWdlT2JqZWN0IC0g6Kqe57O76LOH5rqQXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBmY2MudHlwZS5MYW5ndWFnZVR5cGV9IGxhbmd1YWdlIC0g5pyJ5Y+D5pW454K65by35Yi25pu05paw6Kmy5Y+D5pW46Kqe57O7LOeEoeWPg+eCuueVtuWJjeaLv+WPlueVtuWJjeiqnuezu+abtOaWsOe3qeihnVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlVGFrZUxhbmd1YWdlQnVmZmVyKGxhbmd1YWdlT2JqZWN0OiBvYmplY3QsIGxhbmd1YWdlPzogc3RyaW5nIHwgdHlwZS5MYW5ndWFnZVR5cGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VDYWNoZSA9IGxhbmd1YWdlT2JqZWN0W2xhbmd1YWdlXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZUNhY2hlID0gbGFuZ3VhZ2VPYmplY3RbdGhpcy5fbm93TGFuZ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid2luZG93Lmxhbmd1YWdlX01vZGUg5p+l5om+5LiN5Yiw6Kmy6Kqe57O7XCIsIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUT0RPIOa4hemZpOeEoeeUqOeahOiqnuezu+e3qeWtmFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZVN0cmluZ0J1ZmZlcigpIHtcclxuICAgICAgICAgICAgLy9UT0RPXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmm7TmlrDmloflrZfoqbJsYWJlbOaWh+Wtl1xyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuTGFiZWx9IHRhcmdldCAtIOimgeabtOaWsOeahOebruaomVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nP30gdGV4dEtleSAtIOimgeabtOaWsOeahOaWh+WtlyBrZXlcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVwZGF0ZVRleHQodGFyZ2V0OiBjYy5MYWJlbCwgdGV4dEtleT86IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgICAgICBpZiAodGV4dEtleSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnN0cmluZyA9IHRoaXMuZ2V0VGV4dCh0ZXh0S2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9ub3dMYW5ndWFnZUxhYmVscy5zZXQodGFyZ2V0LCB0ZXh0S2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmm7TmlrDmiYDmnInpgI/pgY4gdXBkYXRlVGV4dOabtOaWsOeahOe1hOS7tizmm7TmlrDoqbLntYTku7bmqKPmmK9cclxuICAgICAgICAgKiDms6jmhI8gOiDpoIjphY3lkIggdXBkYXRlVGV4dCDkuIDotbfkvb/nlKhcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNhdmUgLSDmmK/lkKbopoHkv53lrZggbGFiZWzntYTku7Ys5Y+v6YWN5ZCIdXBkYXRlTGFuZ3VhZ2UoKeaWueazleWwh+W3sue2k+e2geWumueahGxhYmVs5YWo6YOo5YaN5qyh5pu05o+b6Kqe57O75paH5a2XXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGN1c3RvbUZvbnRTaXplIC0g5by35Yi25pu05paw5a2X5a6a576p55qE5aSn5bCPXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXBkYXRlU3R5bGUoc2F2ZTogYm9vbGVhbiwgY3VzdG9tRm9udFNpemU/OiBudW1iZXIpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBsYW5ndWFnZTogc3RyaW5nIHwgZmNjLnR5cGUuTGFuZ3VhZ2VUeXBlID0gdGhpcy5fbm93TGFuZztcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc3R5bGUuaGFzKHRoaXMuX25vd0xhbmcpKSB7XHJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZSA9IHR5cGUuTGFuZ3VhZ2VUeXBlLkFNRVJJQ0E7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZvbnRGYW1pbHk6IHN0cmluZyA9IHRoaXMuX3N0eWxlLmdldChsYW5ndWFnZSkuZm9udEZhbWlseTtcclxuICAgICAgICAgICAgY29uc3QgZm9udFNpemU6IG51bWJlciA9IGN1c3RvbUZvbnRTaXplIHx8IHRoaXMuX3N0eWxlLmdldChsYW5ndWFnZSkuZm9udFNpemU7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVIZWlnaHQ6IG51bWJlciA9IHRoaXMuX3N0eWxlLmdldChsYW5ndWFnZSkubGluZUhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGxhYmVsIG9mIHRoaXMuX25vd0xhbmd1YWdlTGFiZWxzLmtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwuZm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XHJcbiAgICAgICAgICAgICAgICBsYWJlbC5mb250U2l6ZSA9IGZvbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgbGFiZWwubGluZUhlaWdodCA9IGxpbmVIZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNhdmUpIHRoaXMuYWxsTGFuZ3VhZ2VMYWJlbC5wdXNoKHRoaXMuX25vd0xhbmd1YWdlTGFiZWxzKTtcclxuICAgICAgICAgICAgdGhpcy5fbm93TGFuZ3VhZ2VMYWJlbHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRXJyb3IvRXJyb3JNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0Vycm9yL0VudW0vRXJyb3JUeXBlLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g57aB5a6a6Ieq5bex6ZyA6KaB55qE5omA5pyJ5o6o5pKl6ICFXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA2LTEwIOS4iuWNiCAxMTowMlxyXG4gICAgICogQFZlcnNpb24gMS4wXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25NYW5hZ2VyPFQgZXh0ZW5kcyBJRi5JQmFzZU5vdGlmaWNhdGlvbj4gaW1wbGVtZW50cyBJRi5JTm90aWZpY2F0aW9uTWFuYWdlcjxUPiB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS/neWtmOS9v+eUqOS4reeahOaOqOaSpeiAhVxyXG4gICAgICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBJQmFzZU5vdGlmaWNhdGlvbj59XHJcbiAgICAgICAgICogQHByb3RlY3RlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByb3RlY3RlZCByZWFkb25seSBub3RpZmljYXRpb25Ub01hcDogTWFwPHN0cmluZywgVD47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqIEB0eXBlIHtOb3RpZmljYXRpb25NYW5hZ2VyPGFueT59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IElGLklOb3RpZmljYXRpb25NYW5hZ2VyPGFueT47XHJcblxyXG4gICAgICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uVG9NYXAgPSBuZXcgTWFwPHN0cmluZywgVD4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaHtua8ouWKoOi8iVxyXG4gICAgICAgICAqIEByZXR1cm4ge0lOb3RpZmljYXRpb25IYW5kbGVyPFQ+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2U8VCBleHRlbmRzIElGLklCYXNlTm90aWZpY2F0aW9uPigpOiBJRi5JTm90aWZpY2F0aW9uTWFuYWdlcjxUPiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IE5vdGlmaWNhdGlvbk1hbmFnZXI8VD4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDmjqjmkqXogIVcclxuICAgICAgICAgKiBAcGFyYW0ge1R9IG5vdGlmaWNhdGlvbiAtIOaOqOaSpeiAhVxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Tm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbjogVCk6IHRoaXMge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm90aWZpY2F0aW9uVG9NYXAuaGFzKG5vdGlmaWNhdGlvbi5UQUdfTkFNRSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uVG9NYXAuc2V0KG5vdGlmaWNhdGlvbi5UQUdfTkFNRSwgbm90aWZpY2F0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeNsuWPluS7pee2geWumueahOaOqOaSreiAhVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0g5LqL5Lu25ZCN56ixXHJcbiAgICAgICAgICogQHJldHVyblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldE5vdGlmaWNhdGlvbih0eXBlOiBzdHJpbmcpOiBUIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uVG9NYXAuaGFzKHR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25Ub01hcC5nZXQodHlwZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBFcnJvck1hbmFnZXIuaW5zdGFuY2UuZXhlY3V0ZUVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIGZjYy50eXBlLkVycm9yVHlwZS5MSVNURU5FUl9GVyxcclxuICAgICAgICAgICAgICAgICAgICBgJHt0eXBlfSA6ICDoqbJrZXnlsJrmnKrliqDlhaXmjqjmkqXkuovku7bkuK0s5L2g6ZyA5YWI5Z+36KGMIHNldE5vdGlmaWNhdGlvbih0eXBlOklCYXNlTm90aWZpY2F0aW9uKeaWueazlWBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmn6XnnIvoqbLkuovku7bmmK/lkKblt7LntpPliqDlhaXnrqHnkIblmajkuK1cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIOS6i+S7tuWQjeeosVxyXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFzTm90aWZpY2F0aW9uKHR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25Ub01hcC5oYXModHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmi7/lj5bmiYDmnInku6XntoHlrprnmoTmjqjmkq1cclxuICAgICAgICAgKiBAcmV0dXJuIHtNYXA8U3RyaW5nLCBUPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRBbGxOb3RpZmljYXRpb25zKCk6IE1hcDxTdHJpbmcsIFQ+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uVG9NYXA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lQb29sLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3Ig6JWt56uL5ZOBXHJcbiAgICAgKiBARGVzY3JpcHRpb24gVE9ET1xyXG4gICAgICogQERhdGUgMjAyMS0xMC0yOSDkuIvljYggMDI6MzVcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ0NOb2RlUG9vbCBpbXBsZW1lbnRzIElGLklQb29sIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBwb29sOiBjYy5Ob2RlUG9vbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBwcmVmYWI6IGNjLlByZWZhYiB8IGNjLk5vZGU7XHJcblxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgICAgICogQHBhcmFtIHtjYy5QcmVmYWIgfCBjYy5Ob2RlfSBub2RlT3JQcmVmYWIgLSDopoHlu7rnq4vnmoTnianku7ZcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQg5Yid5aeL5YyW5Liq5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBub2RlT3JQcmVmYWI6IGNjLlByZWZhYiB8IGNjLk5vZGUsIGNvdW50OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZVxyXG4gICAgICAgICAgICB0aGlzLnBvb2wgPSBuZXcgY2MuTm9kZVBvb2woKTtcclxuICAgICAgICAgICAgdGhpcy5wcmVmYWIgPSBub2RlT3JQcmVmYWI7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9iajogY2MuTm9kZSA9IHRoaXMuZ2V0Tm9kZSgpIGFzIGNjLk5vZGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvb2wucHV0KG9iaik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldE5hbWUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCgpOiBjYy5Ob2RlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9vbC5zaXplKCkgPiAwID8gdGhpcy5wb29sLmdldCgpIDogdGhpcy5nZXROb2RlKCkgYXMgY2MuTm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldE5vZGUoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByZWZhYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmluc3RhbnRpYXRlPGNjLk5vZGUgfCBjYy5QcmVmYWI+KHRoaXMucHJlZmFiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyDpooTliLbkvZPmsqHmnInotYvlgLwgJylcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaXplKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb29sLnNpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1dChub2RlOiBjYy5Ob2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9vbC5wdXQobm9kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhcigpIHtcclxuICAgICAgICAgICAgdGhpcy5wb29sLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9JUG9vbC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0NDTm9kZVBvb2wudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciDola3nq4vlk4FcclxuICAgICAqIEBEZXNjcmlwdGlvbiBUT0RPXHJcbiAgICAgKiBARGF0ZSAyMDIxLTEwLTI5IOS4i+WNiCAwMjozM1xyXG4gICAgICogQFZlcnNpb24gMS4wXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBTZWxmUG9vbCBpbXBsZW1lbnRzIElGLklQb29sIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBsaXN0OiBjYy5Ob2RlW10gPSBbXVxyXG5cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHBvb2w6IENDTm9kZVBvb2w7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBvb2w6IENDTm9kZVBvb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5wb29sID0gcG9vbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCgpOiBjYy5Ob2RlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5sZW5ndGggPiAwID8gdGhpcy5saXN0LnNoaWZ0KCkgOiB0aGlzLnBvb2wuZ2V0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRQb29sKCk6IENDTm9kZVBvb2wge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb29sXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvb2wuc2l6ZSgpICsgdGhpcy5saXN0Lmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWwh+eJqeS7tui/lOWbnuWwjeixoeaxoOS4rVxyXG4gICAgICAgICAqIEBwYXJhbSBub2RlXHJcbiAgICAgICAgICogQHBhcmFtIG5vZGVQb29sIOaYr+WQpuaUvuWFpU5vZGVQb29s5LitXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHV0KG5vZGU6IGNjLk5vZGUsIG5vZGVQb29sOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKG5vZGVQb29sKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvb2wucHV0KG5vZGUpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgIG5vZGUuc3RvcEFsbEFjdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIG5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnBvb2wuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5saXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0NDTm9kZVBvb2wudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9TZWxmUG9vbC50c1wiIC8+XHJcbm5hbWVzcGFjZSBmY2Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIOiVreeri+WTgVxyXG4gICAgICogQERlc2NyaXB0aW9uIOe3qeWtmOaxoOeuoeeQhuWZqFxyXG4gICAgICogQERhdGUgMjAyMS0xMC0yOSDkuIvljYggMDI6MjhcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgTm9kZVBvb2xNYW5hZ2VyIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBOb2RlUG9vbE1hbmFnZXI7XHJcblxyXG4gICAgICAgIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogTm9kZVBvb2xNYW5hZ2VyIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgTm9kZVBvb2xNYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5bCN6LGh5rGg6KGoXHJcbiAgICAgICAgICogQHR5cGUge01hcDxzdHJpbmcsIFNlbGZQb29sPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcG9vbHM6IE1hcDxzdHJpbmcsIFNlbGZQb29sPiA9IG5ldyBNYXA8c3RyaW5nLCBTZWxmUG9vbD4oKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5L+d5a2Ybm9kZeeJqeS7tm5hbWXlkI0s5L2/5riF6Zmk54mp5Lu25pmCLOWPr+mAj+mBjuipsm5vZGXnianku7bnmoRuYW1l5ZCNLOafpeaJvuWwjeaHieeahHBvb2zmsaDnmoRrZXlcclxuICAgICAgICAgKiBAdHlwZSB7TWFwPGNjLk5vZGUsIHN0cmluZz59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIG5hbWVNYXA6IE1hcDxjYy5Ob2RlLCBzdHJpbmc+ID0gbmV3IE1hcDxjYy5Ob2RlLCBzdHJpbmc+KCk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+ipsueJqeS7tuS/neWtmOiHs+e3qeWtmOaxoOS4rVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOiHquiogueJqeS7tuWQjeeosVxyXG4gICAgICAgICAqIEBwYXJhbSB7Y2MuUHJlZmFiIHwgY2MuTm9kZX0gbm9kZU9yUHJlZmFiIC0g6KaB5bu656uL55qE54mp5Lu2XHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0g5pW46YePXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdChuYW1lOiBzdHJpbmcsIG5vZGVPclByZWZhYjogY2MuUHJlZmFiIHwgY2MuTm9kZSwgY291bnQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucG9vbHMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvb2xzLnNldChuYW1lLCBuZXcgU2VsZlBvb2wobmV3IENDTm9kZVBvb2wobmFtZSwgbm9kZU9yUHJlZmFiLCBjb3VudCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog542y5Y+W6Kmy57ep5a2Y5rGgXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm4ge0NDTm9kZVBvb2x9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0UG9vbChrZXk6IHN0cmluZyk6IENDTm9kZVBvb2wge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb29scy5nZXQoa2V5KS5nZXRQb29sKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnjbLlj5bnt6nlrZjmsaDlhafnianku7ZcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0g55W25Yid6Ieq6KiC576p5ZCN56ixXHJcbiAgICAgICAgICogQHJldHVybiB7Y2MuTm9kZX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQoa2V5OiBzdHJpbmcpOiBjYy5Ob2RlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9vbHMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBub2RlOiBjYy5Ob2RlID0gdGhpcy5wb29scy5nZXQoa2V5KS5nZXQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5uYW1lTWFwLmhhcyhub2RlKSAmJiBub2RlLm5hbWUgIT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lTWFwLnNldChub2RlLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlm57mlLbpgLLlsI3osaHmsaBcclxuICAgICAgICAgKiBAcGFyYW0ge2NjLk5vZGV9IG5vZGUgLSDopoHlm57mlLbnmoTnianku7ZcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5vZGVQb29sIC0g5piv5ZCm6KaB5Zue5pS26YCy5bCN6LGh5rGgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHV0KG5vZGU6IGNjLk5vZGUsIG5vZGVQb29sOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSB0aGlzLm5hbWVNYXAuZ2V0KG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucG9vbHMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNjLndhcm4oXCIgbm90IGhhdmUgbmFtZSBcIiwga2V5LCAnICxnby5uYW1lICcsIG5vZGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wb29scy5nZXQoa2V5KS5wdXQobm9kZSwgbm9kZVBvb2wpO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWVNYXAuZGVsZXRlKG5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5riF6Zmk6Kmy5bCN6LGh5rGg5YWn5omA5pyJ54mp5Lu2XHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGVhcihuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9vbHMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvb2xzLmdldChuYW1lKS5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb29scy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa4hemZpOaJgOaciee3qeWtmOaxoOWFp+aJgOacieeJqeS7tlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsZWFyQWxsKCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnBvb2xzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wb29scy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9BdWRpby9BdWRpb01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Db25maWcvU2xvdENvbmZpZ01hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FcnJvci9FcnJvck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9MYW5ndWFnZS9MYW5ndWFnZU1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FdmVudC9FdmVudE1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9Mb2FkL0xvYWRSZXNNYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vUHJvY2Vzcy9Qcm9jZXNzTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1NjZW5lL1NjZW5lTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1Nsb3QvU2xvdFN0eWxlTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL05vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb25NYW5hZ2VyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTm9kZVBvb2wvTm9kZVBvb2xNYW5hZ2VyLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgYrmiLLliJ3lp4voqK3lrpos5Lim6YCP6YGOYnVpbGRlcuWKoOi8ieaJgOaciU1hbmFnZXJcclxuICAgICAqIEByZXR1cm4ge2ZjYy5JRi5JQ29uZmlnTWFuYWdlcn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjb25zdCBjb25maWdNZ3I6IElGLklTbG90Q29uZmlnTWFuYWdlciA9IFNsb3RDb25maWdNYW5hZ2VyLmluc3RhbmNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog54mp5Lu25rGg566h55CG5ZmoXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjb25zdCBub2RlUG9vbE1ncjpOb2RlUG9vbE1hbmFnZXIgPSBOb2RlUG9vbE1hbmFnZXIuaW5zdGFuY2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpn7PmqILnrqHnkIblmags5Yid5aeL6Kit5a6a5ZCE6Z+z5qiC54uA5oWLLOS/neWtmOeVtuWJjeaSpeaUvumfs+mHj1xyXG4gICAgICogQHJldHVybiB7ZmNjLklGLklBdWRpb01hbmFnZXJ9XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBsZXQgYXVkaW9NZ3I6IElGLklBdWRpb01hbmFnZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoYbmnrbpjK/oqqTnrqHnkIZcclxuICAgICAqIEByZXR1cm4ge2ZjYy5JRi5JRXJyb3JNYW5hZ2VyfVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgbGV0IGVycm9yTWdyOiBJRi5JRXJyb3JNYW5hZ2VyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Kqe57O7566h55CG5ZmoIDog5L+d5a2Y55W25YmN6Kqe6KiA5pysLOiqnuezu+aoo+W8j1xyXG4gICAgICogQHJldHVybiB7ZmNjLklGLklMYW5ndWFnZU1hbmFnZXJ9XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBsZXQgbGFuZ3VhZ2VNZ3I6IElGLklMYW5ndWFnZU1hbmFnZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuovku7bnrqHnkIblmags55W25YmN57aB5a6a55qE5LqL5Lu2LOS6i+S7tuaVuOmHj1xyXG4gICAgICogQHJldHVybiB7ZmNjLklGLklFdmVudE1hbmFnZXJ9XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBsZXQgZXZlbnRNZ3I6IElGLklFdmVudE1hbmFnZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDos4fmupDnrqHnkIbogIUgOiDliqDovInos4fmupAs5L+d5a2Y6LOH5rqQLOeNsuWPlueVtuWJjeWKoOi8iemAsuW6plxyXG4gICAgICogQHJldHVybiB7ZmNjLklGLklMb2FkUmVzTWFuYWdlcn1cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGxldCBsb2FkTWdyOiBJRi5JTG9hZFJlc01hbmFnZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgYrmiLLmtYHnqIvnrqHnkIblmaggOiDnrqHnkIbnlbbliY3mtYHnqIss5Z+36KGM55W25YmN5rWB56iLXHJcbiAgICAgKiBAcmV0dXJuIHtmY2MuSUYuSVByb2Nlc3NNYW5hZ2VyfVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgbGV0IHByb2Nlc3NNZ3I6IElGLklQcm9jZXNzTWFuYWdlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWgtOaZr+euoeeQhuWZqCA6IOiHquWLleWMuemFjemBiuaIsuWvrOmrmCznm6Pogb3nlbbliY3njqnlrrbpgYrnjqnmqKHlvI8o5qmr5byPb3Lnm7TlvI8pXHJcbiAgICAgKiBAcmV0dXJuIHtmY2MuSUYuSVNjZW5lTWFuYWdlcn1cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGxldCBzY2VuZU1ncjogSUYuSVNjZW5lTWFuYWdlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiAgeiZjuapn+euoeeQhuWZqCA6IOeuoeeQhuiAgeiZjuapn+aoo+W8jyzln7fooYzpgJ/luqYs5pWI5p6cXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBsZXQgc2xvdFN0eWxlTWdyOiBJRi5JU2xvdFN0eWxlTWFuYWdlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiHquiogue+qemAmuefpeS6i+S7tueuoeeQhuWZqCznlbbliY3ntoHlrprnmoTpgJrnn6Us6YCa55+l5pW46YePXHJcbiAgICAgKiBAcmV0dXJuIHtmY2MuSUYuSU5vdGlmaWNhdGlvbk1hbmFnZXI8VD59XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBub3RpZmljYXRpb25NZ3I8VCBleHRlbmRzIElGLklCYXNlTm90aWZpY2F0aW9uPigpOiBJRi5JTm90aWZpY2F0aW9uTWFuYWdlcjxUPiB7XHJcbiAgICAgICAgcmV0dXJuIE5vdGlmaWNhdGlvbk1hbmFnZXIuaW5zdGFuY2U8VD4oKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOaTtOWxleiHs+WFqOWfnyxjb2Nvc+imj+WumlxyXG4gKiBAdHlwZSB7ZmNjfVxyXG4gKi9cclxuZ2xvYmFsVGhpcy5mY2MgPSBmY2M7XHJcblxyXG4vKipcclxuICog5qGG5p6254mI5pysXHJcbiAqIEB0eXBlIHtzdHJpbmd9XHJcbiAqL1xyXG5nbG9iYWxUaGlzLkZDQ19WRVJTSU9OID0gXCIxLjAuMVwiO1xyXG4iLCJuYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIGdsb2JhbCB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAgICAgKiBARGVzY3JpcHRpb24g5YWx55SoOuaMiemIlemhnuaWueazlVxyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGNsYXNzIEJ1dHRvbiB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5bCN6KmyYnV0dG9u5re75Yqg55uj6IG95LqL5Lu2XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Y2MuQnV0dG9ufSBidXR0b25Ob2RlIC0g5oyJ6YiV57WE5Lu2XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIC0g6Kmy5oyJ6YiV57aB5a6a55qE5pa55rOV5ZCN56ixXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBzZWxmIC0g6Kmy5pa55rOV5a2Y5Zyo55qE5L2N572uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBjdXN0b21FdmVudERhdGEgLSDlm57lgrPlgLxcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHN0YXRpYyBhZGRCdXR0b25FdmVudChidXR0b25Ob2RlOiBjYy5CdXR0b24sIG1ldGhvZE5hbWU6IHN0cmluZywgc2VsZjogYW55LCBjdXN0b21FdmVudERhdGE/OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIC8v5omL5YuV5re75Yqg55uj6IG95LqL5Lu2XHJcbiAgICAgICAgICAgICAgICBsZXQgdGhpc05vZGUgPSBzZWxmLm5vZGU7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2NyaXB0TmFtZSA9IGNjLmpzLmdldENsYXNzTmFtZShzZWxmKTtcclxuICAgICAgICAgICAgICAgIGxldCBjbGlja19ldmVudCA9IG5ldyBjYy5Db21wb25lbnQuRXZlbnRIYW5kbGVyKCk7IC8v57Wm5LqI5LiA5YCL5LqL5Lu2XHJcbiAgICAgICAgICAgICAgICBjbGlja19ldmVudC50YXJnZXQgPSB0aGlzTm9kZTsgLy/niLbpoZ7nr4Dpu54s5rOo5oSP54i26aGec2l6ZeS4jeiDveeCuigwLDApXHJcbiAgICAgICAgICAgICAgICBjbGlja19ldmVudC5jb21wb25lbnQgPSBzY3JpcHROYW1lOyAvL+ipsueItumhnueahHNjcmlwdFxyXG4gICAgICAgICAgICAgICAgY2xpY2tfZXZlbnQuaGFuZGxlciA9IG1ldGhvZE5hbWU7IC8v5bCN5LqL5Lu25re75YqgZnVuY3Rpb24s5ZCN56ix5piv5a2X5LiyXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VzdG9tRXZlbnREYXRhIHx8IGN1c3RvbUV2ZW50RGF0YSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tfZXZlbnQuY3VzdG9tRXZlbnREYXRhID0gY3VzdG9tRXZlbnREYXRhOyAvL+a3u+WKoOWbnuiqv+WPg+aVuFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5ub2RlLmNsaWNrRXZlbnRzID0gW2NsaWNrX2V2ZW50XTsvL+S4gOasoea3u+WKoOWkmuWAi+ebo+iBveS6i+S7tlxyXG4gICAgICAgICAgICAgICAgYnV0dG9uTm9kZS5jbGlja0V2ZW50cy5wdXNoKGNsaWNrX2V2ZW50KTsgLy/nlbbpu57mk4rlvozop7jnmbzkuovku7ZcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOemgeeUqGJ1dHRvblxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2NjLkJ1dHRvbn0gYnV0dG9uIC0g5oyJ6YiV57WE5Lu2XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzdGF0aWMgZGlzYWJsZUJ1dHRvbihidXR0b246IGNjLkJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmludGVyYWN0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5ZWf55SoYnV0dG9uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Y2MuQnV0dG9ufWJ1dHRvbiAtIOaMiemIlee1hOS7tlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc3RhdGljIGVuYWJsZUJ1dHRvbihidXR0b246IGNjLkJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmludGVyYWN0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlsI3oqbJub2RlIOa3u+WKoCBUT1VDSF9TVEFSVCDkuovku7ZcclxuICAgICAgICAgICAgICogQHBhcmFtIHtjYy5Ob2RlfSBub2RlIC0g6KaB57aB5a6a55qE5LqL5Lu254mp5Lu2XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCAtIOinuOeZvOS6i+S7tueahOaWueazlVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3RoaXN9IHNlbGYgLSDoqbLmlrnms5XlrZjlnKjnmoTkvY3nva5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB1c2VDYXB0dXJlIDogXCLmmK/lkKbpl5zplonlpJrpu57op7jmjqflip/og71cIlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc3RhdGljIGFkZFRvdWNoU3RhcnRFdmVudChub2RlOiBjYy5Ob2RlLCBtZXRob2Q6IEZ1bmN0aW9uLCBzZWxmOiBhbnksIHVzZUNhcHR1cmU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCBtZXRob2QsIHNlbGYsIHVzZUNhcHR1cmUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5bCN6Kmybm9kZSDpl5zplokgVE9VQ0hfU1RBUlQg5LqL5Lu2XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZSAtIOimgee2geWumueahOS6i+S7tueJqeS7tlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2QgLSDop7jnmbzkuovku7bnmoTmlrnms5VcclxuICAgICAgICAgICAgICogQHBhcmFtIHt0aGlzfSBzZWxmIC0g6Kmy5pa55rOV5a2Y5Zyo55qE5L2N572uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlQ2FwdHVyZSAtIOaYr+WQpumXnOmWieWkmum7nuinuOaOp+WKn+iDvVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc3RhdGljIG9mZlRvdWNoU3RhcnRFdmVudChub2RlOiBjYy5Ob2RlLCBtZXRob2Q6IEZ1bmN0aW9uLCBzZWxmOiBhbnksIHVzZUNhcHR1cmU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgbWV0aG9kLCBzZWxmLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgZ2xvYmFsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOWFseeUqDpQcmVmYWLmlrnms5VcclxuICAgICAgICAgKiBARGF0ZSAyMDIxLTA0LTE0IOS4i+WNiCAyMDoyNFxyXG4gICAgICAgICAqIEBWZXJzaW9uIDEuMVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4cG9ydCBjbGFzcyBQcmVmYWIge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWwi+ioquipsm5vZGXlupXkuIvkuIDlsaTnr4Dpu57lhafmiYDmnInnianku7ZcclxuICAgICAgICAgICAgICogQHBhcmFtIHtjYy5Ob2RlfSBub2RlIC0g54i256+A6bueXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge01hcDxzdHJpbmcsIGNjLk5vZGU+fSAtIE1hcChrZXk6IOipsuWtkOmhnm5vZGUgVVJMLCB2YWx1ZTroqbLlrZDpoZ5ub2Rl54mp5Lu2KVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc3RhdGljIGdldE5vZGVPbmVDaGlsZHJlbihub2RlOiBjYy5Ob2RlKTogTWFwPHN0cmluZywgY2MuTm9kZT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFsbE5vZGU6IE1hcDxzdHJpbmcsIGNjLk5vZGU+ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuID0gbm9kZS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBuLmNoaWxkcmVuQ291bnQ7IGorKykgey8v5bCL6Kiqbm9kZeW6leS4i+aYr+WQpuacieWtkOevgOm7nlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxOb2RlLnNldChub2RlLmNoaWxkcmVuW2ldLm5hbWUsIG4pOy8vdmlld1vlrZDnr4Dpu57kvY3nva4s5a2Q56+A6bue5bGs5oCnXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBhbGxOb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5bCL6Kiq6Kmybm9kZeW6leS4i+WFqeWxpOWtkOevgOm7nlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge25vZGUgOiDnianku7Z9IG5vZGUgLSDniLbnr4Dpu55cclxuICAgICAgICAgICAgICogQHJldHVybiB7TWFwPHN0cmluZywgY2MuTm9kZT59IC0gTWFwKGtleTog6Kmy5a2Q6aGebm9kZSBVUkwsIHZhbHVlOuipsuWtkOmhnm5vZGXnianku7YpXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0Tm9kZVRvd0NoaWxkcmVuKG5vZGU6IGNjLk5vZGUpOiBNYXA8c3RyaW5nLCBjYy5Ob2RlPiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWxsTm9kZTogTWFwPHN0cmluZywgY2MuTm9kZT4gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW5Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBub2RlLmNoaWxkcmVuW2ldOy8v5bCH6Kmy54i256+A6bue5bGs5oCn5YSy5a2YXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBuLmNoaWxkcmVuW2ldLm5hbWU7Ly/lsIfniLbnr4Dpu57kvY3nva7lhLLlrZhcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBuLmNoaWxkcmVuQ291bnQ7IGorKykgey8v5bCL6Kiqbm9kZeW6leS4i+aYr+WQpuacieWtkOevgOm7nlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnZpZXdbcm9vdC5jaGlsZHJlbltpXS5uYW1lXSA9IG47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09IDApIHsvL+aykuacieWtkOevgOm7nlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTm9kZS5zZXQobi5jaGlsZHJlbltpXS5uYW1lLCBuKTsvL3ZpZXdb54i256+A6bue5L2N572uLOeItuevgOm7nuWxrOaAp11cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsvL+acieWtkOevgOm7nlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCArPSBcIi9cIiArIG4uY2hpbGRyZW5baiAtIDFdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxOb2RlLnNldChwYXRoLCBuLmNoaWxkcmVuW2ogLSAxXSk7Ly92aWV3W+WtkOevgOm7nuS9jee9rizlrZDnr4Dpu57lsazmgKddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gbi5jaGlsZHJlbltpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbE5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJuYW1lc3BhY2UgZmNjIHtcclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIHR5cGUge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOmBiuaIsueVtuS4i+eLgOaFi1xyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGVudW0gR2FtZVN0YXRlVHlwZSB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog54Sh54uA5oWLLOW+heapn+eLgOaFiy4uLlxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7R2FtZVN0YXRlVHlwZS5TVEFOREJZfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgU1RBTkRCWSA9ICdTVEFOREJZJyxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDkuIDoiKzni4DmhYvpgYrmiLLkuK0uLi4uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtHYW1lU3RhdGVUeXBlLlBMQVlJTkd9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBQTEFZSU5HID0gJ1BMQVlJTkcnLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOi0j+WIhumhr+ekuuS4rS4uLi5cclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy50eXBlLkdhbWVTdGF0ZVR5cGUuV0lOSU5HfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgV0lOSU5HID0gXCJXSU5JTkdcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlhY3osrvpgYrmiLLkuK0uLi4uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtHYW1lU3RhdGVUeXBlLkZSRUVJTkd9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBGUkVFSU5HID0gJ0ZSRUVJTkcnLFxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBBdXRob3IgWElBTy1MSS1QSU5cclxuICAgICAgICAgKiBARGVzY3JpcHRpb24g5qGG5p626aCQ6Kit55qE5rWB56iLXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNC0xNCDkuIvljYggMjA6MjRcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgZW51bSBQcm9jZXNzVHlwZSB7XHJcbiAgICAgICAgICAgIEZSRUUgPSAnRlJFRScsXHJcbiAgICAgICAgICAgIE5PUk1BTCA9ICdOT1JNQUwnLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vRXJyb3IvRW51bS9FcnJvclR5cGUudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9FbnVtL0dhbWVTdGF0ZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lQcm9jZXNzTWFuYWdlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0lHYW1lUHJvY2Vzc0ZhY3RvcnkudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNjIHtcclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOa1geeoi+W3peW7oCA6IOabtOaWsCznjbLlj5Ys5Yqg5YWlLOiuiuabtOetiS4uIOazqOaEjzrmraQgY2xhc3Mg55SxIG1hbmFnZXIg5a+m5L6L5YyWLOWmguaenOeEoeeJueauiumcgOaxgizoq4vli7/kvb/nlKhcclxuICAgICAqIEBEYXRlIDIwMjEtMDUtMTMg5LiL5Y2IIDA2OjE3XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEdhbWVQcm9jZXNzRmFjdG9yeSBpbXBsZW1lbnRzIElGLklHYW1lUHJvY2Vzc0ZhY3Rvcnkge1xyXG5cclxuICAgICAgICBwcml2YXRlIGdhbWVNYW5hZ2VyOiBJRi5JUHJvY2Vzc01hbmFnZXI7ICAgICAgICAgICAgICAgICAgICAvL+mBiuaIsuaOp+WItuWZqCzpm5nlkJHntoHlrppcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHByb2Nlc3NUb01hcDogTWFwPHN0cmluZywgSUYuSVByb2Nlc3M+OyAgICAvL+aJgOaciea1geeoi+a3u+WKoOS/neWtmFxyXG4gICAgICAgIHB1YmxpYyBwcm9jZXNzOiBJRi5JUHJvY2VzczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v55W25YmN5L2/55So55qE5rWB56iLXHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGdhbWVNYW5hZ2VyOiBJRi5JUHJvY2Vzc01hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lTWFuYWdlciA9IGdhbWVNYW5hZ2VyO1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NUb01hcCA9IG5ldyBNYXA8c3RyaW5nLCBJRi5JUHJvY2Vzcz4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+a1geeoiyzln7fooYzntoHlrprnmoTmtYHnqIvlhafnmoRvbkNyZWF0ZeaWueazlVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgZmNjLnR5cGUuUHJvY2Vzc1R5cGV9IHByb2Nlc3NOYW1lIC0g5oyH5a6a5Y+q6KaB5Yid5aeL5ZOq5YCL5rWB56iLIGNsYXNzLOWmguaenOS9v+eUqOeEoeWPg+aWueazlSzlsIfmnIPliJ3lp4vljJbmiYDmnInntoHlrprnmoTmtYHnqItcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbml0UHJvY2Vzcyhwcm9jZXNzTmFtZT86IHN0cmluZyB8IGZjYy50eXBlLlByb2Nlc3NUeXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByb2Nlc3NUb01hcC5oYXMocHJvY2Vzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRXJyb3JNYW5hZ2VyLmluc3RhbmNlLmV4ZWN1dGVFcnJvcih0eXBlLkVycm9yVHlwZS5QUk9DRVNTX0ZXLCBcIuafpeaJvuS4jeWIsOipsua1geeoiyzoq4vnorroqo3mmK/lkKblt7LntoHlrprpgLLmoYbmnrbkuK1cIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1RvTWFwLmdldChwcm9jZXNzTmFtZSkuZXhlY3V0aW9uQ29udGVudC5vbkNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMucHJvY2Vzc1RvTWFwLnZhbHVlcygpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZXhlY3V0aW9uQ29udGVudC5vbkNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5re75Yqg5rWB56iLXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBHYW1lVHlwZX0gcHJvY2Vzc05hbWUgLSDlj6/kvb/nlKjpoJDoqK0gUHJvY2Vzc1R5cGUg5oiW6Ieq6KiC576p5rWB56iL5ZCN56ixXHJcbiAgICAgICAgICogQHBhcmFtIHtJUHJvY2Vzc30gcHJvY2VzcyAtIOa1geeoiyBjbGFzc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFByb2Nlc3MocHJvY2Vzc05hbWU6IHN0cmluZyB8IHR5cGUuUHJvY2Vzc1R5cGUsIHByb2Nlc3M6IElGLklQcm9jZXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1RvTWFwLnNldChwcm9jZXNzTmFtZSwgcHJvY2Vzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnjbLlj5boqbLmtYHnqItcclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZyB8IEdhbWVUeXBlfSBwcm9jZXNzTmFtZSAtIOWPr+S9v+eUqOmgkOiorSBQcm9jZXNzVHlwZSDmiJboh6roqILnvqnmtYHnqIvlkI3nqLFcclxuICAgICAgICAgKiBAcmV0dXJucyB7SVByb2Nlc3N9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0UHJvY2Vzcyhwcm9jZXNzTmFtZTogc3RyaW5nIHwgdHlwZS5Qcm9jZXNzVHlwZSk6IElGLklQcm9jZXNzIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1RvTWFwLmdldChwcm9jZXNzTmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmi7/lj5blhajpg6jlt7LntpPntoHlrprnmoTmtYHnqItcclxuICAgICAgICAgKiBAcmV0dXJuIHtNYXA8c3RyaW5nLCBmY2MuSUYuSVByb2Nlc3M+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEFsbFByb2Nlc3MoKTogTWFwPHN0cmluZywgSUYuSVByb2Nlc3M+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1RvTWFwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pS56K6K5rWB56iLXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBHYW1lVHlwZX0gcHJvY2Vzc05hbWUgLSDlj6/kvb/nlKjpoJDoqK0gUHJvY2Vzc1R5cGUg5oiW6Ieq6KiC576p5rWB56iL5ZCN56ixXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hhbmdlUHJvY2Vzcyhwcm9jZXNzTmFtZTogc3RyaW5nIHwgdHlwZS5Qcm9jZXNzVHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvY2Vzc1RvTWFwLmhhcyhwcm9jZXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIEVycm9yTWFuYWdlci5pbnN0YW5jZS5leGVjdXRlRXJyb3IodHlwZS5FcnJvclR5cGUuUFJPQ0VTU19GVywgYCR7cHJvY2Vzc05hbWV9IOaQnOWwi+S4jeWIsOatpOa1geeoiyzoq4vmqqLmn6XmtYHnqIvmmK/lkKbmt7vliqBgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3MgPSB0aGlzLnByb2Nlc3NUb01hcC5nZXQocHJvY2Vzc05hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Z+36KGM5rWB56iLXHJcbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXN5bmMgdXNlUHJvY2VzcygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5Z+36KGM6ICB6JmO5qmf5Li76KaB5pa55rOVKOWfuuekjumhnilcclxuICAgICAqIEBEYXRlIDIwMjEtMTAtMTgg5LiL5Y2IIDIwOjI0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFCYXNlU2xvdFRlbXBsYXRlPFQgZXh0ZW5kcyBmY2MuSUYuSUJhc2VTbG90U2V0dGluZz4gaW1wbGVtZW50cyBmY2MuSUYuSUJhc2VTbG90VGVtcGxhdGU8VD4ge1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3Ioc3R5bGVEYXRhOiBULCBjb25maWdNYW5hZ2VyOiBmY2MuSUYuSUNvbmZpZ01hbmFnZXIpIHt9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+WMluipsui8quaJgOacieeLgOaFi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFic3RyYWN0IGluaXRpYWxpemVTdGF0ZSgpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBMb29wIOiAgeiZjuapn+aWueazlVxyXG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWJzdHJhY3QgcnVuU2xvdEFuaW1hdGlvbigpOiBQcm9taXNlPHZvaWQ+O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDllZ/li5XogIHomY7mqZ/mmYLpgY7loLTli5Xnlavmlrnms5VcclxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFic3RyYWN0IHNpbmVJblNsb3QoKTogUHJvbWlzZTx2b2lkPjtcclxuICAgIH1cclxufVxyXG4iLCJuYW1lc3BhY2UgZmNje1xyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIOiVreeri+WTgVxyXG4gICAgICogQERlc2NyaXB0aW9uIOmAmueUqOWwjeixoeaxoFxyXG4gICAgICogQERhdGUgMjAyMS0xMC0yOSDkuIvljYggMDI6MzRcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgT2JqZWN0UG9vbDxUPntcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBidWZmTGlzdDogVFtdID0gW11cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBrZXk6IHN0cmluZztcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQoZnVuYzogKCkgPT4gVCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmTGlzdC5sZW5ndGggPiAwID8gdGhpcy5idWZmTGlzdC5zaGlmdCgpIDogZnVuYygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHV0KG9iajogVCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZMaXN0LnB1c2gob2JqKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2l6ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZkxpc3QubGVuZ3RoXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZMaXN0Lmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9PYmplY3RQb29sLnRzXCIgLz5cclxubmFtZXNwYWNlIGZjYyB7XHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3Ig6JWt56uL5ZOBXHJcbiAgICAgKiBARGVzY3JpcHRpb24g5bCN6LGh5rGg566h55CG5ZmoXHJcbiAgICAgKiBARGF0ZSAyMDIxLTEwLTI5IOS4i+WNiCAwMjozM1xyXG4gICAgICogQFZlcnNpb24gMS4wXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBQb29sTWFuYWdlciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogUG9vbE1hbmFnZXJcclxuICAgICAgICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBQb29sTWFuYWdlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgbWFwOiBNYXA8c3RyaW5nLCBPYmplY3RQb29sPGFueT4+ID0gbmV3IE1hcDxzdHJpbmcsIE9iamVjdFBvb2w8YW55Pj4oKTtcclxuXHJcbiAgICAgICAgZ2V0KGtleTogYW55LCBmdW5jOiAoKSA9PiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1hcC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgbmV3IE9iamVjdFBvb2woa2V5KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSkuZ2V0KGZ1bmMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdXQoa2V5OiBhbnksIG9iajogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZ2V0KGtleSkucHV0KG9iailcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2l6ZShrZXk6IHN0cmluZykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXAuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KS5zaXplKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm5hbWVzcGFjZSBmY2N7XHJcbiAgICAvKipcclxuICAgICAqIEBBdXRob3Ig6JWt56uL5ZOBXHJcbiAgICAgKiBARGVzY3JpcHRpb24gVE9ET1xyXG4gICAgICogQERhdGUgMjAyMS0xMC0yOSDkuIvljYggMDI6MzZcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgVFNPYmplY3RQb29sPFQ+IHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBwb29sOmFueSBbXSA9IFtdXHJcblxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2xhc3NOYW1lOnN0cmluZztcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoY2xhc3NOYW1lOnN0cmluZyx0eXBlOiB7IG5ldygpOiBUIDt9LGNvdW50Om51bWJlciA9IDApe1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvdW50OyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvb2wucHVzaChuZXcgdHlwZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Q2xhc3NOYW1lKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzTmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldDxUPih0eXBlOiB7IG5ldygpOiBUIDt9ICk6IFQge1xyXG4gICAgICAgICAgICBsZXQgZ28gPSB0aGlzLnBvb2wubGVuZ3RoID4gMCA/IHRoaXMucG9vbC5zaGlmdCgpIDogbnVsbDtcclxuICAgICAgICAgICAgaWYoIWdvKXtcclxuICAgICAgICAgICAgICAgIGdvID0gbmV3IHR5cGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZ287XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdXQoaW5zdGFuY2U6VCl7XHJcbiAgICAgICAgICAgIHRoaXMucG9vbC5wdXNoKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhcigpe1xyXG4gICAgICAgICAgICB0aGlzLnBvb2wgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9UU09iamVjdFBvb2wudHNcIiAvPlxyXG5uYW1lc3BhY2UgZmNje1xyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIOiVreeri+WTgVxyXG4gICAgICogQERlc2NyaXB0aW9uIFRPRE9cclxuICAgICAqIEBEYXRlIDIwMjEtMTAtMjkg5LiL5Y2IIDAyOjM0XHJcbiAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIFRTUG9vbE1hbmFnZXIge1xyXG4gICAgICAgIC8v5a+56LGh5rGg6KGoXHJcbiAgICAgICAgcHJpdmF0ZSBwb29sczogTWFwPHN0cmluZywgVFNPYmplY3RQb29sPGFueT4+ID0gbmV3IE1hcDxzdHJpbmcsIFRTT2JqZWN0UG9vbDxhbnk+PigpO1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFRTUG9vbE1hbmFnZXI7XHJcblxyXG4gICAgICAgIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogVFNQb29sTWFuYWdlciB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IFRTUG9vbE1hbmFnZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0PFQ+KGtleTogc3RyaW5nLCB0eXBlOiB7IG5ldygpOiBUOyB9LCBjb3VudDogbnVtYmVyID0gMSk6IHZvaWQge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucG9vbHNba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb29scy5zZXQoa2V5LCBuZXcgVFNPYmplY3RQb29sKGtleSwgdHlwZSwgY291bnQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635b6X6KKr6ZSA5q+B55qE5a+56LGhXHJcbiAgICAgICAgICogQHBhcmFtIGtleVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDxUPihrZXk6IHN0cmluZywgdHlwZTogeyBuZXcoKTogVDsgfSwgY291bnQ6IG51bWJlciA9IDEpOiBUIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnBvb2xzLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvb2xzLnNldChrZXksbmV3IFRTT2JqZWN0UG9vbChrZXksIHR5cGUsIGNvdW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9vbHMuZ2V0KGtleSkuZ2V0KHR5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHV0KGtleTogc3RyaW5nLCBvYmopIHtcclxuICAgICAgICAgICAgbGV0IHBvb2wgPSB0aGlzLnBvb2xzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAocG9vbCkge1xyXG4gICAgICAgICAgICAgICAgcG9vbC5wdXQob2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSB0eXBlIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiBzZXJ2ZXIg5Zue5YKz5LqL5Lu2IOWei1xyXG4gICAgICAgICAqIEBEYXRlIDIwMjEtMDQtMTQg5LiL5Y2IIDIwOjI0XHJcbiAgICAgICAgICogQFZlcnNpb24gMS4xXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwb3J0IGVudW0gU2VydmVyRXZlbnRUeXBlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqICDkuIDoiKznjbLnjY7lm57lgrNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEJFVF9SRVNVTFQgPSBcIkJFVF9SRVNVTFRcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlhY3osrvmqKHlvI/njbLnjY5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEZSRUVfU1BJTl9SRVNVTFQgPSBcIkZSRUVfU1BJTl9SRVNVTFRcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDlupXlsaTpgLLpgYrmiLIg6YCa55+lTG9hZGluZ+mggemdoiDlj6/ku6Xpoa/npLrkuLvpgYrmiLLloLTmma9cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIENBTl9QTEFZX0dBTUUgPSBcIkNBTl9QTEFZX0dBTUVcIixcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnjbLlj5bpgYrmiLLmrbflj7LntZDmnpxcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEdFVF9HQU1FX0hJU1RPUllfUkVTVUxUID0gXCJHRVRfR0FNRV9ISVNUT1JZX1JFU1VMVFwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOeNsuWPlumBiuaIsuelpeWWrlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgR0VUX0hJU1RPUllfREVUQUlMX1JFU1VMVCA9IFwiR0VUX0hJU1RPUllfREVUQUlMX1JFU1VMVFwiLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOipsuWxgOmBiuaIsuW6j+iZn1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgR1JPVVBfSUQgPSBcIkdST1VQX0lEXCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6YCy5YWl6YGK5oiy5b6M5Yid5aeL6LOH6KiKXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBUQUJMRV9JTkZPID0gXCJUQUJMRV9JTkZPXCIsXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5ZCE56iu6Yyv6Kqk6KiK5oGvXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBXQVJOSU5HID0gXCJXQVJOSU5HXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBBQlMge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIFhJQU8tTEktUElOXHJcbiAgICAgICAgICogQERlc2NyaXB0aW9uIOaOqOaSpeaMgeacieiAhSzlj6/ntoHlrprmlrzoqbLmjqjmkq3ogIXlupXkuIss55W25pyJ5LqL5Lu25o6o5pKt5pmCLOWwh+acg+aOqOaSree1puipsmNsYXNzXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNi0xMSDkuIvljYggMDU6MDNcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQUJhc2VPYnNlcnZlciBpbXBsZW1lbnRzIElGLklCYXNlT2JzZXJ2ZXIge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOaYr+WQpuW4uOmnkOaOqOaSpVxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHByaXZhdGUgX2lzUGVybWFuZW50OiBib29sZWFuO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOaOqOaSpeS6i+S7tuaMh+WQkeeahCB0aGlzXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHthbnl9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9zZWxmOiBhbnk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6L+U5Zue5pa55rOVXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHsoLi4uYW55KSA9PiB2b2lkfSAtIOato+eiuuWPg+aVuOaVuOmHj+eUseWtkOmhnuWvpuePvlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfY2FsbEZ1bjogKC4uLmFueSkgPT4gdm9pZDtcclxuXHJcbiAgICAgICAgICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihjYWxsRnVuOiAoLi4uYW55KSA9PiB2b2lkLCBzZWxmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Blcm1hbmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZiA9IHNlbGY7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsRnVuID0gY2FsbEZ1bjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOaOqOaSreS6i+S7tlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gYW55IC0g5q2j56K65Y+D5pW45pW46YeP55Sx5a2Q6aGe5a+m54++XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgcHVzaE5vdGlmaWNhdGlvbiguLi5hbnkpOiB2b2lkIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxGdW4uY2FsbCh0aGlzLl9zZWxmLCAuLi5hbnkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5piv5ZCm5bi46aeQ5o6o5pKlXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQgaXNQZXJtYW5lbnQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNQZXJtYW5lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmmK/lkKbluLjpp5DmjqjmkqVcclxuICAgICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc2V0IGlzUGVybWFuZW50KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Blcm1hbmVudCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOS7u+S9lemBiuaIsueahuWPr+eUqOa1geeoi1xyXG4gICAgICogQERhdGUgMjAyMS0wNS0xNCDkuIvljYggMDM6MDdcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgR2FtZVByb2Nlc3MgaW1wbGVtZW50cyBJRi5JR2FtZVByb2Nlc3Mge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkv53lrZjkvb/nlKjogIXntoHlrprnmoTmtYHnqIvmlrnms5VcclxuICAgICAgICAgKiBAdHlwZSB7U2V0PEZ1bmN0aW9uPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3Byb2Nlc3M6IFNldDwoKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZD47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa1geeoi+WuueWZqFxyXG4gICAgICAgICAqIEB0eXBlIHtJR2FtZVByb2NlZHVyZUV4ZWN1dGlvbkNvbnRhaW5lcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2V4ZWN1dGlvbkNvbnRlbnQ6IElGLklHYW1lUHJvY2VkdXJlRXhlY3V0aW9uQ29udGVudDtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29udGFpbmVyOiBJRi5JR2FtZVByb2NlZHVyZUV4ZWN1dGlvbkNvbnRlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXhlY3V0aW9uQ29udGVudCA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2VzcyA9IG5ldyBTZXQ8KCkgPT4gUHJvbWlzZTx2b2lkPj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWft+ihjOa1geeoi1xyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25FeGVjdXRpb24oKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzLmFkZCh0aGlzLl9leGVjdXRpb25Db250ZW50Lm9uRXhlY3V0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5rWB56iL57WQ5p2f5pmCXHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkVuZCgpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzcy5hZGQodGhpcy5fZXhlY3V0aW9uQ29udGVudC5vbkVuZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pu05o+b5rWB56iLXHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkNoYW5nZVN0YXR1cygpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzcy5hZGQodGhpcy5fZXhlY3V0aW9uQ29udGVudC5vbkNoYW5nZVN0YXR1cyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5bCH5omA5pyJ57aB5a6a55qE5rWB56iL5pa55rOV5L6d5bqP5Z+36KGMXHJcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXN5bmMgc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG1ldGhvZCBvZiB0aGlzLl9wcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBtZXRob2QuYXBwbHkodGhpcy5fZXhlY3V0aW9uQ29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBwcm9jZXNzKCk6IFNldDwoKSA9PiAoUHJvbWlzZTx2b2lkPiB8IHZvaWQpPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGV4ZWN1dGlvbkNvbnRlbnQoKTogZmNjLklGLklHYW1lUHJvY2VkdXJlRXhlY3V0aW9uQ29udGVudCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRpb25Db250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIm5hbWVzcGFjZSBmY2Mge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciBYSUFPLUxJLVBJTlxyXG4gICAgICogQERlc2NyaXB0aW9uIOiAgeiZjuapn+a1geeoi1xyXG4gICAgICogQERhdGUgMjAyMS0wNS0xNCDkuIvljYggMDM6MDdcclxuICAgICAqIEBWZXJzaW9uIDEuMFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgU2xvdEdhbWVQcm9jZXNzIGltcGxlbWVudHMgSUYuSVNsb3RHYW1lUHJvY2VzcyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5L+d5a2Y5L2/55So6ICF57aB5a6a55qE5rWB56iL5pa55rOVXHJcbiAgICAgICAgICogQHR5cGUge1NldDxGdW5jdGlvbj59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9wcm9jZXNzOiBTZXQ8KCkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa1geeoi+WuueWZqFxyXG4gICAgICAgICAqIEB0eXBlIHtJU2xvdFByb2NlZHVyZUV4ZWN1dGlvbkNvbnRhaW5lcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2V4ZWN1dGlvbkNvbnRhaW5lcjogSUYuSVNsb3RQcm9jZWR1cmVFeGVjdXRpb25Db250ZW50O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IElGLklTbG90UHJvY2VkdXJlRXhlY3V0aW9uQ29udGVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9leGVjdXRpb25Db250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MgPSBuZXcgU2V0KCk7ICAgICAgICAgICAgICAvL+WIneWni+WMlizlrZjmlL7opoHln7fooYznmoTmlrnms5VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneWni+WMliA6IOiHquiogumWi+Wni+mBiuaIsuWJjeeahOaViOaenFxyXG4gICAgICAgICAqIEBleGFtcGxlIC0g5oyJ6YiVLOiDjOaZr+KApuetiVxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG9uQ3VzdG9taXplU3RhcnQoKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzLmFkZCh0aGlzLl9leGVjdXRpb25Db250YWluZXIub25DdXN0b21pemVTdGFydCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiAgeiZjuapn+mBi+ihjOWJjSzmvLjlhaXmlYjmnpxcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBvblNpbmVJbkdyaWQoKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzLmFkZCh0aGlzLl9leGVjdXRpb25Db250YWluZXIub25TaW5lSW5HcmlkKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6YGK5oiy5oyB57qM5Z+36KGM5YuV5L2cXHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgb25SdW5uaW5nKCk6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzcy5hZGQodGhpcy5fZXhlY3V0aW9uQ29udGFpbmVyLm9uUnVubmluZyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiHquiogue+qeWBnOatouW+jOS6i+S7tlxyXG4gICAgICAgICAqIEBleGFtcGxlIC0g5pu05o+b6Z+z5qiCLOabtOaPm+iDjOaZr+WcluahiCzmoKHmraPlm57mrbjmtYHnqIvni4DmhYsuLi7nrYlcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBvbkN1c3RvbWl6ZUVuZCgpOiB0aGlzIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzcy5hZGQodGhpcy5fZXhlY3V0aW9uQ29udGFpbmVyLm9uQ3VzdG9taXplRW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDpoa/npLrntZDmnpxcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBvblNob3dBbnN3ZXIoKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzLmFkZCh0aGlzLl9leGVjdXRpb25Db250YWluZXIub25TaG93QW5zd2VyKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pu05o+b5rWB56iLXHJcbiAgICAgICAgICogQGV4YW1wbGUgLSBmY2MucHJvY2Vzc01hbmFnZXIuY2hhbmdlUHJvY2VzcyhHYW1lVHlwZS5OT1JNQUwpO1xyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25DaGFuZ2VTdGF0dXMoKTogdGhpcyB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MuYWRkKHRoaXMuX2V4ZWN1dGlvbkNvbnRhaW5lci5vbkNoYW5nZVN0YXR1cyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6ZaL5aeL5Z+36KGMXHJcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXN5bmMgc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG1ldGhvZCBvZiB0aGlzLl9wcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBtZXRob2QuYXBwbHkodGhpcy5fZXhlY3V0aW9uQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGV4ZWN1dGlvbkNvbnRlbnQoKTogZmNjLklGLklTbG90UHJvY2VkdXJlRXhlY3V0aW9uQ29udGVudCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRpb25Db250YWluZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgcHJvY2VzcygpOiBTZXQ8KCkgPT4gKFByb21pc2U8dm9pZD4gfCB2b2lkKT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2VzcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibmFtZXNwYWNlIGZjYyB7XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBBQlMge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAQXV0aG9yIOiVreeri+WTgVxyXG4gICAgICAgICAqIEBEZXNjcmlwdGlvbiDmiYDmnIlTTE9U6Kit5a6a5qqU55qE54i26aGeXHJcbiAgICAgICAgICogQERhdGUgMjAyMS0wNi0yOCDkuIvljYggMDY6NDJcclxuICAgICAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQUJhc2VTbG90U2V0dGluZyBpbXBsZW1lbnRzIElGLklCYXNlU2xvdFNldHRpbmcge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOipsuaoo+W8j+aomeexpFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfdGFnOiBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6Z2e5Yqg6YCf5qih5byPLOavj+WIl+WBnOatoueahOaZgumWk+mWk+agvFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfY29sdW1uSW50ZXJ2YWxUaW1lOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5omA5pyJ5qC85a2QLOWft+ihjOWLleeVq+eahOaJgOacieagvOWtkFxyXG4gICAgICAgICAgICAgKiBNYXA85YiX5pW4LOipsuWIl+aJgOacieagvOWtkD5cclxuICAgICAgICAgICAgICogQHR5cGUge01hcDxudW1iZXIsIEFycmF5PGNjLk5vZGU+Pn1cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHByaXZhdGUgX2dyaWROb2RlVG9NYXA6IE1hcDxudW1iZXIsIEFycmF5PGNjLk5vZGU+PjtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDopoHln7fooYzovKrmkq3li5Xnlass6L2J5YuV6ICB6JmO5qmf55qE5omA5pyJ5YiXIGNjLk5vZGVcclxuICAgICAgICAgICAgICogQHR5cGUge0FycmF5PGNjLk5vZGU+fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfc2xvdENvbHVtblRvVHdlZW46IEFycmF5PGNjLk5vZGU+O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOmBiuaIsuavj+agvOagvOWtkOmWk+eahOmAn+W6plxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfc2xvdEdpcmRTcGVlZDogbnVtYmVyO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOiAgeiZjuapn+avj+agvOagvOWtkOmrmOW6plxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfc2xvdEdyaWRIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDoqbLogIHomY7mqZ8g5q+P5YiX55qE5qC85a2Q5pW46YePXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIF9zbG90Um93R3JpZENvdW50OiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6ICB6JmO5qmf6aGv56S6562U5qGI5YmN55qE5pyA5bCR6L2J5YuV5qyh5pW4XHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIF9zbG90VHVybkNvdW50OiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Yqg6YCf5pmC55qE5Yqg6YCf5YCN546HXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIF9zcGVlZFVwTXVsdGlwbGU6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmvLjlhaXmmYJUV0VFTuWLleeVq+mhnuWei1xyXG4gICAgICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfc2luZUluRWFzaW5nOiBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5reh5Ye65pmCVFdFRU4g5YuV55Wr6aGe5Z6LXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIF9zaW5lT3V0RWFzaW5nOiBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogIOeeh+aOkui9ieWLlemAn+W6plxyXG4gICAgICAgICAgICAgKiBgYGBcclxuICAgICAgICAgICAgICogIOWFrOW8j1xyXG4gICAgICAgICAgICAgKiAgICAgIOWmguaenOimgeWKoOW/q+i9ieWLlemAn+W6plxyXG4gICAgICAgICAgICAgKiAgICAgICAgICA9IOavj+agvOagvOWtkOenu+WLlemAn+W6piDkvovlpoIgOiAwLjA4IOenkuS4gOagvFxyXG4gICAgICAgICAgICAgKiAgICAgIOWmguaenOimgemZjeS9jui9ieWLlemAn+W6plxyXG4gICAgICAgICAgICAgKiAgICAgICAgICA9IOavj+agvOagvOWtkOenu+WLleW6piArIDEg5L6L5aaCIDogMSArIDAuMDgg56eS5LiA5qC8XHJcbiAgICAgICAgICAgICAqIGBgYFxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSBfbG9va0F0U3BlZWQ6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBTTE9UIOWBnOi7uOmWk+agvCzkvp3nhafkvaBTTE9UIOWIl+aVuCDlkITliJfplpPnmoTlgZzou7jplpPmoLxcclxuICAgICAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHByaXZhdGUgX3Nsb3RSb3dUaW1lOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5ZCE6Lu4556H5o6S5pmC6ZaTXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIF9sb29rQXRUaW1lOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5re75Yqg5YSy5a2YU0VSVkVS562U5qGI55qETW9kZWxcclxuICAgICAgICAgICAgICogQHR5cGUge2ZjYy5JRi5JQmFzZVNsb3RSZXN1bHRNb2RlbH1cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHByb3RlY3RlZCBfcmVzdWx0TW9kZWw6ICBJRi5JQmFzZVNsb3RSZXN1bHRNb2RlbDtcclxuXHJcbiAgICAgICAgICAgIHByaXZhdGUgX3N0b3BOb3dTcGVlZE11bHRpcGxlOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9zbG90U3R5bGVNYW5hZ2VyOiBJRi5JU2xvdFN0eWxlTWFuYWdlclxyXG5cclxuICAgICAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHNsb3RTdHlsZU1hbmFnZXI6IElGLklTbG90U3R5bGVNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zbG90U3R5bGVNYW5hZ2VyID0gc2xvdFN0eWxlTWFuYWdlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOipsuaoo+W8j+aomeexpFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0VGFnKHRhZzogc3RyaW5nKTogdGhpcyB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWcgPSB0YWc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOiAgeiZjuapn+mhr+ekuuetlOahiOWJjeeahOacgOWwkei9ieWLleasoeaVuFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY291bnRcclxuICAgICAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHB1YmxpYyBzZXRTbG90VHVybkNvdW50KGNvdW50OiBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RUdXJuQ291bnQgPSBjb3VudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDogIHomY7mqZ/mr4/pmpTmoLzlrZDpq5jluqZcclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHVibGljIHNldFNsb3RHcmlkSGVpZ2h0KGhlaWdodDogbnVtYmVyKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2xvdEdyaWRIZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDpgYrmiLLmr4/moLzmoLzlrZDplpPnmoTpgJ/luqZcclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcclxuICAgICAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHB1YmxpYyBzZXRTbG90R2lyZFNwZWVkKHRpbWU6IG51bWJlcik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RHaXJkU3BlZWQgPSB0aW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Yqg6YCf5pmC55qE5Yqg6YCf6KKr546HXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsZVxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHVibGljIHNldFNwZWVkVXBNdWx0aXBsZShtdWx0aXBsZTogbnVtYmVyKTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3BlZWRVcE11bHRpcGxlID0gbXVsdGlwbGU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmgKXlgZzmmYLnmoTliqDpgJ/lgI3njodcclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxlXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0U3RvcE5vd1NwZWVkTXVsdGlwbGUobXVsdGlwbGU6IG51bWJlcik6IHRoaXMge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RvcE5vd1NwZWVkTXVsdGlwbGUgPSBtdWx0aXBsZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6Kmy6ICB6JmO5qmfIOavj+WIl+eahOagvOWtkOaVuOmHj1xyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gZ3JpZENvdW50XHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0U2xvdFJvd0dyaWRDb3VudChncmlkQ291bnQ6IG51bWJlcik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RSb3dHcmlkQ291bnQgPSBncmlkQ291bnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDpnZ7liqDpgJ/mqKHlvI8s5q+P5YiX5YGc5q2i55qE5pmC6ZaT6ZaT5qC8XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0Q29sdW1uSW50ZXJ2YWxUaW1lKHRpbWU6IG51bWJlcik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbHVtbkludGVydmFsVGltZSA9IHRpbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDopoHln7fooYzovKrmkq3li5XljJbovYnli5XogIHomY7mqZ/nmoRub2RlXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXk8Y2MuTm9kZT59IG5vZGVcclxuICAgICAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHB1YmxpYyBzZXRTbG90Q29sdW1uVG9Ud2Vlbihub2RlOiBBcnJheTxjYy5Ob2RlPik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RDb2x1bW5Ub1R3ZWVuID0gbm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmiYDmnInmoLzlrZAs5YGa5b6q55Kw6ICB6JmO5qmf5pmCLOmcgOabtOWLleipsk5vZGXnmoTkvY3nva5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtNYXA8bnVtYmVyLCBBcnJheTxjYy5Ob2RlPj59IG5vZGVcclxuICAgICAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHB1YmxpYyBzZXRHcmlkTm9kZVRvTWFwKG5vZGU6IE1hcDxudW1iZXIsIEFycmF5PGNjLk5vZGU+Pik6IHRoaXMge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2dyaWROb2RlVG9NYXAgPSBub2RlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6YCy5aC0IOe3qeWLlSBlYXNpbmfmlYjmnpxcclxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVhc2luZ1xyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcHVibGljIHNldFNpbmVJbkVhc2luZyhlYXNpbmc6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2luZUluRWFzaW5nID0gZWFzaW5nO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDpgIDloLQg57ep5YuVIGVhc2luZ+aViOaenFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWFzaW5nXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0U2luZU91dEVhc2luZyhlYXNpbmc6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2luZU91dEVhc2luZyA9IGVhc2luZztcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog556H5o6S6L2J5YuV6YCf5bqmXHJcbiAgICAgICAgICAgICAqIGBgYFxyXG4gICAgICAgICAgICAgKiAg5YWs5byPXHJcbiAgICAgICAgICAgICAqICAgICAg5aaC5p6c6KaB5Yqg5b+r6L2J5YuV6YCf5bqmXHJcbiAgICAgICAgICAgICAqICAgICAgICAgID0g5q+P5qC85qC85a2Q56e75YuV6YCf5bqmIOS+i+WmgiA6IDAuMDgg56eS5LiA5qC8XHJcbiAgICAgICAgICAgICAqICAgICAg5aaC5p6c6KaB6ZmN5L2O6L2J5YuV6YCf5bqmXHJcbiAgICAgICAgICAgICAqICAgICAgICAgID0g5q+P5qC85qC85a2Q56e75YuV5bqmICsgMSDkvovlpoIgOiAxICsgMC4wOCDnp5LkuIDmoLxcclxuICAgICAgICAgICAgICogYGBgXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0TG9va0F0U3BlZWQodGltZTogbnVtYmVyKTogdGhpcyB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sb29rQXRTcGVlZCA9IHRpbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIHNsb3Qg5ZCE5YiX5YGc6Lu45pmC6ZaTXHJcbiAgICAgICAgICAgICAqIOS+neeFp+S9oFNMT1Qg5YiX5pW4IOWQhOWIl+mWk+eahOWBnOi7uOmWk+agvFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWUgLSDlkITou7jplpPmoLzmmYLplpNcclxuICAgICAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHB1YmxpYyBzZXRTbG90Um93VGltZSh0aW1lOiBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RSb3dUaW1lID0gdGltZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog556H5o6S5pmC6ZaTXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwdWJsaWMgc2V0TG9va0F0VGltZSh0aW1lOiBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvb2tBdFRpbWUgPSB0aW1lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmt7vliqDlhLLlrZhTRVJWRVLnrZTmoYjnmoRNb2RlbFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2ZjYy5JRi5JQmFzZVNsb3RSZXN1bHRNb2RlbH0gcmVzdWx0TW9kZWwgLSBzZXJ2ZXLlm57lgrPnmoTnrZTmoYhtb2RlbFxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc2V0UmVzdWx0TW9kZWwocmVzdWx0TW9kZWw6IElGLklCYXNlU2xvdFJlc3VsdE1vZGVsKTogdGhpcyB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXN1bHRNb2RlbCA9IHJlc3VsdE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDoqK3lrprntZDmnZ9cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGNvbXBsZXRlKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2xvdFN0eWxlTWFuYWdlci5idWlsZCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1nZXR0ZXI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6Z2e5Yqg6YCf5qih5byPLOavj+WIl+WBnOatoueahOaZgumWk+mWk+agvFxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQgY29sdW1uSW50ZXJ2YWxUaW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uSW50ZXJ2YWxUaW1lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5omA5pyJ5qC85a2QLOWBmuW+queSsOiAgeiZjuapn+aZgizpnIDmm7Tli5XoqbJOb2Rl55qE5L2N572uXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge01hcDxudW1iZXIsIEFycmF5PGNjLk5vZGU+Pn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBncmlkTm9kZVRvTWFwKCk6IE1hcDxudW1iZXIsIEFycmF5PGNjLk5vZGU+PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JpZE5vZGVUb01hcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOimgeWft+ihjOi8quaSreWLleWMlui9ieWLleiAgeiZjuapn+eahG5vZGVcclxuICAgICAgICAgICAgICogQHJldHVybiB7QXJyYXk8Y2MuTm9kZT59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQgc2xvdENvbHVtblRvVHdlZW4oKTogQXJyYXk8Y2MuTm9kZT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nsb3RDb2x1bW5Ub1R3ZWVuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6YGK5oiy5q+P5qC85qC85a2Q6ZaT55qE6YCf5bqmXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBzbG90R2lyZFNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xvdEdpcmRTcGVlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOiAgeiZjuapn+avj+malOagvOWtkOmrmOW6plxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQgc2xvdEdyaWRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbG90R3JpZEhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOipsuiAgeiZjuapnyDmr4/liJfnmoTmoLzlrZDmlbjph49cclxuICAgICAgICAgICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0IHNsb3RSb3dHcmlkQ291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbG90Um93R3JpZENvdW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6ICB6JmO5qmf6aGv56S6562U5qGI5YmN55qE5pyA5bCR6L2J5YuV5qyh5pW4XHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBzbG90VHVybkNvdW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xvdFR1cm5Db3VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWKoOmAn+aZgueahOWKoOmAn+iiq+eOh1xyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQgc3BlZWRVcE11bHRpcGxlKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWRVcE11bHRpcGxlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5oCl5YGc5pmC55qE5Yqg6YCf5YCN546HXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBzdG9wTm93U3BlZWRNdWx0aXBsZSgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3BOb3dTcGVlZE11bHRpcGxlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgc2xvdFN0eWxlTWFuYWdlcigpOiBmY2MuSUYuSVNsb3RTdHlsZU1hbmFnZXIge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nsb3RTdHlsZU1hbmFnZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDoqbLmqKPlvI/mqJnnsaRcclxuICAgICAgICAgICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0IHRhZygpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhZztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFNFUlZFUuetlOahiOeahE1vZGVsXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge0lGLklCYXNlU2xvdFJlc3VsdE1vZGVsfVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0IHJlc3VsdE1vZGVsKCk6IElGLklCYXNlU2xvdFJlc3VsdE1vZGVsIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRNb2RlbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOmAsuWgtCDnt6nli5UgZWFzaW5n5pWI5p6cXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBzaW5lSW5FYXNpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaW5lSW5FYXNpbmc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDpgIDloLQg57ep5YuVIGVhc2luZ+aViOaenFxyXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQgc2luZU91dEVhc2luZygpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpbmVPdXRFYXNpbmc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDnnofmjpLovYnli5XpgJ/luqZcclxuICAgICAgICAgICAgICogYGBgXHJcbiAgICAgICAgICAgICAqICDlhazlvI9cclxuICAgICAgICAgICAgICogICAgICDlpoLmnpzopoHliqDlv6vovYnli5XpgJ/luqZcclxuICAgICAgICAgICAgICogICAgICAgICAgPSDmr4/moLzmoLzlrZDnp7vli5XpgJ/luqYg5L6L5aaCIDogMC4wOCDnp5LkuIDmoLxcclxuICAgICAgICAgICAgICogICAgICDlpoLmnpzopoHpmY3kvY7ovYnli5XpgJ/luqZcclxuICAgICAgICAgICAgICogICAgICAgICAgPSDmr4/moLzmoLzlrZDnp7vli5XluqYgKyAxIOS+i+WmgiA6IDEgKyAwLjA4IOenkuS4gOagvFxyXG4gICAgICAgICAgICAgKiBgYGBcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBsb29rQXRTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvb2tBdFNwZWVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogU0xPVCDlgZzou7jplpPmoLws5L6d54Wn5L2gU0xPVCDliJfmlbgg5ZCE5YiX6ZaT55qE5YGc6Lu46ZaT5qC8XHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBzbG90Um93VGltZSgpOiBudW1iZXIge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nsb3RSb3dUaW1lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5ZCE6Lu4556H5o6S5pmC6ZaTXHJcbiAgICAgICAgICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldCBsb29rQXRUaW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9va0F0VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9BQmFzZVNsb3RTZXR0aW5nLnRzXCIgLz5cclxuXHJcbm5hbWVzcGFjZSBmY2Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAQXV0aG9yIOiVreeri+WTgVxyXG4gICAgICogQERlc2NyaXB0aW9uIOiAgeiZjuapn+i9ieWLleaZguiIh+mhr+ekuuetlOahiOaZgueahOWclueJh+S4gOiHtCzkuJTlj6/lsI3lkITliJfliIbliKXntabkuojlgZzou7jmmYLplpNcclxuICAgICAqIEBEYXRlIDIwMjEtMDYtMjgg5LiL5Y2IIDA2OjQxXHJcbiAgICAgKiBAVmVyc2lvbiAxLjBcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIE5vcm1hbFNldHRpbmcgZXh0ZW5kcyBBQlMuQUJhc2VTbG90U2V0dGluZyB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaPm+WclueJh+eahOaJgOacieagvOWtkFxyXG4gICAgICAgICAqIEBwYXJhbSB7TWFwPG51bWJlciwgQXJyYXk8Y2MuU3ByaXRlPj59IHNwcml0ZVxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBfZ3JpZFNwcml0ZVRvTWFwOiBNYXA8bnVtYmVyLCBBcnJheTxjYy5TcHJpdGU+PjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogc2xvdCDmiYDmnInpnZzmhYvmoLzlrZDlnJbniYdcclxuICAgICAgICAgKiBAcGFyYW0ge01hcDxzdHJpbmcsIGNjLlNwcml0ZUZyYW1lPn0gaW1nXHJcbiAgICAgICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIF9ncmlkSW1nOiBNYXA8c3RyaW5nLCBjYy5TcHJpdGVGcmFtZT47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+WKoOWEsuWtmFNFUlZFUuetlOahiOeahE1vZGVsXHJcbiAgICAgICAgICogQHR5cGUge2ZjYy5JRi5JQmFzZVNsb3RSZXN1bHRNb2RlbH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByb3RlY3RlZCBfcmVzdWx0TW9kZWw6IGZjYy5JRi5JTm9MaW5lUmVzdWx0TW9kZWwgfCBmY2MuSUYuSUhhc0xpbmVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSU5vTGluZUZyZWVSZXN1bHRNb2RlbCB8IGZjYy5JRi5JSGFzTGluZUZyZWVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVSZXN1bHQgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVGcmVlUmVzdWx0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBzbG90IOaJgOaciemdnOaFi+agvOWtkOWclueJh1xyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXk8Y2MuU3ByaXRlRnJhbWU+fSBpbWdcclxuICAgICAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRHcmlkSW1nKGltZzogTWFwPHN0cmluZywgY2MuU3ByaXRlRnJhbWU+KTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9ncmlkSW1nID0gaW1nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmiYDmnInmoLzlrZDnmoTlnJbniYcs5YGa5b6q55Kw6ICB6JmO6Zue5pmCLOmcgOabtOWLleeahOWclueJh1xyXG4gICAgICAgICAqIEBwYXJhbSB7TWFwPG51bWJlciwgQXJyYXk8Y2MuU3ByaXRlPj59IHNwcml0ZVxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEdpcmRTcHJpdGVUb01hcChzcHJpdGU6IE1hcDxudW1iZXIsIEFycmF5PGNjLlNwcml0ZT4+KTogdGhpcyB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9ncmlkU3ByaXRlVG9NYXAgPSBzcHJpdGU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaPm+WclueJh+eahOaJgOacieagvOWtkFxyXG4gICAgICAgICAqIEByZXR1cm4ge01hcDxudW1iZXIsIEFycmF5PGNjLlNwcml0ZT4+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldCBncmlkU3ByaXRlVG9NYXAoKTogTWFwPG51bWJlciwgQXJyYXk8Y2MuU3ByaXRlPj4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JpZFNwcml0ZVRvTWFwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5re75Yqg5YSy5a2YU0VSVkVS562U5qGI55qETW9kZWxcclxuICAgICAgICAgKiBAcGFyYW0ge2ZjYy5JRi5JTm9MaW5lUmVzdWx0TW9kZWwgfCBmY2MuSUYuSUhhc0xpbmVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSU5vTGluZUZyZWVSZXN1bHRNb2RlbCB8IGZjYy5JRi5JSGFzTGluZUZyZWVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVSZXN1bHQgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVGcmVlUmVzdWx0fSByZXN1bHRNb2RlbFxyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0UmVzdWx0TW9kZWwocmVzdWx0TW9kZWw6IGZjYy5JRi5JTm9MaW5lUmVzdWx0TW9kZWwgfCBmY2MuSUYuSUhhc0xpbmVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSU5vTGluZUZyZWVSZXN1bHRNb2RlbCB8IGZjYy5JRi5JSGFzTGluZUZyZWVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVSZXN1bHQgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVGcmVlUmVzdWx0KTogdGhpcyB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5zZXRSZXN1bHRNb2RlbChyZXN1bHRNb2RlbCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogc2xvdCDmiYDmnInpnZzmhYvmoLzlrZDlnJbniYdcclxuICAgICAgICAgKiBAcmV0dXJuIHtNYXA8c3RyaW5nLCBjYy5TcHJpdGVGcmFtZT59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0IGdyaWRJbWcoKTogTWFwPHN0cmluZywgY2MuU3ByaXRlRnJhbWU+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWRJbWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmt7vliqDlhLLlrZhTRVJWRVLnrZTmoYjnmoRNb2RlbFxyXG4gICAgICAgICAqIEByZXR1cm4ge2ZjYy5JRi5JTm9MaW5lUmVzdWx0TW9kZWwgfCBmY2MuSUYuSUhhc0xpbmVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSU5vTGluZUZyZWVSZXN1bHRNb2RlbCB8IGZjYy5JRi5JSGFzTGluZUZyZWVSZXN1bHRNb2R1bGUgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVSZXN1bHQgfCBmY2MuSUYuSUV4dGVuZEhhc0xpbmVGcmVlUmVzdWx0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldCByZXN1bHRNb2RlbCgpOiBmY2MuSUYuSU5vTGluZVJlc3VsdE1vZGVsIHwgZmNjLklGLklIYXNMaW5lUmVzdWx0TW9kdWxlIHwgZmNjLklGLklOb0xpbmVGcmVlUmVzdWx0TW9kZWwgfCBmY2MuSUYuSUhhc0xpbmVGcmVlUmVzdWx0TW9kdWxlIHwgZmNjLklGLklFeHRlbmRIYXNMaW5lUmVzdWx0IHwgZmNjLklGLklFeHRlbmRIYXNMaW5lRnJlZVJlc3VsdCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRNb2RlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTm9ybWFsU2V0dGluZy50c1wiIC8+XHJcblxyXG5uYW1lc3BhY2UgZmNjIHtcclxuICAgIC8qKlxyXG4gICAgICogQEF1dGhvciDola3nq4vlk4FcclxuICAgICAqIEBEZXNjcmlwdGlvbiDogIHomY7mqZ/ovYnli5XmmYLkvb/nlKjmqKHns4rlnJbniYcs5LiU5Y+v5bCN5ZCE5YiX5YiG5Yil57Wm5LqI5YGc6Lu45pmC6ZaTXHJcbiAgICAgKiBARGF0ZSAyMDIxLTA2LTI4IOS4i+WNiCAwNjo0MVxyXG4gICAgICogQFZlcnNpb24gMS4wXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBOb3JtYWxCbHVySW1hZ2VTZXR0aW5nIGV4dGVuZHMgTm9ybWFsU2V0dGluZyB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNsb3Qg5omA5pyJ5qih57OK5ZyW54mHXHJcbiAgICAgICAgICogQHR5cGUge01hcDxzdHJpbmcsIGNjLlNwcml0ZUZyYW1lPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgX3N5bWJvbEJsdXJJbWc6IE1hcDxzdHJpbmcsIGNjLlNwcml0ZUZyYW1lPjtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNsb3Qg5omA5pyJ5qih57OK5ZyW54mHXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheTxjYy5TcHJpdGVGcmFtZT59IGltZ1xyXG4gICAgICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFN5bWJvbEJsdXJJbWcoaW1nOiBNYXA8c3RyaW5nLCBjYy5TcHJpdGVGcmFtZT4pOiB0aGlzIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3N5bWJvbEJsdXJJbWcgPSBpbWc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBzeW1ib2xCbHVySW1nKCk6IE1hcDxzdHJpbmcsIGNjLlNwcml0ZUZyYW1lPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zeW1ib2xCbHVySW1nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=

},{}]},{},[1])