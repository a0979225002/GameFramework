(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fcc,__read=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},__spreadArray=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},__awaiter=this&&this.__awaiter||function(e,a,s,c){return new(s=s||Promise)(function(n,t){function r(e){try{i(c.next(e))}catch(e){t(e)}}function o(e){try{i(c.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?n(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(r,o)}i((c=c.apply(e,a||[])).next())})},__generator=this&&this.__generator||function(n,r){var o,i,a,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,i&&(a=2&t[0]?i.return:t[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,t[1])).done)return a;switch(i=0,(t=a?[2&t[0],a.value]:t)[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,i=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],i=0}finally{o=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},__extends=this&&this.__extends||function(){var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}}(),__values=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return{value:(e=e&&r>=e.length?void 0:e)&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};!function(e){(e=(e=e.type||(e.type={})).ErrorType||(e.ErrorType={})).TYPE_FW="傳入的Type 錯誤 ,請檢察該Type是否非FarmWork內的Type",e.IS_RUNNING_FW="遊戲正在執行中,請勿重複呼叫",e.UNDEFINED_FW="變數為undefined,流程無法繼續",e.LOAD_FW="加載的資源有問題",e.ANIMATION_FW="Animation 類中方法有錯誤 : ",e.WEB_REQUEST_FW="WebRequest 類有錯誤 : ",e.WEB_RESPONSE_FW="WebResponse 類有錯誤 : ",e.AUDIO_FW="AUDIO 類有錯誤 :",e.SCENE_FW="Scene 類有錯誤 :",e.PROCESS_FW="process 類有錯誤 :",e.LISTENER_FW="Event 類有錯誤 :",e.SLOT_STYLE_FW="SlotStyleFW類有錯誤 :",e.TEMPLATE_FW="模板類有錯誤 :"}(fcc=fcc||{}),function(e){var t=(n.prototype.checkErrorType=function(e,t){throw new Error("例外錯誤 : "+e)},n);function n(e){this.configManager=e}e.UnknownError=t}(fcc=fcc||{}),function(n){var e=(t.prototype.checkErrorType=function(e,t){if(this.configManager.isFrameworkDebug)switch(e){case n.type.ErrorType.IS_RUNNING_FW:throw new Error(n.type.ErrorType.IS_RUNNING_FW+" "+t);case n.type.ErrorType.UNDEFINED_FW:throw new Error(n.type.ErrorType.UNDEFINED_FW+" "+t);case n.type.ErrorType.TYPE_FW:throw new Error(n.type.ErrorType.TYPE_FW+" "+t);case n.type.ErrorType.ANIMATION_FW:throw new Error(n.type.ErrorType.ANIMATION_FW+" "+t);case n.type.ErrorType.LOAD_FW:throw new Error(n.type.ErrorType.LOAD_FW+" "+t);case n.type.ErrorType.WEB_REQUEST_FW:throw new Error(n.type.ErrorType.WEB_REQUEST_FW+" "+t);case n.type.ErrorType.AUDIO_FW:throw new Error(n.type.ErrorType.AUDIO_FW+" "+t);case n.type.ErrorType.WEB_RESPONSE_FW:throw new Error(n.type.ErrorType.WEB_RESPONSE_FW+" "+t);case n.type.ErrorType.SCENE_FW:throw new Error(n.type.ErrorType.SCENE_FW+" "+t);case n.type.ErrorType.PROCESS_FW:throw new Error(n.type.ErrorType.PROCESS_FW+" "+t);case n.type.ErrorType.LISTENER_FW:throw new Error(n.type.ErrorType.LISTENER_FW+" "+t);case n.type.ErrorType.SLOT_STYLE_FW:throw new Error(n.type.ErrorType.SLOT_STYLE_FW+" "+t);case n.type.ErrorType.TEMPLATE_FW:throw new Error(n.type.ErrorType.TEMPLATE_FW+" "+t);default:this.unknownError.checkErrorType(e)}else console.log("有例外錯誤,但你未開啟框架Debug,無法查看")},t);function t(e){this.unknownError=new n.UnknownError(e),this.configManager=e}n.FrameWorkError=e}(fcc=fcc||{}),function(t){var e=(n.prototype.checkErrorType=function(e,t){if("string"==typeof e)this.frameWorkError.checkErrorType(e,t);else if(null===e)return this.checkObjectType(t)},n.prototype.checkObjectType=function(e){if(e&&0!=e)return typeof e;throw new Error("該物件為null")},n);function n(e){this.frameWorkError=new t.FrameWorkError(e)}t.ObjectError=e}(fcc=fcc||{}),function(i){var e=(t.prototype.showError=function(e,t,n,r){var o=this;null!=this.timeOut&&clearTimeout(this.timeOut),cc.Tween.stopAllByTarget(this.errorManager.errorNode),this.errorManager.errorButton.getComponent(cc.Button).interactable=!1,this.errorManager.errorNode.active=!1,this.errorManager.closeButton.active=!1,this.errorManager.errorNode||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorNode為空"),this.errorManager.errorLabel||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorLabel為空"),this.errorManager.errorButton||this.errorManager.executeError(i.type.ErrorType.UNDEFINED_FW,"ErrorManager errorButton為空"),i.ErrorManager.errorState=!0,cc.tween(this.errorManager.errorNode).set({opacity:0,scale:1.3}).call(function(){o.errorManager.errorNode.active=!0}).to(.3,{opacity:255,scale:1},{easing:"sineIn"}).call(function(){o.errorManager.errorButton.getComponent(cc.Button).interactable=!0}).start(),this.errorManager.errorLabel.string=t,e?r?(this.errorManager.errorButton.active=r,this.errorManager.errorButtonLabel.string=n):this.errorManager.isShowBackHomeButton?(this.errorManager.errorButton.active=this.errorManager.isShowBackHomeButton,this.errorManager.errorButtonLabel.string=n):this.errorManager.errorButton.active=!1:this.errorManager.errorButton.active=!1,e||(this.timeOut=window.setTimeout(function(){i.ErrorManager.errorState=!1,o.errorManager.errorNode.active=!1,o.errorManager.errorButton.active=!1,o.timeOut=null},this.errorManager.errorDelayTime))},t);function t(e){this.timeOut=null,this.errorManager=e}i.ServerError=e}(fcc=fcc||{}),function(o){var e=(t.prototype.showError=function(e,t,n){var r=this;null!=this.timeout&&clearTimeout(this.timeout),this.errorManager.warningNode||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningNode為空"),this.errorManager.warningLabel||this.errorManager.executeError(o.type.ErrorType.UNDEFINED_FW,"ErrorManager warningLabel為空"),0==this.errorManager.warningDelayTime&&this.errorManager.executeError("當前DelayTime = 0 : 請給予值"),o.ErrorManager.warningState=!0,this.errorManager.warningNode.active=!0,this.errorManager.warningLabel.string=t,e||(this.timeout=window.setTimeout(function(){o.ErrorManager.warningState=!1,r.errorManager.warningNode.active=!1},this.errorManager.warningDelayTime))},t);function t(e){this.timeout=null,this.errorManager=e}o.WarningError=e}(fcc=fcc||{}),function(n){var e=(t.prototype.checkErrorType=function(e,t){return this.objectError.checkErrorType(e,t)},t.prototype.checkServerError=function(e,t,n,r){this.serverError.showError(e,t,n,r)},t.prototype.checkWarning=function(e,t,n){this.warningError.showError(e,t,n)},t);function t(e,t){this.objectError=new n.ObjectError(e),this.serverError=new n.ServerError(t),this.warningError=new n.WarningError(t)}n.ErrorHandler=e}(fcc=fcc||{}),function(t){var e=(n.setInstance=function(e){this._instance||(this._instance=new n(e),t.errorMgr=this._instance)},Object.defineProperty(n,"instance",{get:function(){if(!this._instance)throw new Error("ErrorManager類錯誤 :  該類尚未實例化");return this._instance},enumerable:!1,configurable:!0}),n.prototype.executeError=function(e,t){return this.handler.checkErrorType(e,t)},n.prototype.showErrorDialog=function(e,t,n,r){this.handler.checkServerError(e,t,n,r)},n.prototype.showWarningDialog=function(e,t,n){this.handler.checkWarning(e,t,n)},n.prototype.setErrorNode=function(e){return this._errorNode=e,this},n.prototype.setErrorLabel=function(e){return this._errorLabel=e,this},n.prototype.setErrorButton=function(e){return this._errorButton=e,this},n.prototype.setCloseButtonNode=function(e){return this._closeButton=e,this},n.prototype.setErrorDelayTime=function(e){return this._errorDelayTime=e,this},n.prototype.setWarningDelayTime=function(e){return this._warningDelayTime=e,this},n.prototype.setWarningNode=function(e){return this._warningNode=e,this},n.prototype.setWarningLabel=function(e){return this._warningLabel=e,this},n.prototype.setErrorButtonLabel=function(e){return this._errorButtonLabel=e,this},Object.defineProperty(n,"errorState",{get:function(){return this._errorState},set:function(e){this._errorState=e},enumerable:!1,configurable:!0}),Object.defineProperty(n,"warningState",{get:function(){return this._warningState},set:function(e){this._warningState=e},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorNode",{get:function(){return this._errorNode},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"warningNode",{get:function(){return this._warningNode},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorButton",{get:function(){return this._errorButton},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"warningLabel",{get:function(){return this._warningLabel},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorLabel",{get:function(){return this._errorLabel},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorDelayTime",{get:function(){return this._errorDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"warningDelayTime",{get:function(){return this._warningDelayTime},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isShowBackHomeButton",{get:function(){return this._isShowBackHomeButton},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"errorButtonLabel",{get:function(){return this._errorButtonLabel},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"closeButton",{get:function(){return this._closeButton},enumerable:!1,configurable:!0}),n);function n(e){this.handler=new t.ErrorHandler(e,this),this.configManager=e,this._errorNode=null,this._errorLabel=null,this._errorDelayTime=2e3,this._warningDelayTime=1e3,n._errorState=!1,n._warningState=!1,this._isShowBackHomeButton=!!this.configManager.backHomeURL.trim()}t.ErrorManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AudioStateType||(e.AudioStateType={})).CLEAR_TO_REPLAY="CLEAR_TO_REPLAY",e.NOT_PLAYING="NOT_PLAYING",e.SUPERIMPOSE="SUPERIMPOSE"}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.roundOff=function(e,t){return Math.round(Math.round(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundDown=function(e,t){return Math.floor(Math.floor(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.roundUp=function(e,t){return Math.ceil(Math.ceil(e*Math.pow(10,(t||0)+1))/10)/Math.pow(10,t||0)},t.decimalsCount=function(e){var t=String(e).indexOf(".")+1,e=String(e).length-t;return 0==t?0:e},t.numberFormat=function(e){return e<1e3?e+"":1e3<e?e/1e3+"K":void 0},t.format=function(e){return this.formatting.format(e)},t.formatting=new Intl.NumberFormat,e.Util=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LoadType||(e.LoadType={})).IMG="IMG",e.IMG_ATLAS="IMG_ATLAS",e.SPINE="SPINE",e.PREFAB="PREFAB",e.MUSIC="MUSIC",e.TEXT="TEXT",e.SCENE="SCENE",e.SCRIPT="SCRIPT",e.CSS="CSS"}(fcc=fcc||{}),function(t){var e=(n.setInstance=function(e){this._instance||(this._instance=new n(e),t.eventMgr=this._instance)},Object.defineProperty(n,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),n.prototype.emitEvent=function(e){for(var t,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];(t=this.target).emit.apply(t,__spreadArray([e],__read(n)))},n.prototype.eventListener=function(e,t,n,r){this._eventCount+=1,this._eventsCurrentlyBeing.set("severEvent",e),n?this.target.on(e,t,r):this.target.once(e,t,r)},n.prototype.destroyEvent=function(e,t){this.target.off(e,t,this.target)},n.prototype.hasListening=function(e){return this.target.hasEventListener(e)},Object.defineProperty(n.prototype,"eventCount",{get:function(){return this._eventCount},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"eventsCurrentlyBeing",{get:function(){return this._eventsCurrentlyBeing},enumerable:!1,configurable:!0}),n);function n(e){this.configManager=e,this._eventCount=0,this._eventsCurrentlyBeing=new Map,this.target=new cc.EventTarget}t.EventManager=e}(fcc=fcc||{}),function(n){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),n.processMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;n.ErrorManager.instance.executeError(n.type.ErrorType.PROCESS_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.setProcess=function(e,t){return this.gameProcessFactory.setProcess(e,t),this},t.prototype.initProcess=function(e){this.gameProcessFactory.initProcess(e)},t.prototype.setDefaultProcess=function(e){this.gameProcessFactory.changeProcess(e)},t.prototype.changeProcess=function(e){this.gameProcessFactory.changeProcess(e)},t.prototype.play=function(){var e=this;return new Promise(function(t){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.isStartProcess?[3,2]:(this.updateProcessState(!0),[4,this.gameProcessFactory.useProcess()]);case 1:return e.sent(),this.updateProcessState(!1),t(),[3,3];case 2:n.ErrorManager.instance.executeError(n.type.ErrorType.PROCESS_FW,"流程尚未結束,請勿重複執行"),e.label=3;case 3:return[2]}})})})},t.prototype.updateProcessState=function(e){this.isStartProcess=e},t.prototype.remake=function(){this.isStartProcess=!1},Object.defineProperty(t.prototype,"gameState",{get:function(){return this._gameState},set:function(e){this._gameState=e},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.gameProcessFactory=new n.GameProcessFactory(this),this._gameState=n.type.GameStateType.STANDBY,this.isStartProcess=!1}n.ProcessManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneStyleType||(e.SceneStyleType={})).AUTO="AUTO",e.HORIZONTAL="HORIZONTAL",e.VERTICAL="VERTICAL"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).SceneDirectionType||(e.SceneDirectionType={})).PORTRAIT="PORTRAIT",e.LANDSCAPE="LANDSCAPE"}(fcc=fcc||{}),function(e){var t=(n.prototype.designSceneEventListener=function(t){var e=this;cc.view.on("canvas-resize",function(){return __awaiter(e,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.makeDesignScene(t)];case 1:return e.sent(),cc.log("更新畫面完畢......"),[2]}})})})},n.prototype.makeDesignScene=function(n){var r=this;return new Promise(function(e,t){r._isCanUpdateScene?(r._isCanUpdateScene=!1,setTimeout(function(){r.sceneManager.updateSize(),r._isCanUpdateScene=!0,e()},n)):r.configManager.isFrameworkDebug&&t("正在UpdateScene中 請稍後......")})},n);function n(e,t){this._isCanUpdateScene=!0,this.configManager=e,this.sceneManager=t}e.SceneSizeChangeListener=t}(fcc=fcc||{}),function(n){var e;function t(){this.observer=new Set}e=n.ABS||(n.ABS={}),t.prototype.subscribe=function(e,t){this.observer.has(e)?n.ErrorManager.instance.executeError(n.type.ErrorType.SCENE_FW,e+" 該IBaseObserver已註冊過自動狀態改變時事件,請檢查"):(e.isPermanent=t,this.observer.add(e))},t.prototype.unsubscribe=function(e){this.observer.has(e)?this.observer.delete(e):n.ErrorManager.instance.executeError(n.type.ErrorType.PROCESS_FW,e+" : 該觀察類尚未綁定過,無須移除觀察對象")},t.prototype.removeAll=function(){this.observer.clear()},t.prototype.getSubscribeCount=function(){return this.observer.size},t.prototype.getAllSubscribe=function(){return this.observer},e.ABaseNotification=t}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).NotificationType||(e.NotificationType={})).AUTO_CHANGE="AUTO_CHANGE",e.SPEED_CHANGE="SPEED_CHANGE",e.USER_MONEY_CHANGE="USER_MONEY_CHANGE",e.USER_BET_CHANGE="USER_BET_CHANGE",e.USER_GET_WIN="USER_GET_WIN",e.SCENE_DIRECTION_CHANGE="SCENE_DIRECTION_CHANGE",e.RESPONSE_RESULT="RESPONSE_RESULT",e.SCROLL_FOCUS_STATE="SCROLL_FOCUS_STATE",e.SLOT_ROW_END="SLOT_ROW_END",e.STOP_NOW="STOP_NOW"}(fcc=fcc||{}),function(e){var t=(n.prototype.pushNotification=function(e){this.callFun.call(this.self,e)},Object.defineProperty(n.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),n);function n(e,t){this._isPermanent=!1,this.self=t,this.callFun=e}e.SceneDirectionChangeObserver=t}(fcc=fcc||{}),function(t){var n,e=(n=t.ABS.ABaseNotification,__extends(r,n),r.prototype.subscribe=function(e,t){n.prototype.subscribe.call(this,e,t)},r.prototype.notify=function(e){var t,n;if(0<this.observer.size)try{for(var r=__values(this.observer),o=r.next();!o.done;o=r.next()){var i=o.value;i.pushNotification(e),i.isPermanent||this.unsubscribe(i)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}},r);function r(){var e=n.call(this)||this;return e.TAG_NAME=t.type.NotificationType.SCENE_DIRECTION_CHANGE,e}t.SceneDirectionChangeNotification=e}(fcc=fcc||{}),function(t){var e=(n.prototype.executionStyle=function(e,t){var n,r;this.updateSceneDirection(),cc.view.getFrameSize().width/cc.view.getFrameSize().height>=e/t?(n=cc.view.getFrameSize().width*(e/cc.view.getFrameSize().height),cc.view.setDesignResolutionSize(n,t,cc.ResolutionPolicy.FIXED_HEIGHT)):cc.view.getFrameSize().width>cc.view.getFrameSize().height?(r=cc.view.getFrameSize().height*(e/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(e,r,cc.ResolutionPolicy.FIXED_WIDTH)):cc.view.getFrameSize().width/cc.view.getFrameSize().height>=1e3/1777?(r=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,r,cc.ResolutionPolicy.FIXED_HEIGHT)):(r=cc.view.getFrameSize().height*(1e3/cc.view.getFrameSize().width),cc.view.setDesignResolutionSize(1e3,r,cc.ResolutionPolicy.FIXED_WIDTH))},n.prototype.updateSceneDirection=function(){cc.view.getFrameSize().width<cc.view.getFrameSize().height?this.sceneManager.sceneDirection!=t.type.SceneDirectionType.PORTRAIT&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.PORTRAIT,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.PORTRAIT)):this.sceneManager.sceneDirection!=t.type.SceneDirectionType.LANDSCAPE&&(this.sceneManager.sceneDirection=t.type.SceneDirectionType.LANDSCAPE,this.eventLock||t.NotificationManager.instance().getNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE).notify(t.type.SceneDirectionType.LANDSCAPE))},n);function n(e){this.sceneManager=e,t.NotificationManager.instance().hasNotification(t.type.NotificationType.SCENE_DIRECTION_CHANGE)?this.eventLock=!1:(this.eventLock=!0,console.log("你尚未綁定當遊戲方向更動時的推播事件,因此不會觸發方向改變的推播事件"))}t.AutoStyle=e}(fcc=fcc||{}),function(e){var t=(n.prototype.executionStyle=function(e,t){var n=cc.find("Canvas").getComponent(cc.Canvas);this.curDR||(this.curDR=cc.size(e,t));var r=this.curDR,o=cc.view.getFrameSize(),i=o.width,e=o.height,t=i,o=e;i/e>r.width/r.height?(n.fitHeight=!0,n.fitWidth=!1,t=(o=r.height)*i/e):(n.fitHeight=!1,n.fitWidth=!0,o=e/i*(t=r.width)),n.designResolution=cc.size(t,o),n.node.width=t,n.node.height=o},n);function n(){}e.HorizontalStyle=t}(fcc=fcc||{}),function(n){var e=(t.prototype.executionStyle=function(e,t){n.ErrorManager.instance.executeError("尚未完成直向是配模式")},t);function t(){}n.VerticalStyle=e}(fcc=fcc||{}),function(r){var e=(t.prototype.getStyle=function(e,t,n){switch(e){case r.type.SceneStyleType.AUTO:this.autoStyle||(this.autoStyle=new r.AutoStyle(this.sceneManager)),this.autoStyle.executionStyle(t,n);break;case r.type.SceneStyleType.HORIZONTAL:this.horizontalStyle||(this.horizontalStyle=new r.HorizontalStyle),this.horizontalStyle.executionStyle(t,n);break;case r.type.SceneStyleType.VERTICAL:this.verticalStyle||(this.verticalStyle=new r.VerticalStyle),this.verticalStyle.executionStyle(t,n);break;default:e.executionStyle(t,n)}},t);function t(e){this.sceneManager=e}r.SceneStyleHandler=e}(fcc=fcc||{}),function(t){var e=(n.setInstance=function(e){this._instance||(this._instance=new n(e),t.sceneMgr=this._instance)},Object.defineProperty(n,"instance",{get:function(){if(this._instance)return this._instance;t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),n.prototype.setDesignWidth=function(e){return this._designWidth=e,this},n.prototype.setDesignHeight=function(e){return this._designHeight=e,this},n.prototype.updateSize=function(e){if(e)switch(this.style=e){case t.type.SceneStyleType.HORIZONTAL:this._sceneDirection=t.type.SceneDirectionType.PORTRAIT;break;case t.type.SceneStyleType.VERTICAL:this._sceneDirection=t.type.SceneDirectionType.LANDSCAPE;break;case t.type.SceneStyleType.AUTO:break;default:console.log("該更新模式尚未包含在框架中,請確認是否有實作ISceneStyle")}return this.sceneStyleHandler.getStyle(this.style,this._designWidth,this._designHeight),this},n.prototype.startListener=function(e){this.sceneSizeChangeListener.designSceneEventListener(e)},n.prototype.changeScene=function(e){t.LoadResManager.instance.sceneRes.has(e)||t.ErrorManager.instance.executeError(t.type.ErrorType.SCENE_FW,"加載不到你的Scene資源,請檢查該資源名是否正確"),cc.director.runScene(t.LoadResManager.instance.sceneRes.get(e))},n.prototype.removeScene=function(e){e.destroy()},Object.defineProperty(n.prototype,"sceneDirection",{get:function(){return this._sceneDirection},set:function(e){this._sceneDirection=e},enumerable:!1,configurable:!0}),n);function n(e){this.configManager=e,this._designWidth=1280,this._designHeight=720,this.sceneSizeChangeListener=new t.SceneSizeChangeListener(e,this),this.sceneStyleHandler=new t.SceneStyleHandler(this),this.style=t.type.SceneStyleType.HORIZONTAL}t.SceneManager=e}(fcc=fcc||{}),function(n){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),n.slotStyleMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;n.ErrorManager.instance.executeError(n.type.ErrorType.SLOT_STYLE_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.setSlotTemplate=function(e){return this.template=e,this},t.prototype.setSlotStyle=function(e){return new e(this)},t.prototype.build=function(e){this.template||n.ErrorManager.instance.executeError(n.type.ErrorType.UNDEFINED_FW,"Slot Template 未賦予,需實做一個SlotTemplate");var t=new this.template(e,this.configManager);this._slot.set(e.tag,t),this._slotStyle.set(e.tag,e)},Object.defineProperty(t.prototype,"slot",{get:function(){return this._slot},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyle",{get:function(){return this._slotStyle},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this._slot=new Map,this._slotStyle=new Map}n.SlotStyleManager=e}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).AutoType||(e.AutoType={}))[e.AUTO=-1]="AUTO",e[e.FREE_END=-2]="FREE_END",e[e.AUTO_50=50]="AUTO_50",e[e.AUTO_100=100]="AUTO_100",e[e.AUTO_500=500]="AUTO_500",e[e.AUTO_1000=1e3]="AUTO_1000"}(fcc=fcc||{}),function(e){(e=(e=e.type||(e.type={})).LanguageType||(e.LanguageType={})).TAIWAN="NTD",e.CHINESE="CNY",e.THAILAND="THB",e.AMERICA="USD",e.VIETNAM="VND",e.INDONESIA="IDR",e.MALAYSIA="MYR"}(fcc=fcc||{}),function(e){var t=(Object.defineProperty(n,"instance",{get:function(){return this._instance||(this._instance=new n),this._instance},enumerable:!1,configurable:!0}),n.prototype.setGameNumber=function(e){return this._gameNumber=e,this},n.prototype.setMusicVolume=function(e){return this._musicVolume=e,this},n.prototype.setEffectVolume=function(e){return this._effectVolume=e,this},n.prototype.setMusicOnMute=function(e){return this._isMusicOnMute=e,this},n.prototype.setEffectOnMute=function(e){return this._isEffectOnMute=e,this},n.prototype.setAutoCont=function(e){return this._autoCount=e,this},n.prototype.setExternallyLoadURL=function(e){return this._externallyLoadURL=e,this},n.prototype.setLanguage=function(e){return this._language=e,this},n.prototype.setAutoState=function(e){return this._isAuto=e,this},n.prototype.setSpeedState=function(e){return this._isSpeedUp=e,this},n.prototype.setFrameWorkDebug=function(e){return this._isFrameworkDebug=e,this},n.prototype.setCocosDebug=function(e){return this._cocosDebugSetting=e,this},n.prototype.setBackHomeURL=function(e){return this._backHomeURL=e,this},n.prototype.build=function(){cc.debug._resetDebugSetting(this._cocosDebugSetting),e.ErrorManager.setInstance(this),e.AudioManager.setInstance(this),e.LanguageManager.setInstance(this),e.EventManager.setInstance(this),e.LoadResManager.setInstance(this),e.ProcessManager.setInstance(this),e.SceneManager.setInstance(this),e.SlotStyleManager.setInstance(this)},Object.defineProperty(n.prototype,"externallyLoadURL",{get:function(){return this._externallyLoadURL},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"gameNumber",{get:function(){return this._gameNumber},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isAuto",{get:function(){return this._isAuto},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"autoCount",{get:function(){return this._autoCount},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isSpeedUp",{get:function(){return this._isSpeedUp},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"musicVolume",{get:function(){return this._musicVolume},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"effectVolume",{get:function(){return this._effectVolume},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"language",{get:function(){return this._language},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isFrameworkDebug",{get:function(){return this._isFrameworkDebug},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isEffectOnMute",{get:function(){return this._isEffectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isMusicOnMute",{get:function(){return this._isMusicOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"backHomeURL",{get:function(){return this._backHomeURL},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"cocosDebugSetting",{get:function(){return this._cocosDebugSetting},enumerable:!1,configurable:!0}),n);function n(){this._gameNumber=null,this._externallyLoadURL="",this._isAuto=!1,this._isSpeedUp=!1,this._autoCount=e.type.AutoType.AUTO,this._musicVolume=1,this._effectVolume=1,this._isMusicOnMute=!1,this._isEffectOnMute=!1,this._language=e.type.LanguageType.CHINESE,this._backHomeURL="",this._cocosDebugSetting=cc.debug.DebugMode.INFO,this._isFrameworkDebug=!0}e.SlotConfigManager=t}(fcc=fcc||{}),function(e){function t(e,t,n,r){this.scriptName=e,this.type=t,this.url=n,this.parameter=r}e=e.ABS||(e.ABS={}),t.head=document.getElementsByTagName("head")[0],e.ALoadScriptType=t}(fcc=fcc||{}),function(n){var o,e=(o=n.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=n.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".css"+this.parameter;n.LoadResManager.instance.scriptRes.has(t)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.rel="stylesheet",this.linkElem.type=this.type,this.linkElem.href=t,this.linkElem.onload=function(){n.LoadResManager.instance.scriptRes.add(t),n.ABS.ALoadScriptType.head.appendChild(e.linkElem),n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},n.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,n,r){r=o.call(this,e,t,n,r)||this;return r.linkElem=document.createElement("link"),r}n.CSSLoad=e}(fcc=fcc||{}),function(n){var o,e=(o=n.ABS.ALoadScriptType,__extends(t,o),t.prototype.loadScript=function(){var e=this,t=n.SlotConfigManager.instance.externallyLoadURL+"/"+this.url+"/"+this.scriptName+".js"+this.parameter;n.LoadResManager.instance.scriptRes.has(t)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,"請勿重複加載已有的外部腳本 : "+t),this.linkElem.type=this.type,this.linkElem.src=t,this.linkElem.onload=function(){n.LoadResManager.instance.scriptRes.add(t),n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!1)},this.linkElem.onerror=function(){n.LoadResManager.instance.loadScriptEventCallback(e.scriptName,!0)},n.ABS.ALoadScriptType.head.appendChild(this.linkElem)},t);function t(e,t,n,r){r=o.call(this,e,t,n,r)||this;return r.linkElem=document.createElement("script"),r}n.ScriptLoad=e}(fcc=fcc||{}),function(r){var e;function t(e,t,n,r){this.type=t,this.url=n,this.dataName=e,this.folder=r,this.beforeProgress=0,this.assetBundle=cc.assetManager.getBundle(this.folder)}e=r.ABS||(r.ABS={}),t.prototype.loadResources=function(){this.type!==cc.SceneAsset?this.assetBundle.loadDir(this.url,this.type,this.loadResProgress.bind(this),this.loadResCallBack.bind(this)):this.assetBundle.loadScene(this.dataName,cc.SceneAsset,this.loadResProgress.bind(this),this.loadResCallBack.bind(this))},t.prototype.loadResCallBack=function(e,t){e?r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,e):t instanceof cc.SceneAsset||0!=t.length||r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"無載入任何資源 "+this.url+" "),this.setResToManager(this.dataName,t)},t.prototype.loadResProgress=function(e,t){t=r.global.Util.roundDown(e/t,2);t>this.beforeProgress&&(this.updateManagerState(this.dataName,t=1<=t?.99:t,t-this.beforeProgress),this.beforeProgress=t)},t.prototype.updateProgressEnd=function(){"resources"===this.folder?(r.LoadResManager.instance.initialLoadState.set(this.dataName,1),r.LoadResManager.instance.loadMainEventCallback(this.dataName,.01,1)):(r.LoadResManager.instance.secondaryLoadState.set(this.dataName,1),r.LoadResManager.instance.loadSecondaryEventCallback(this.dataName,1))},t.prototype.updateManagerState=function(e,t,n){"resources"===this.folder?(r.LoadResManager.instance.initialLoadState.set(e,t),r.LoadResManager.instance.loadMainEventCallback(e,n,t)):(r.LoadResManager.instance.secondaryLoadState.set(e,t),r.LoadResManager.instance.loadSecondaryEventCallback(e,t))},e.ALoadType=t}(fcc=fcc||{}),function(c){var o,e=(o=c.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s=a.value;o.set(s.name,s)}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}c.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}c.ImgLoad=e}(fcc=fcc||{}),function(c){var o,e=(o=c.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value,s=a.name;c.LoadResManager.instance.musicRes.has(s)&&c.ErrorManager.instance.executeError(c.type.ErrorType.LOAD_FW,s+" 鍵值重複,請檢查該音樂資源是否已加載過"),c.LoadResManager.instance.musicRes.set(s,a)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}c.MusicLoad=e}(fcc=fcc||{}),function(s){var o,e=(o=s.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r;try{for(var o=__values(t),i=o.next();!i.done;i=o.next()){var a=i.value;if(s.LoadResManager.instance.prefabRes.has(a.name))return void s.ErrorManager.instance.executeError(s.type.ErrorType.LOAD_FW,a.name+" prefab名稱重複,請檢查是否有相同名稱prefab");s.LoadResManager.instance.prefabRes.set(a.name,a)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}s.PrefabLoad=e}(fcc=fcc||{}),function(n){var o,e=(o=n.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){n.LoadResManager.instance.scriptRes.has(e)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e+" 鍵值重複,請檢查該資源是否已加載過"),n.LoadResManager.instance.sceneRes.set(e,t),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}n.SceneLoad=e}(fcc=fcc||{}),function(d){var o,e=(o=d.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,o,i;d.LoadResManager.instance.spineRes.has(e)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,"請檢察資源是否以載入過,鍵值重複"),d.LoadResManager.instance.spineRes.set(e,t[0]);var a=e.toLowerCase().match("grid");try{for(var s=__values(t),c=s.next();!c.done;c=s.next()){var u=c.value,p=Object.keys(u.skeletonJson.animations),l=new Map;try{for(var f=(o=void 0,__values(p)),h=f.next();!h.done;h=f.next()){var y,g=h.value;!a||""===(y=g.replace(/[^0-9]/gi,""))?l.set(g,g):(l.has(y)&&d.ErrorManager.instance.executeError(d.type.ErrorType.LOAD_FW,g+" spine動畫取number有誤,請檢查該spine Animation是否有重複數字情況"),l.set(y,g))}}catch(e){o={error:e}}finally{try{h&&!h.done&&(i=f.return)&&i.call(f)}finally{if(o)throw o.error}}}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}d.SpineLoad=e}(fcc=fcc||{}),function(l){var o,e=(o=l.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,t=t[0].text.split(/[\s\n]/),o=new Map;try{for(var i=__values(t),a=i.next();!a.done;a=i.next()){var s,c=a.value.split(","),u=c[0],p=c[1];""!=u&&(s=p.replace(/['"]/g,""),o.set(u,s))}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}l.LoadResManager.instance.readFileRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}l.TextLoad=e}(fcc=fcc||{}),function(i){var e=(t.prototype.loadBundle=function(e,t,r){var o=this;if(!this.assetBundle)return this.promise=new Promise(function(){}),new Promise(function(n){o.isLoadBundle?!o.assetBundle&&o.isLoadBundle&&o.assetMethod.push(o.checkLoadType.bind(o,e,t,r,"secondaryRes")):(o.isLoadBundle=!0,cc.assetManager.loadBundle("secondaryRes",function(e,t){e&&i.ErrorManager.instance.executeError(i.type.ErrorType.LOAD_FW,e),o.assetBundle=t,n()}))})},t.prototype.executeLoad=function(e,t,n){this.checkLoadType(e,t,n,"resources")},t.prototype.executeLoadBundle=function(t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.loadBundle(t,n,r)];case 1:if(e.sent(),this.checkLoadType(t,n,r,"secondaryRes"),0!=this.assetMethod.length)for(;this.assetMethod.length;)this.assetMethod[0](),this.assetMethod.shift();return[2]}})})},t.prototype.checkLoadType=function(e,t,n,r){switch(t){case i.type.LoadType.IMG:new i.ImgLoad(e,cc.SpriteFrame,n,r).loadResources();break;case i.type.LoadType.IMG_ATLAS:new i.ImgAtlasLoad(e,cc.SpriteAtlas,n,r).loadResources();break;case i.type.LoadType.MUSIC:new i.MusicLoad(e,cc.AudioClip,n,r).loadResources();break;case i.type.LoadType.PREFAB:new i.PrefabLoad(e,cc.Prefab,n,r).loadResources();break;case i.type.LoadType.SPINE:new i.SpineLoad(e,sp.SkeletonData,n,r).loadResources();break;case i.type.LoadType.SCENE:new i.SceneLoad(e,cc.SceneAsset,null,r).loadResources();break;case i.type.LoadType.TEXT:new i.TextLoad(e,cc.TextAsset,n,r).loadResources();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"資源類型錯誤,尚無此類型載入方法")}},t.prototype.executeLoadExternalScript=function(e,t,n,r){switch(t){case i.type.LoadType.CSS:new i.CSSLoad(e,"text/css",n,r).loadScript();break;case i.type.LoadType.SCRIPT:new i.ScriptLoad(e,"text/javascript",n,r).loadScript();break;default:i.ErrorManager.instance.executeError(i.type.ErrorType.TYPE_FW,"LoadType 無法偵測")}},t);function t(e,t){this.assetMethod=new Array,this.configManager=t,this.loadResManager=e}i.LoadTypeFactory=e}(fcc=fcc||{}),function(n){var e=(t.prototype.executeLoad=function(e,t,n){this.checkRepeatTheName(e),this.loadResManager.initialLoadState.set(e,null),this.factory.executeLoad(e,t,n)},t.prototype.executeLoadBundle=function(t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return this.checkRepeatTheName(t),this.loadResManager.secondaryLoadState.set(t,null),[4,this.factory.executeLoadBundle(t,n,r)];case 1:return e.sent(),[2]}})})},t.prototype.checkRepeatTheName=function(e){this.loadResManager.initialLoadState.has(e)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e+" 此(主資源)已載入過了,或名稱重複,請檢察"),this.loadResManager.secondaryLoadState.has(e)&&n.ErrorManager.instance.executeError(n.type.ErrorType.LOAD_FW,e+" 此(次資源)已載入過了,或名稱重複,請檢察")},t.prototype.executeLoadExternalScript=function(e,t,n,r){this.factory.executeLoadExternalScript(e,t,n,r)},t);function t(e,t){this.loadResManager=e,this.factory=new n.LoadTypeFactory(e,t)}n.LoadTypeHandler=e}(fcc=fcc||{}),function(r){var e=(t.setInstance=function(e){this._instance||(this._instance=new t(e),r.loadMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.loadMainEventCallback=function(e,t,n){this.onlyResEventCallback(e,n),this.allProgress+=t/this.count,1<=this.allProgress&&(this.allProgress=.99),1==n&&(this.allProgressEndCount+=1,this.allProgressEndCount==this.count&&(this.allProgress=1)),this.callFun.has(null)&&(r.global.Util.roundDown(this.beforeProgress,2)==r.global.Util.roundDown(this.allProgress,2)||(this.beforeProgress=this.allProgress,this.callFun.get(null)(r.global.Util.roundDown(this.allProgress,2)),1<=this.allProgress&&(this.count=0,this.callFun.delete(null))))},t.prototype.loadSecondaryEventCallback=function(e,t){this.onlyResEventCallback(e,t)},t.prototype.loadScriptEventCallback=function(e,t){this.onlyResEventCallback(e,1,t)},t.prototype.onlyResEventCallback=function(e,t,n){var r;this.callFun.has(e)&&(r=this.callFun.get(e),1==t&&this.callFun.delete(e),n?r(t,n):r(t))},t.prototype.loadAsset=function(e,t,n,r){return this.count+=1,r&&(n=n+"/"+this.configManager.language),this.loadTypeHandler.executeLoad(e,t,n),this},t.prototype.loadBundle=function(e,t,n,r){return r&&(n=n+"/"+this.configManager.language),this.loadTypeHandler.executeLoadBundle(e,t,n).then(),this},t.prototype.callback=function(e,t){if(t){if(!this.callFun.has(t))return this.callFun.set(t,e),this;r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"如果拿取該資源進度,請勿重複callback")}else this.callFun.has(null)?r.ErrorManager.instance.executeError(r.type.ErrorType.LOAD_FW,"如果拿取總進度,請勿在之前資源尚未加載完前,重複callback"):this.callFun.set(null,e)},t.prototype.getLoadState=function(e,t){return 1==this._initialLoadState.get(e)},t.prototype.loadExternalScript=function(e,t,n,r){return this.loadTypeHandler.executeLoadExternalScript(e,t,n,r=void 0===r?"":r),this},t.prototype.remove=function(e){switch(e){case r.type.LoadType.SPINE:this.spineRes.clear();break;case r.type.LoadType.MUSIC:this.musicRes.clear();break;case r.type.LoadType.PREFAB:this.prefabRes.clear();break;case r.type.LoadType.SCENE:this.sceneRes.clear();break;case r.type.LoadType.TEXT:this.readFileRes.clear()}},Object.defineProperty(t.prototype,"initialLoadState",{get:function(){return this._initialLoadState},set:function(e){this._initialLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"secondaryLoadState",{get:function(){return this._secondaryLoadState},set:function(e){this._secondaryLoadState=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"imgRes",{get:function(){return this._imgRes},set:function(e){this._imgRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spineRes",{get:function(){return this._spineRes},set:function(e){this._spineRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"readFileRes",{get:function(){return this._readFileRes},set:function(e){this._readFileRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"prefabRes",{get:function(){return this._prefabRes},set:function(e){this._prefabRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicRes",{get:function(){return this._musicRes},set:function(e){this._musicRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptRes",{get:function(){return this._scriptRes},set:function(e){this._scriptRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sceneRes",{get:function(){return this._sceneRes},set:function(e){this._sceneRes=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scriptLoadState",{get:function(){return this._scriptLoadState},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.loadTypeHandler=new r.LoadTypeHandler(this,e),this._initialLoadState=new Map,this._secondaryLoadState=new Map,this._scriptLoadState=new Map,this._imgRes=new Map,this._spineRes=new Map,this._readFileRes=new Map,this._prefabRes=new Map,this.callFun=new Map,this._musicRes=new Map,this._scriptRes=new Set,this._sceneRes=new Map,this.count=0,this.allProgress=0,this.beforeProgress=0,this.allProgressEndCount=0}r.LoadResManager=e}(fcc=fcc||{}),function(o){var i;(e=i=i||{})[e.STOP=-1]="STOP",e[e.PLAYING=1]="PLAYING",e[e.PAUSE=2]="PAUSE";var e=(t.prototype.play=function(e,t){var n=t.get("volume"),r=t.get("loop"),t=cc.audioEngine.getState(this.musicID);o.LoadResManager.instance.musicRes.has(e)?t!=i.PAUSE?(t==i.PLAYING&&this.stop(),t=o.LoadResManager.instance.musicRes.get(e),r=cc.audioEngine.playMusic(t,r),cc.audioEngine.setVolume(r,n),this.musicID=r):cc.audioEngine.resume(this.musicID):o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(){cc.audioEngine.setVolume(this.musicID,0),cc.audioEngine.stop(this.musicID)},t.prototype.pause=function(){cc.audioEngine.getState(this.musicID)==cc.audioEngine.AudioState.PLAYING&&cc.audioEngine.pause(this.musicID)},t);function t(){this.musicID=null}o.MusicController=e}(fcc=fcc||{}),function(a){var e=(t.prototype.play=function(e,t){var n=t.get("volume"),r=t.get("canSuperimpose"),o=t.get("loop"),i=this.effectID.get(e),t=cc.audioEngine.getState(i)!=cc.audioEngine.AudioState.ERROR;a.LoadResManager.instance.musicRes.has(e)?r===a.type.AudioStateType.NOT_PLAYING&&t||(r===a.type.AudioStateType.CLEAR_TO_REPLAY&&t&&cc.audioEngine.stop(i),i=a.LoadResManager.instance.musicRes.get(e),o=cc.audioEngine.playEffect(i,o),cc.audioEngine.setVolume(o,n),this.effectID.set(e,o)):a.ErrorManager.instance.executeError(a.type.ErrorType.AUDIO_FW,e+" 無此資源,請檢察資源類 musicRes內的資源是否錯誤")},t.prototype.stop=function(e){this.effectID.has(e)&&(cc.audioEngine.stop(this.effectID.get(e)),this.effectID.delete(e))},t.prototype.stopAll=function(){var t,e;try{for(var n=__values(this.effectID.keys()),r=n.next();!r.done;r=n.next()){var o=r.value;cc.audioEngine.stop(this.effectID.get(o))}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.effectID.clear()},t);function t(){this.effectID=new Map}a.EffectController=e}(fcc=fcc||{}),function(i){var e=(t.prototype.initializeData=function(){this.musicNormalData=new Map,this.effectNormalData=new Map,this.musicNormalData.set("volume",this.musicVolume),this.musicNormalData.set("loop",this.loop),this.effectNormalData.set("canSuperimpose",i.type.AudioStateType.NOT_PLAYING),this.effectNormalData.set("volume",this.effectVolume),this.effectNormalData.set("loop",this.loop)},t.prototype.settingMusic=function(e,t,n){void 0===t&&(t=this.musicVolume),void 0===n&&(n=this.loop);var r=new Map;r.set("volume",t),r.set("loop",n),this.musicData.set(e,r)},t.prototype.settingEffect=function(e,t,n,r){void 0===t&&(t=i.type.AudioStateType.NOT_PLAYING),void 0===n&&(n=this.musicVolume),void 0===r&&(r=this.loop);var o=new Map;o.set("canSuperimpose",t),o.set("volume",n),o.set("loop",r),this.effectData.set(e,o)},t.prototype.musicPlay=function(e){e.trim()&&(this.audioManager.musicOnMute||(this.musicData.has(e)?this.musicController.play(e,this.musicData.get(e)):(this.musicData.set(e,this.musicNormalData),this.musicController.play(e,this.musicNormalData))))},t.prototype.effectPlay=function(e){e.trim()&&(this.audioManager.effectOnMute||(this.effectData.has(e)?this.effectController.play(e,this.effectData.get(e)):(this.effectData.set(e,this.effectNormalData),this.effectController.play(e,this.effectNormalData))))},t.prototype.musicStop=function(){this.musicController.stop()},t.prototype.musicPause=function(){this.musicController.pause()},t.prototype.effectStop=function(e){this.effectController.stop(e)},t.prototype.effectStopAll=function(){this.effectController.stopAll()},t.prototype.getMusicState=function(e){return this.musicData.get(e)},t.prototype.getEffectState=function(e){return this.effectData.get(e)},t);function t(e,t){this.audioManager=e,this.configManager=t,this.musicVolume=this.configManager.musicVolume,this.effectVolume=this.configManager.effectVolume,this.canSuperimpose=!1,this.musicOnMute=this.configManager.isMusicOnMute,this.effectOnMute=this.configManager.isEffectOnMute,this.loop=!1,this.musicData=new Map,this.effectData=new Map,this.musicController=new i.MusicController,this.effectController=new i.EffectController,this.initializeData()}i.AudioFactory=e}(fcc=fcc||{}),function(o){var i=(t.setInstance=function(e){this._instance||(this._instance=new t(e),o.audioMgr=this._instance)},Object.defineProperty(t,"instance",{get:function(){if(this._instance)return this._instance;o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),t.prototype.settingMusic=function(e,t,n){return this.factory.settingMusic(e,t,n),this},t.prototype.settingEffect=function(e,t,n,r){return t===o.type.AudioStateType.SUPERIMPOSE&&r&&o.ErrorManager.instance.executeError(o.type.ErrorType.AUDIO_FW,e+" 使用疊加效果時不建議使用循環撥放"),this.factory.settingEffect(e,t,n,r),this},t.prototype.musicPlay=function(e){this.factory.musicPlay(e)},t.prototype.effectPlay=function(e){this.factory.effectPlay(e)},t.prototype.musicStop=function(){this.factory.musicStop()},t.prototype.musicPause=function(){this.factory.musicPause()},t.prototype.effectStop=function(e){this.factory.effectStop(e)},t.prototype.effectStopAll=function(){this.factory.effectStopAll()},t.prototype.getMusicState=function(e){return this.factory.getMusicState(e)},t.prototype.getEffectState=function(e){return this.factory.getEffectState(e)},t.prototype.updateEffectOnMute=function(){return this._effectOnMute=!this._effectOnMute,this._effectOnMute&&this.factory.effectStopAll(),this._effectOnMute},t.prototype.updateMusicOnMute=function(){return this._musicOnMute=!this._musicOnMute,this._musicOnMute&&this.musicPause(),this._musicOnMute},Object.defineProperty(t.prototype,"effectOnMute",{get:function(){return this._effectOnMute},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"musicOnMute",{get:function(){return this._musicOnMute},enumerable:!1,configurable:!0}),t);function t(e){this.configManager=e,this.factory=new o.AudioFactory(this,e),this._effectOnMute=this.configManager.isEffectOnMute,this._musicOnMute=this.configManager.isMusicOnMute}o.AudioManager=i,o.Music=function(o){return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicPlay(o),r.call.apply(r,__spreadArray([this],__read(e)))}}},o.MusicStop=function(){return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.instance.musicStop(),r.call.apply(r,__spreadArray([this],__read(e)))}}},o.Effect=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectPlay(e)}),r.call.apply(r,__spreadArray([this],__read(e)))}}},o.EffectStop=function(){for(var o=[],e=0;e<arguments.length;e++)o[e]=arguments[e];return function(e,t,n){n.enumerable=!0;var r=n.value;n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.forEach(function(e){i.instance.effectStop(e)}),r.call.apply(r,__spreadArray([this],__read(e)))}}}}(fcc=fcc||{}),function(l){var e={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},t={fontSize:36,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"微軟正黑體"},n={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},r={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},o={fontSize:30,lineHeight:46,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},i={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},a={fontSize:30,lineHeight:40,textScale:{default:1,title:1.2,text:.8},fontFamily:"Arial Unicode MS,Arial"},s=(c.setInstance=function(e){this._instance||(this._instance=new c(e),l.languageMgr=this._instance)},Object.defineProperty(c,"instance",{get:function(){if(this._instance)return this._instance;l.ErrorManager.instance.executeError(l.type.ErrorType.AUDIO_FW,"該類尚未實例化")},enumerable:!1,configurable:!0}),c.prototype.initDefaultStyle=function(){this._style.set(l.type.LanguageType.TAIWAN,t),this._style.set(l.type.LanguageType.CHINESE,e),this._style.set(l.type.LanguageType.AMERICA,n),this._style.set(l.type.LanguageType.INDONESIA,i),this._style.set(l.type.LanguageType.THAILAND,o),this._style.set(l.type.LanguageType.MALAYSIA,a),this._style.set(l.type.LanguageType.VIETNAM,r)},c.prototype.addStyle=function(e,t){this._style.set(e,t)},c.prototype.updateLanguage=function(e){var t,n,r,o;if(this._nowLang!=e){this._nowLang=e;try{for(var i=__values(this.allLanguageLabel),a=i.next();!a.done;a=i.next()){var s=a.value;try{for(var c=(r=void 0,__values(s.keys())),u=c.next();!u.done;u=c.next()){var p=u.value,l=s.get(p);this.updateText(p,l)}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=c.return)&&o.call(c)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}this.updateStyle(!1)}},c.prototype.setLanguage=function(e){this.languageCache||(this.languageCache=e[this._nowLang])},c.prototype.getLanguage=function(){return this._nowLang},c.prototype.getText=function(e){return this.languageCache[e]},c.prototype.getAllText=function(){return this.languageCache},c.prototype.reTakeLanguageBuffer=function(e,t){try{this.languageCache=t?e[t]:e[this._nowLang]}catch(e){console.log("window.language_Mode 查找不到該語系",e)}},c.prototype.removeStringBuffer=function(){},c.prototype.updateText=function(e,t){return t&&(e.string=this.getText(t)),this._nowLanguageLabels.set(e,t),this},c.prototype.updateStyle=function(e,t){var n,r,o=this._nowLang;this._style.has(this._nowLang)||(o=l.type.LanguageType.AMERICA);var i=this._style.get(o).fontFamily,a=t||this._style.get(o).fontSize,s=this._style.get(o).lineHeight;try{for(var c=__values(this._nowLanguageLabels.keys()),u=c.next();!u.done;u=c.next()){var p=u.value;p.fontFamily=i,p.fontSize=a,p.lineHeight=s}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}e&&this.allLanguageLabel.push(this._nowLanguageLabels),this._nowLanguageLabels.clear()},c);function c(e){this.configManager=e,this._style=new Map,this.allLanguageLabel=new Array,this._nowLanguageLabels=new Map,this.initDefaultStyle(),this._nowLang=this.configManager.language}l.LanguageManager=s}(fcc=fcc||{}),function(t){var e=(n.instance=function(){return this._instance||(this._instance=new n),this._instance},n.prototype.setNotification=function(e){return this.notificationToMap.has(e.TAG_NAME)||this.notificationToMap.set(e.TAG_NAME,e),this},n.prototype.getNotification=function(e){if(this.notificationToMap.has(e))return this.notificationToMap.get(e);t.ErrorManager.instance.executeError(t.type.ErrorType.LISTENER_FW,e+" :  該key尚未加入推撥事件中,你需先執行 setNotification(type:IBaseNotification)方法")},n.prototype.hasNotification=function(e){return this.notificationToMap.has(e)},n.prototype.getAllNotifications=function(){return this.notificationToMap},n);function n(){this.notificationToMap=new Map}t.NotificationManager=e}(fcc=fcc||{}),function(e){var t=(n.prototype.getName=function(){return this.name},n.prototype.get=function(){return 0<this.pool.size()?this.pool.get():this.getNode()},n.prototype.getNode=function(){return this.prefab?cc.instantiate(this.prefab):(console.error(" 预制体没有赋值 "),null)},n.prototype.size=function(){return this.pool.size()},n.prototype.put=function(e){this.pool.put(e)},n.prototype.clear=function(){this.pool.clear()},n);function n(e,t,n){this.name=e,this.pool=new cc.NodePool,this.prefab=t;for(var r=0;r<n;r++){var o=this.getNode();this.pool.put(o)}}e.CCNodePool=t}(fcc=fcc||{}),function(e){var t=(n.prototype.get=function(){return 0<this.list.length?this.list.shift():this.pool.get()},n.prototype.getPool=function(){return this.pool},n.prototype.size=function(){return this.pool.size()+this.list.length},n.prototype.put=function(e,t){(t=void 0===t?!1:t)?this.pool.put(e):(this.list.push(e),e.stopAllActions(),e.active=!1)},n.prototype.clear=function(){this.pool.clear(),this.list.length=0},n);function n(e){this.list=[],this.pool=e}e.SelfPool=t}(fcc=fcc||{}),function(r){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.init=function(e,t,n){this.pools.has(e)||this.pools.set(e,new r.SelfPool(new r.CCNodePool(e,t,n)))},t.prototype.getPool=function(e){return this.pools.get(e).getPool()},t.prototype.get=function(e){if(this.pools.has(e)){var t=this.pools.get(e).get();return this.nameMap.has(t)||t.name==e||this.nameMap.set(t,e),t}return null},t.prototype.put=function(e,t){void 0===t&&(t=!1);var n=this.nameMap.get(e);this.pools.has(n)?(this.pools.get(n).put(e,t),this.nameMap.delete(e)):cc.warn(" not have name ",n," ,go.name ",e.name)},t.prototype.clear=function(e){this.pools.has(e)&&(this.pools.get(e).clear(),this.pools.delete(e))},t.prototype.clearAll=function(){for(var e in this.pools)this.clear(e);this.pools.clear()},t);function t(){this.pools=new Map,this.nameMap=new Map}r.NodePoolManager=e}(fcc=fcc||{}),function(e){e.configMgr=e.SlotConfigManager.instance,e.nodePoolMgr=e.NodePoolManager.instance,e.notificationMgr=function(){return e.NotificationManager.instance()}}(fcc=fcc||{}),globalThis.fcc=fcc,globalThis.FCC_VERSION="1.0.1",function(e){function t(){}e=e.global||(e.global={}),t.addButtonEvent=function(e,t,n,r){var o=n.node,i=cc.js.getClassName(n),n=new cc.Component.EventHandler;n.target=o,n.component=i,n.handler=t,!r&&0!=r||(n.customEventData=r),e.clickEvents.push(n)},t.disableButton=function(e){e.interactable=!1},t.enableButton=function(e){e.interactable=!0},t.addTouchStartEvent=function(e,t,n,r){e.on(cc.Node.EventType.TOUCH_START,t,n,r)},t.offTouchStartEvent=function(e,t,n,r){e.off(cc.Node.EventType.TOUCH_START,t,n,r)},e.Button=t}(fcc=fcc||{}),function(e){function t(){}e=e.global||(e.global={}),t.getNodeOneChildren=function(e){for(var t=new Map,n=0;n<e.childrenCount;n++)for(var r=e.children[n],o=0;o<=r.childrenCount;o++)t.set(e.children[n].name,r);return t},t.getNodeTowChildren=function(e){for(var t=new Map,n=0;n<e.childrenCount;n++)for(var r=e.children[n],o=r.children[n].name,i=0;i<=r.childrenCount;i++)0==i?t.set(r.children[n].name,r):(o+="/"+r.children[i-1].name,t.set(o,r.children[i-1]),o=r.children[n].name);return t},e.Prefab=t}(fcc=fcc||{}),function(e){var t=(n.prototype.get=function(e){return 0<this.buffList.length?this.buffList.shift():e()},n.prototype.put=function(e){this.buffList.push(e)},n.prototype.size=function(){return this.buffList.length},n.prototype.destroy=function(){this.buffList.length=0},n);function n(e){this.buffList=[],this.key=e}e.ObjectPool=t}(fcc=fcc||{}),function(n){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.get=function(e,t){return this.map.has(e)||this.map.set(e,new n.ObjectPool(e)),this.map.get(e).get(t)},t.prototype.put=function(e,t){this.map.has(e)&&this.map.get(e).put(t)},t.prototype.size=function(e){return this.map.has(e)?this.map.get(e).size():0},t.prototype.destroy=function(){this.map.clear()},t);function t(){this.map=new Map}n.PoolManager=e}(fcc=fcc||{}),function(e){var t=(n.prototype.getClassName=function(){return this.className},n.prototype.get=function(e){return(0<this.pool.length?this.pool.shift():null)||new e},n.prototype.put=function(e){this.pool.push(e)},n.prototype.clear=function(){this.pool=[]},n);function n(e,t,n){void 0===n&&(n=0),this.pool=[],this.className=e;for(var r=0;r<n;r++)this.pool.push(new t)}e.TSObjectPool=t}(fcc=fcc||{}),function(r){var e=(Object.defineProperty(t,"instance",{get:function(){return this._instance||(this._instance=new t),this._instance},enumerable:!1,configurable:!0}),t.prototype.init=function(e,t,n){void 0===n&&(n=1),this.pools[e]||this.pools.set(e,new r.TSObjectPool(e,t,n))},t.prototype.get=function(e,t,n){return void 0===n&&(n=1),this.pools.has(e)||this.pools.set(e,new r.TSObjectPool(e,t,n)),this.pools.get(e).get(t)},t.prototype.put=function(e,t){e=this.pools.get(e);e&&e.put(t)},t);function t(){this.pools=new Map}r.TSPoolManager=e}(fcc=fcc||{}),function(e){var t;t=e.type||(e.type={}),(e=t.GameStateType||(t.GameStateType={})).STANDBY="STANDBY",e.PLAYING="PLAYING",e.WINING="WINING",e.FREEING="FREEING",(t=t.ProcessType||(t.ProcessType={})).FREE="FREE",t.NORMAL="NORMAL"}(fcc=fcc||{}),function(i){var e=(t.prototype.initProcess=function(e){var t,n;if(e)this.processToMap.has(e)?this.processToMap.get(e).executionContent.onCreate():i.ErrorManager.instance.executeError(i.type.ErrorType.PROCESS_FW,"查找不到該流程,請確認是否已綁定進框架中");else{e=this.processToMap.values();try{for(var r=__values(e),o=r.next();!o.done;o=r.next())o.value.executionContent.onCreate()}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}}},t.prototype.setProcess=function(e,t){this.processToMap.set(e,t)},t.prototype.getProcess=function(e){return this.processToMap.get(e)},t.prototype.getAllProcess=function(){return this.processToMap},t.prototype.changeProcess=function(e){this.processToMap.has(e)?this.process=this.processToMap.get(e):i.ErrorManager.instance.executeError(i.type.ErrorType.PROCESS_FW,e+" 搜尋不到此流程,請檢查流程是否添加")},t.prototype.useProcess=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.process.start()];case 1:return e.sent(),[2]}})})},t);function t(e){this.gameManager=e,this.processToMap=new Map}i.GameProcessFactory=e}(fcc=fcc||{}),(fcc||(fcc={})).ABaseSlotTemplate=function(e,t){},function(e){(e=(e=e.type||(e.type={})).ServerEventType||(e.ServerEventType={})).BET_RESULT="BET_RESULT",e.FREE_SPIN_RESULT="FREE_SPIN_RESULT",e.CAN_PLAY_GAME="CAN_PLAY_GAME",e.GET_GAME_HISTORY_RESULT="GET_GAME_HISTORY_RESULT",e.GET_HISTORY_DETAIL_RESULT="GET_HISTORY_DETAIL_RESULT",e.GROUP_ID="GROUP_ID",e.TABLE_INFO="TABLE_INFO",e.WARNING="WARNING"}(fcc=fcc||{}),function(p){var o,e=(o=p.ABS.ALoadType,__extends(t,o),t.prototype.setResToManager=function(e,t){var n,r,o=new Map;try{for(var i=__values(t[0].getSpriteFrames()),a=i.next();!a.done;a=i.next()){var s,c,u=a.value;-1!=e.toLowerCase().indexOf("grid")?(s=u.name.replace(/[^0-9]/gi,""),o.set(s,u)):(c=u.name,o.set(c,u))}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}p.LoadResManager.instance.imgRes.set(e,o),this.updateProgressEnd()},t);function t(e,t,n,r){return o.call(this,e,t,n,r)||this}p.ImgAtlasLoad=e}(fcc=fcc||{}),function(e){function t(e,t){this._isPermanent=!1,this._self=t,this._callFun=e}e=e.ABS||(e.ABS={}),t.prototype.pushNotification=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];(e=this._callFun).call.apply(e,__spreadArray([this._self],__read(t)))},Object.defineProperty(t.prototype,"isPermanent",{get:function(){return this._isPermanent},set:function(e){this._isPermanent=e},enumerable:!1,configurable:!0}),e.ABaseObserver=t}(fcc=fcc||{}),function(e){var t=(n.prototype.onExecution=function(){return this._process.add(this._executionContent.onExecution),this},n.prototype.onEnd=function(){return this._process.add(this._executionContent.onEnd),this},n.prototype.onChangeStatus=function(){return this._process.add(this._executionContent.onChangeStatus),this},n.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var t,n,r,o;return __generator(this,function(e){switch(e.label){case 0:e.trys.push([0,5,6,7]),t=__values(this._process),n=t.next(),e.label=1;case 1:return n.done?[3,4]:[4,n.value.apply(this._executionContent)];case 2:e.sent(),e.label=3;case 3:return n=t.next(),[3,1];case 4:return[3,7];case 5:return r=e.sent(),r={error:r},[3,7];case 6:try{n&&!n.done&&(o=t.return)&&o.call(t)}finally{if(r)throw r.error}return[7];case 7:return[2]}})})},Object.defineProperty(n.prototype,"process",{get:function(){return this._process},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"executionContent",{get:function(){return this._executionContent},enumerable:!1,configurable:!0}),n);function n(e){this._executionContent=e,this._process=new Set}e.GameProcess=t}(fcc=fcc||{}),function(e){var t=(n.prototype.onCustomizeStart=function(){return this._process.add(this._executionContainer.onCustomizeStart),this},n.prototype.onSineInGrid=function(){return this._process.add(this._executionContainer.onSineInGrid),this},n.prototype.onRunning=function(){return this._process.add(this._executionContainer.onRunning),this},n.prototype.onCustomizeEnd=function(){return this._process.add(this._executionContainer.onCustomizeEnd),this},n.prototype.onShowAnswer=function(){return this._process.add(this._executionContainer.onShowAnswer),this},n.prototype.onChangeStatus=function(){return this._process.add(this._executionContainer.onChangeStatus),this},n.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var t,n,r,o;return __generator(this,function(e){switch(e.label){case 0:e.trys.push([0,5,6,7]),t=__values(this._process),n=t.next(),e.label=1;case 1:return n.done?[3,4]:[4,n.value.apply(this._executionContainer)];case 2:e.sent(),e.label=3;case 3:return n=t.next(),[3,1];case 4:return[3,7];case 5:return r=e.sent(),r={error:r},[3,7];case 6:try{n&&!n.done&&(o=t.return)&&o.call(t)}finally{if(r)throw r.error}return[7];case 7:return[2]}})})},Object.defineProperty(n.prototype,"executionContent",{get:function(){return this._executionContainer},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"process",{get:function(){return this._process},enumerable:!1,configurable:!0}),n);function n(e){this._executionContainer=e,this._process=new Set}e.SlotGameProcess=t}(fcc=fcc||{}),function(e){function t(e){this._slotStyleManager=e}e=e.ABS||(e.ABS={}),t.prototype.setTag=function(e){return this._tag=e,this},t.prototype.setSlotTurnCount=function(e){return this._slotTurnCount=e,this},t.prototype.setSlotGridHeight=function(e){return this._slotGridHeight=e,this},t.prototype.setSlotGirdSpeed=function(e){return this._slotGirdSpeed=e,this},t.prototype.setSpeedUpMultiple=function(e){return this._speedUpMultiple=e,this},t.prototype.setStopNowSpeedMultiple=function(e){return this._stopNowSpeedMultiple=e,this},t.prototype.setSlotRowGridCount=function(e){return this._slotRowGridCount=e,this},t.prototype.setColumnIntervalTime=function(e){return this._columnIntervalTime=e,this},t.prototype.setSlotColumnToTween=function(e){return this._slotColumnToTween=e,this},t.prototype.setGridNodeToMap=function(e){return this._gridNodeToMap=e,this},t.prototype.setSineInEasing=function(e){return this._sineInEasing=e,this},t.prototype.setSineOutEasing=function(e){return this._sineOutEasing=e,this},t.prototype.setLookAtSpeed=function(e){return this._lookAtSpeed=e,this},t.prototype.setSlotRowTime=function(e){return this._slotRowTime=e,this},t.prototype.setLookAtTime=function(e){return this._lookAtTime=e,this},t.prototype.setResultModel=function(e){return this._resultModel=e,this},t.prototype.complete=function(){this._slotStyleManager.build(this)},Object.defineProperty(t.prototype,"columnIntervalTime",{get:function(){return this._columnIntervalTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gridNodeToMap",{get:function(){return this._gridNodeToMap},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotColumnToTween",{get:function(){return this._slotColumnToTween},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGirdSpeed",{get:function(){return this._slotGirdSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotGridHeight",{get:function(){return this._slotGridHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowGridCount",{get:function(){return this._slotRowGridCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotTurnCount",{get:function(){return this._slotTurnCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"speedUpMultiple",{get:function(){return this._speedUpMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stopNowSpeedMultiple",{get:function(){return this._stopNowSpeedMultiple},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotStyleManager",{get:function(){return this._slotStyleManager},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tag",{get:function(){return this._tag},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resultModel",{get:function(){return this._resultModel},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sineInEasing",{get:function(){return this._sineInEasing},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sineOutEasing",{get:function(){return this._sineOutEasing},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtSpeed",{get:function(){return this._lookAtSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"slotRowTime",{get:function(){return this._slotRowTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lookAtTime",{get:function(){return this._lookAtTime},enumerable:!1,configurable:!0}),e.ABaseSlotSetting=t}(fcc=fcc||{}),function(e){var t,n=(t=e.ABS.ABaseSlotSetting,__extends(r,t),r.prototype.setGridImg=function(e){return this._gridImg=e,this},r.prototype.setGirdSpriteToMap=function(e){return this._gridSpriteToMap=e,this},Object.defineProperty(r.prototype,"gridSpriteToMap",{get:function(){return this._gridSpriteToMap},enumerable:!1,configurable:!0}),r.prototype.setResultModel=function(e){return t.prototype.setResultModel.call(this,e)},Object.defineProperty(r.prototype,"gridImg",{get:function(){return this._gridImg},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"resultModel",{get:function(){return this._resultModel},enumerable:!1,configurable:!0}),r);function r(){return null!==t&&t.apply(this,arguments)||this}e.NormalSetting=n}(fcc=fcc||{}),function(e){var t,n=(t=e.NormalSetting,__extends(r,t),r.prototype.setSymbolBlurImg=function(e){return this._symbolBlurImg=e,this},Object.defineProperty(r.prototype,"symbolBlurImg",{get:function(){return this._symbolBlurImg},enumerable:!1,configurable:!0}),r);function r(){return null!==t&&t.apply(this,arguments)||this}e.NormalBlurImageSetting=n}(fcc=fcc||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

},{}]},{},[1])