{"version":3,"sources":["assets\\script\\Framework\\LoadResources\\ILoad\\ALoadType.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {ErrorType} from \"../../Error/Enum/ErrorManagerEnum\";\r\nimport ErrorManager from \"../../Error/ErrorManager\";\r\nimport Util from \"../../GlobalMethod/Util\";\r\nimport LoadResManager from \"../LoadResManager\";\r\n\r\nexport default abstract class ALoadType implements ILoadType {\r\n\r\n    protected type: any;\r\n    protected url: string;\r\n    protected dataName: string;\r\n    protected folder: string\r\n    private beforeProgress: number;\r\n    private assetBundle: cc.AssetManager.Bundle\r\n\r\n    protected constructor(dataName: string, type: any, url: string, folder: string) {\r\n\r\n        this.type = type;               //當前要獲取的資源類型\r\n        this.url = url;                 //獲取的地址\r\n        this.dataName = dataName;       //要拿取資源的key\r\n        this.folder = folder            //父資料夾名稱,默認 resources\r\n        this.beforeProgress = 0;        //當前上次的載入進度\r\n        this.assetBundle = cc.assetManager.getBundle(this.folder);\r\n    }\r\n\r\n    /**\r\n     * 加載資源方法\r\n     */\r\n    public loadResources() {\r\n        if (this.type !== cc.SceneAsset) {\r\n            this.assetBundle.loadDir(this.url, this.type, this.loadResProgress.bind(this), this.loadResCallBack.bind(this));\r\n        } else {\r\n            //載入scene資源,如果名稱錯誤會scene名稱錯誤會無法拿取資源\r\n            //載入scene資源,無須URL地址,但是2.4.X需要放在Resource底下\r\n            this.assetBundle.loadScene(this.dataName, cc.SceneAsset, this.loadResProgress.bind(this), this.loadResCallBack.bind(this));\r\n        }\r\n    }\r\n\r\n    private loadResCallBack(error: Error, assets: [] | cc.SceneAsset) {\r\n        if (error) {\r\n            ErrorManager.instance.executeError(ErrorType.LoadErrorFW, error);\r\n        } else if (!(assets instanceof cc.SceneAsset) && assets.length == 0) {\r\n            ErrorManager.instance.executeError(ErrorType.LoadErrorFW, `無載入任何資源 ${this.url} `);\r\n        }\r\n\r\n        this.setResToManager(this.dataName, assets);\r\n\r\n    }\r\n\r\n    private loadResProgress(complete: number, TotalAmount: number) {\r\n\r\n        //獲取百分比\r\n        let progress = Util.myFloor((complete / TotalAmount), 2);\r\n\r\n        if (progress > this.beforeProgress) {\r\n\r\n            //不從這裡判斷狀態,目的解決異步操作\r\n            //當資源都載入到LoadManager時才回傳以載入完成的狀態\r\n            if (progress >= 1) {\r\n                progress = 0.99\r\n            }\r\n\r\n            //回傳上次與這次之間增加了多少進度\r\n            this.updateManagerState(this.dataName, progress, (progress - this.beforeProgress));\r\n            this.beforeProgress = progress;\r\n        }\r\n    }\r\n\r\n    protected updateProgressEnd() {\r\n        //目的解決異步操作\r\n        //當資源都載入到LoadManager時才回傳以載入完成的狀態\r\n        if (this.folder === \"resources\") {\r\n            LoadResManager.instance.initialLoadState.set(this.dataName, 1);\r\n            LoadResManager.instance.loadMainEventCallback(this.dataName, 0.01, 1);\r\n        } else {\r\n            LoadResManager.instance.secondaryLoadState.set(this.dataName, 1);\r\n            LoadResManager.instance.loadSecondaryEventCallback(this.dataName, 1);\r\n        }\r\n    }\r\n\r\n    protected updateManagerState(key: string, state: number, update: number) {\r\n        if (this.folder === \"resources\") {\r\n            LoadResManager.instance.initialLoadState.set(key, state);\r\n            LoadResManager.instance.loadMainEventCallback(key, update, state);\r\n        } else {\r\n            LoadResManager.instance.secondaryLoadState.set(key, state);\r\n            LoadResManager.instance.loadSecondaryEventCallback(key, state);\r\n        }\r\n    }\r\n\r\n    protected abstract setResToManager(dataName: string, asset: any):void;\r\n\r\n}"]}