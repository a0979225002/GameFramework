{"version":3,"sources":["assets\\script\\Framework\\LoadResources\\LoadTypeHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mEAAyD;AACzD,sDAAiD;AAGjD,mDAA8C;AAC9C,qDAAgD;AAEhD;IAII;QAEI,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAe,EAAE,CAAC;IAEzC,CAAC;IAED;;;;;OAKG;IACI,qCAAW,GAAlB,UAAmB,IAAY,EAAE,IAAc,EAAE,GAAW;QAExD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAE9B,wBAAc,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEzD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAE9C,CAAC;IAED;;;;;OAKG;IACU,2CAAiB,GAA9B,UAA+B,IAAY,EAAE,IAAc,EAAE,GAAW;;;;;wBAEpE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;wBAE9B,wBAAc,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC3D,qBAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,EAAA;;wBAArD,SAAqD,CAAC;;;;;KACzD;IAEO,4CAAkB,GAA1B,UAA2B,IAAW;QAElC,IAAI,wBAAc,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACpD,sBAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAAS,CAAC,WAAW,EAAK,IAAI,gHAAwB,CAAC,CAAC;SAC9F;QACD,IAAI,wBAAc,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtD,sBAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAAS,CAAC,WAAW,EAAK,IAAI,gHAAwB,CAAC,CAAC;SAC9F;IACL,CAAC;IAED;;;;;OAKG;IACH,mDAAyB,GAAzB,UAA0B,IAAY,EAAE,IAAc,EAAE,GAAW;QAE/D,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAE5D,CAAC;IAEL,sBAAC;AAAD,CA9DA,AA8DC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import {ErrorType} from \"../Error/Enum/ErrorManagerEnum\";\r\nimport ErrorManager from \"../Error/ErrorManager\";\r\nimport {LoadType} from \"./Enum/LoadEnum\";\r\nimport ILoadFactory from \"./ILoad/ILoadFactory\";\r\nimport LoadResManager from \"./LoadResManager\";\r\nimport LoadTypeFactory from \"./LoadTypeFactory\";\r\n\r\nexport default class LoadTypeHandler implements ILoadFactory {\r\n\r\n    private factory: LoadTypeFactory;\r\n\r\n    constructor() {\r\n\r\n        this.factory = new LoadTypeFactory();\r\n\r\n    }\r\n\r\n    /**\r\n     * 檢測當前Type,做各自對應的加載動作\r\n     * @param name\r\n     * @param type\r\n     * @param url\r\n     */\r\n    public executeLoad(name: string, type: LoadType, url: string) {\r\n\r\n        this.checkRepeatTheName(name);\r\n\r\n        LoadResManager.instance.initialLoadState.set(name, null);\r\n\r\n        this.factory.executeLoad(name, type, url);\r\n\r\n    }\r\n\r\n    /**\r\n     * 執行Bundle載入動作\r\n     * @param name\r\n     * @param type\r\n     * @param url\r\n     */\r\n    public async executeLoadBundle(name: string, type: LoadType, url: string) {\r\n\r\n        this.checkRepeatTheName(name);\r\n\r\n        LoadResManager.instance.secondaryLoadState.set(name, null);\r\n        await this.factory.executeLoadBundle(name, type, url);\r\n    }\r\n\r\n    private checkRepeatTheName(name:string){\r\n\r\n        if (LoadResManager.instance.initialLoadState.has(name)) {\r\n            ErrorManager.instance.executeError(ErrorType.LoadErrorFW, `${name} 此(主資源)已載入過了,或名稱重複,請檢察`);\r\n        }\r\n        if (LoadResManager.instance.secondaryLoadState.has(name)) {\r\n            ErrorManager.instance.executeError(ErrorType.LoadErrorFW, `${name} 此(次資源)已載入過了,或名稱重複,請檢察`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加載外部腳本\r\n     * @param {string} name\r\n     * @param {LoadType} type\r\n     * @param {string} url\r\n     */\r\n    executeLoadExternalScript(name: string, type: LoadType, url: string) {\r\n\r\n        this.factory.executeLoadExternalScript(name, type, url);\r\n\r\n    }\r\n\r\n}"]}