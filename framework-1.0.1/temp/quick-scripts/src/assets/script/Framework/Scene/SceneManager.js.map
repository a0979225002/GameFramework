{"version":3,"sources":["assets\\script\\Framework\\Scene\\SceneManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {IConfigManager} from \"../Config/IConfig/IConfigManager\";\r\nimport {ErrorType} from '../Error/Enum/ErrorManagerEnum'\r\nimport ErrorManager from '../Error/ErrorManager'\r\nimport LoadResManager from '../LoadResources/LoadResManager'\r\nimport {SceneStyle, SceneDirectionType} from './Enum/SceneStyle'\r\nimport {ISceneManager} from \"./IScene/ISceneManager\";\r\nimport SceneDirectionChangeNotification from \"./SceneNotification/SceneDirectionChangeNotification\";\r\nimport SceneDirectionChangeObserver from \"./SceneObserver/SceneDirectionChangeObserver\";\r\nimport SceneSizeChangeListener from './SceneSizeChangeListener'\r\nimport SceneStyleHandler from './SceneStyleHandler'\r\n\r\nexport default class SceneManager implements ISceneManager {\r\n\r\n    private configManager: IConfigManager;\r\n    private static _instance: ISceneManager;\r\n    private style: SceneStyle | ISceneStyle;\r\n    private _designWidth: number;\r\n    private _designHeight: number;\r\n    private sceneSizeChangeListener: SceneSizeChangeListener;\r\n    private sceneStyleHandler: SceneStyleHandler;\r\n    private _sceneDirection: SceneDirectionType;\r\n    private sceneChangeDirectionObserver: SceneDirectionChangeObserver;\r\n\r\n    private constructor(configManager: IConfigManager) {\r\n        this.configManager = configManager;\r\n        this._designWidth = 1280;                                                   //初始預設寬度\r\n        this._designHeight = 720;                                                   //初始預設高度\r\n        this.sceneSizeChangeListener = new SceneSizeChangeListener();                         //實例化監聽器\r\n        this.sceneStyleHandler = new SceneStyleHandler();                           //實例化scene樣式導向器\r\n        this.style = SceneStyle.Horizontal;                                         //初始預設scene畫面調整的模式\r\n    }\r\n\r\n    /**\r\n     *  懶漢加載\r\n     *  初始化,只讓一個專案產生一次該class\r\n     */\r\n    public static setInstance(configManager: IConfigManager) {\r\n        if (!this._instance) {\r\n            this._instance = new SceneManager(configManager);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  獲取已經初始化的靜態實例class\r\n     */\r\n    public static get instance(): ISceneManager {\r\n        if (!this._instance) {\r\n            ErrorManager.instance.executeError(ErrorType.SceneFW, \"該類尚未實例化\");\r\n            return;\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * cavers 設計寬度\r\n     * @param {number} width\r\n     * @return {this}\r\n     */\r\n    setDesignWidth(width: number): this {\r\n        this._designWidth = width;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * cavers 設計高度\r\n     * @param {number} height\r\n     * @return {this}\r\n     */\r\n    setDesignHeight(height: number): this {\r\n        this._designHeight = height;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 更新當前示配寬高,會保存上次的scene更動模式\r\n     * 如不添加參數,第一次將會使用預設模式更動\r\n     * @param {SceneStyle | Function} style : 可自定義更動樣式,但實作(介面)ISceneStyle\r\n     * @return {this}\r\n     */\r\n    updateSize(style?: SceneStyle | ISceneStyle): this {\r\n        if (style) {\r\n            this.style = style;\r\n            switch (style) {\r\n                case SceneStyle.Horizontal:\r\n                    this.removeSceneChangeDirectionEventListener();\r\n                    this._sceneDirection = SceneDirectionType.PORTRAIT;\r\n                    break;\r\n                case SceneStyle.Vertical:\r\n                    this.removeSceneChangeDirectionEventListener();\r\n                    this._sceneDirection = SceneDirectionType.LANDSCAPE;\r\n                    break;\r\n                case SceneStyle.AUTO:\r\n                default:\r\n                    this.sceneChangeDirectionEventListener();\r\n                    break;\r\n            }\r\n        }\r\n        this.sceneStyleHandler.getStyle(this.style, this._designWidth, this._designHeight);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 如果使用者更改螢幕式配度時,判斷當前是否開啟SceneChangeDirectionEventListener監聽\r\n     * 如果有,且並不是SceneStyle.AUTO類型,將自動關閉訂閱\r\n     * @private\r\n     */\r\n    private removeSceneChangeDirectionEventListener() {\r\n        if (this.sceneChangeDirectionObserver) {\r\n            SceneDirectionChangeNotification\r\n                .instance.unsubscribe(this.sceneChangeDirectionObserver);\r\n            this.sceneChangeDirectionObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 自發監聽,當用戶開啟AUTO樣式,或自訂樣式時才會開啟\r\n     * 當推波發送過來時將會更新當前 sceneDirectionType\r\n     * @private\r\n     */\r\n    private sceneChangeDirectionEventListener() {\r\n        //如果sceneChangeDirectionObserver以創建過,代表已開始監聽中,將直接離開,不重複訂閱\r\n        if (this.sceneChangeDirectionObserver) return;\r\n        SceneDirectionChangeNotification\r\n            .instance.subscribe(this.getSceneChangeDirectionObserver(), true)\r\n    }\r\n\r\n    /**\r\n     * 建立scene方向改變觀察者,並綁定改變scene方向時,更新當前遊戲方向狀態\r\n     * @returns {SceneDirectionChangeObserver}\r\n     * @private\r\n     */\r\n    private getSceneChangeDirectionObserver(): SceneDirectionChangeObserver {\r\n        this.sceneChangeDirectionObserver = new SceneDirectionChangeObserver((type => {\r\n            this.updateSceneDirection(type);\r\n        }), true);\r\n        return this.sceneChangeDirectionObserver;\r\n    }\r\n\r\n    /**\r\n     * 更新當前遊戲方向\r\n     * @param {SceneDirectionType} direction\r\n     */\r\n    private updateSceneDirection(direction: SceneDirectionType) {\r\n        this._sceneDirection = direction;\r\n    }\r\n\r\n    /**\r\n     * 監聽當前cavers是否有更動大小,如果有將會自動更新當前是配寬高\r\n     * 將會比照上次更動的樣式進行更動\r\n     * 如果需求更動樣式,須先更新 updateSize()\r\n     * @param {number} time : 更新的頻率 單位毫秒 ms\r\n     */\r\n    designSceneSizeListenerAutoStart(time: number) {\r\n        this.sceneSizeChangeListener.designSceneEventListener(time);\r\n    }\r\n\r\n    /**\r\n     * 更換場景\r\n     * @param {string} name : 場景資源名稱為你Res動態加載的自訂義的scene名稱\r\n     */\r\n    changeScene(name: string) {\r\n        if (!LoadResManager.instance.sceneRes.has(name)) {\r\n            ErrorManager.instance.executeError(ErrorType.SceneFW, \"加載不到你的Scene資源,請檢查該資源名是否正確\");\r\n        }\r\n        cc.director.runScene(LoadResManager.instance.sceneRes.get(name));\r\n    }\r\n\r\n    /**\r\n     * 清除該scene所有動作\r\n     * @param scene\r\n     */\r\n    removeScene(scene: any) {\r\n        scene.destroy();\r\n    }\r\n\r\n\r\n    get sceneDirection(): SceneDirectionType {\r\n        return this._sceneDirection;\r\n    }\r\n\r\n    set sceneDirection(value: SceneDirectionType) {\r\n        this._sceneDirection = value;\r\n    }\r\n}"]}