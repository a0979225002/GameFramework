{"version":3,"sources":["assets\\script\\Framework\\Listener\\EventManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {IConfigManager} from \"../Config/IConfig/IConfigManager\";\r\nimport {ErrorType} from \"../Error/Enum/ErrorManagerEnum\";\r\nimport ErrorManager from \"../Error/ErrorManager\";\r\nimport {GameEventType} from './Enum/gameEventType'\r\nimport {ServerEventType} from './Enum/ServerEventType'\r\nimport IEventManager from './IEventManager'\r\n\r\nexport default class EventManager implements IEventManager {\r\n\r\n    private static _instance: IEventManager;\r\n    private configManager: IConfigManager;\r\n    /**\r\n     * 事件總數量\r\n     */\r\n    private _eventCount: number\r\n\r\n    /**\r\n     * 遊戲內事件\r\n     */\r\n    public static serverTarget: cc.EventTarget\r\n    /**\r\n     * 伺服器回傳事件\r\n     */\r\n    public static gameTarget: cc.EventTarget\r\n\r\n    /**\r\n     * 當前正在監聽那些事件;\r\n     */\r\n    private readonly _eventsCurrentlyBeing: Map<string, ServerEventType | GameEventType>\r\n\r\n    private constructor(configManager: IConfigManager) {\r\n\r\n        this.configManager = configManager;\r\n        this._eventCount = 0;\r\n        this._eventsCurrentlyBeing = new Map<string, ServerEventType | GameEventType>();\r\n        EventManager.serverTarget = new cc.EventTarget();\r\n        EventManager.gameTarget = new cc.EventTarget();\r\n\r\n    }\r\n\r\n    /**\r\n     *  懶漢加載\r\n     *  初始化,只讓一個專案產生一次該class\r\n     */\r\n    public static setInstance(configManager: IConfigManager) {\r\n        if (!this._instance) {\r\n            this._instance = new EventManager(configManager);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  獲取已經初始化的靜態實例class\r\n     */\r\n    public static get instance(): IEventManager {\r\n\r\n        if (!this._instance) {\r\n            ErrorManager.instance.executeError(ErrorType.ListenerFW, \"該類尚未實例化\");\r\n            return;\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    public get eventCount(): number {\r\n\r\n        return this._eventCount\r\n\r\n    }\r\n\r\n    public get eventsCurrentlyBeing(): Map<string, ServerEventType | GameEventType> {\r\n\r\n        return this._eventsCurrentlyBeing\r\n\r\n    }\r\n\r\n    /**\r\n     * 添加事件\r\n     * @param eventTarget\r\n     * @param {string} eventName\r\n     * @param {any} any : 要回傳的物件\r\n     */\r\n    public setEvent(eventTarget: cc.EventTarget, eventName: ServerEventType | GameEventType, ...any: any) {\r\n\r\n        any ? eventTarget.emit(eventName, ...any) : eventTarget.emit(eventName);\r\n\r\n    }\r\n\r\n    /**\r\n     * game監聽回傳接收\r\n     * @param {string} eventName\r\n     * @param {Function} callFun\r\n     * @param isOnce\r\n     */\r\n    public gameEventListener(eventName: GameEventType, callFun: (...target: any) => void, isOnce: boolean) {\r\n\r\n        this._eventCount += 1;\r\n        this._eventsCurrentlyBeing.set(\"gameEvent\", eventName);\r\n\r\n        if (isOnce) {\r\n            EventManager.gameTarget.once(eventName, callFun);\r\n        } else {\r\n            EventManager.gameTarget.on(eventName, callFun);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * server監聽回傳接收\r\n     * @param {string} eventName\r\n     * @param {Function} callFun\r\n     * @param isOnce\r\n     */\r\n    public serverEventListener(eventName: ServerEventType, callFun: (...target: any) => void, isOnce: boolean) {\r\n\r\n        this._eventCount += 1;\r\n        this._eventsCurrentlyBeing.set(\"severEvent\", eventName);\r\n\r\n        if (isOnce) {\r\n            EventManager.serverTarget.once(eventName, callFun);\r\n        } else {\r\n            EventManager.serverTarget.on(eventName, callFun);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 刪除之前用同類型，回調，目標或 useCapture 註冊的事件監聽器，如果只傳遞 type，將會刪除 type 類型的所有事件監聽器。\r\n     * @param {ServerEventType | GameEventType} eventName\r\n     * @param {cc.EventTarget} eventTarget\r\n     * @param callFun?{Function} : 要刪除的方法,如果未傳參數,將默認全部相關的callFun一並刪除\r\n     * @param target?{Object}:調用回調的目標（此對象），如果未指定，則僅刪除沒有目標的回調\r\n     */\r\n    public destroyEvent(eventName: ServerEventType | GameEventType, eventTarget: cc.EventTarget, callFun?: Function, target?: Object) {\r\n\r\n        eventTarget.off(eventName, callFun, target);\r\n\r\n    }\r\n\r\n    /**\r\n     * 是否該事件持續監聽中\r\n     */\r\n    public hasListening(eventName: ServerEventType | GameEventType, eventTarget: cc.EventTarget): boolean {\r\n\r\n        return eventTarget.hasEventListener(eventName);\r\n\r\n    }\r\n}"]}