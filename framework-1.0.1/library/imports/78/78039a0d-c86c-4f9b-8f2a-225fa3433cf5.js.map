{"version":3,"sources":["assets\\script\\Framework\\LoadResources\\LoadTypeFactory.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {ErrorType} from \"../Error/Enum/ErrorManagerEnum\";\r\nimport ErrorManager from \"../Error/ErrorManager\";\r\nimport {LoadType} from \"./Enum/LoadEnum\";\r\nimport ILoadFactory from \"./ILoad/ILoadFactory\";\r\nimport CSSLoad from './LoadScriptType/CSSLoad'\r\nimport ScriptLoad from './LoadScriptType/ScriptLoad'\r\nimport ImgLoad from \"./LoadType/ImgLoad\";\r\nimport MusicLoad from \"./LoadType/MusicLoad\";\r\nimport PrefabLoad from \"./LoadType/PrefabLoad\";\r\nimport SceneLoad from './LoadType/SceneLoad'\r\nimport SpineLoad from \"./LoadType/SpineLoad\";\r\nimport TextLoad from \"./LoadType/TextLoad\";\r\n\r\nexport default class LoadTypeFactory implements ILoadFactory {\r\n\r\n    private isLoadBundle: boolean;\r\n    private assetBundle: cc.AssetManager.Bundle\r\n    private promise: Promise<unknown>\r\n    private readonly assetMethod: Array<Function>;\r\n\r\n\r\n    constructor() {\r\n        this.assetMethod = new Array<Function>();\r\n    }\r\n\r\n    loadBundle(dataName: string, type: LoadType, url: string) {\r\n\r\n        if (this.assetBundle) return;\r\n        this.promise = new Promise<void>(() => {\r\n        });\r\n\r\n        //加載Bundle資源時須先加載Bundle清單\r\n        return new Promise<void>((resolve) => {\r\n            if (!this.isLoadBundle) {\r\n                this.isLoadBundle = true;\r\n                cc.assetManager.loadBundle(\"secondaryRes\", (error, bundle) => {\r\n                    if (error) {\r\n                        ErrorManager.instance.executeError(ErrorType.LoadErrorFW, error)\r\n                    }\r\n                    this.assetBundle = bundle;\r\n                    resolve();\r\n                })\r\n            } else if (!this.assetBundle && this.isLoadBundle) {\r\n\r\n                this.assetMethod.push(this.checkLoadType.bind(this, dataName, type, url, \"secondaryRes\"));\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 檢測當前Type,做各自對應的加載動作\r\n     * @param dataName\r\n     * @param type\r\n     * @param url\r\n     */\r\n    public executeLoad(dataName: string, type: LoadType, url: string) {\r\n\r\n        this.checkLoadType(dataName, type, url, \"resources\");\r\n\r\n    }\r\n\r\n    /**\r\n     * 執行Bundle載入動作\r\n     * @param dataName\r\n     * @param type\r\n     * @param url\r\n     */\r\n    async executeLoadBundle(dataName: string, type: LoadType, url: string) {\r\n\r\n        await this.loadBundle(dataName, type, url);\r\n        this.checkLoadType(dataName, type, url, \"secondaryRes\");\r\n\r\n        if (this.assetMethod.length != 0) {\r\n            while (this.assetMethod.length) {\r\n                this.assetMethod[0]();\r\n                this.assetMethod.shift();\r\n            }\r\n        }\r\n    }\r\n\r\n    //確認當前type\r\n    checkLoadType(dataName: string, type: LoadType, url: string, folder: string) {\r\n        switch (type) {\r\n\r\n            case LoadType.img:\r\n                new ImgLoad(dataName, cc.SpriteAtlas, url, folder).loadResources();\r\n                break;\r\n            case LoadType.music:\r\n                new MusicLoad(dataName, cc.AudioClip, url, folder).loadResources();\r\n                break;\r\n            case LoadType.prefab:\r\n                new PrefabLoad(dataName, cc.Prefab, url, folder).loadResources();\r\n                break;\r\n            case LoadType.spine:\r\n                new SpineLoad(dataName, sp.SkeletonData, url, folder).loadResources();\r\n                break;\r\n            case LoadType.scene:\r\n                new SceneLoad(dataName, cc.SceneAsset, null, folder).loadResources();\r\n                break;\r\n            case LoadType.text:\r\n                new TextLoad(dataName, cc.TextAsset, url, folder).loadResources();\r\n                break;\r\n            default :\r\n                ErrorManager.instance.executeError(ErrorType.TypeFW, \"LoadType 無法偵測\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 加載外部腳本\r\n     * @param name\r\n     * @param type\r\n     * @param url\r\n     */\r\n    executeLoadExternalScript(name: string, type: LoadType, url: string) {\r\n        switch (type) {\r\n            case LoadType.css:\r\n                new CSSLoad(name, \"text/css\", url).loadScript();\r\n                break\r\n            case LoadType.script:\r\n                new ScriptLoad(name, \"text/javascript\", url).loadScript();\r\n                break\r\n            default:\r\n                ErrorManager.instance.executeError(ErrorType.TypeFW, \"LoadType 無法偵測\");\r\n        }\r\n    }\r\n}"]}