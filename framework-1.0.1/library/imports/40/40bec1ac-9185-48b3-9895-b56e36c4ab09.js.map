{"version":3,"sources":["assets\\script\\Framework\\GlobalMethod\\PrefabMethod.ts"],"names":[],"mappings":";;;;;;AAAA;IAAA;IAmFA,CAAC;IAlFG;;;;;OAKG;IACI,2BAAc,GAArB,UAAsB,WAAoB,EAAE,SAAiB,EAAE,UAAkB;QAC7E,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE,MAAM;YAC3D,IAAI,KAAK,EAAE;gBACP,EAAE,CAAC,GAAG,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAA;gBACjD,OAAO;aACV;YACD,IAAI,UAAU,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACxC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACjC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,0BAAa,GAApB,UAAqB,GAAW,EAAE,SAA+B;QAC7D,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE,MAAM;YACxD,IAAI,KAAK,EAAE;gBACP,EAAE,CAAC,GAAG,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAA;gBAChD,OAAO;aACV;YACD,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;gBACpB,IAAI,UAAU,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7C,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aAChD;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;OAGG;IACI,gCAAmB,GAA1B,UAA2B,IAAa;QAEpC,IAAI,OAAO,GAAyB,IAAI,GAAG,EAAE,CAAC;QAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE,EAAC,gBAAgB;gBACxD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA,mBAAmB;aAC5D;SACJ;QACD,OAAO,OAAO,CAAC;IAEnB,CAAC;IAED;;;;OAIG;IACI,gCAAmB,GAA1B,UAA2B,IAAa;QAEpC,IAAI,OAAO,GAAyB,IAAI,GAAG,EAAE,CAAC;QAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA,WAAW;YACpC,IAAI,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA,UAAU;YAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE,EAAC,gBAAgB;gBACxD,wCAAwC;gBAExC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO;oBAChB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA,mBAAmB;iBACzD;qBAAM,EAAC,MAAM;oBACV,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;oBACrC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA,mBAAmB;oBACxD,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;iBAC7B;aACJ;SACJ;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IAEL,mBAAC;AAAD,CAnFA,AAmFC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class PrefabMethod {\r\n    /**\r\n     * //TITLE:加載單一一個Prefab,並對該Prefab添加Script\r\n     * @param {cc.Node : 父類node} parentScene\r\n     * @param {string : 該prefab resources底下的url位置} PrefabURL\r\n     * @param {string : 要對該prefab添加的script} ScriptName\r\n     */\r\n    static onlyPrefabInit(parentScene: cc.Node, PrefabURL: string, ScriptName: string) {\r\n        cc.loader.loadRes(PrefabURL, cc.Prefab, function (error, Prefab) {\r\n            if (error) {\r\n                cc.log(\"PrefabData.js_onlyPrefab_init():\", error)\r\n                return;\r\n            }\r\n            let prefabNode = cc.instantiate(Prefab);\r\n            parentScene.addChild(prefabNode);\r\n            prefabNode.addComponent(ScriptName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * //TITLE:加載Resources底下全部Prefab,並將該prefab轉成node物件\r\n     * @param {string : 要載入的資料夾名稱} url\r\n     * @param {object : 要將所有node物件存放的位置} prefabMap\r\n     *  prefabMap : object(key : prefab name , value : node物件)\r\n     */\r\n    static allPrefabInit(url: string, prefabMap: Map<string, cc.Node>) {\r\n        cc.loader.loadResDir(url, cc.Prefab, function (error, Prefab) {\r\n            if (error) {\r\n                cc.log(\"PrefabData.js_allPrefab_init():\", error)\r\n                return;\r\n            }\r\n            for (let key in Prefab) {\r\n                let prefabNode = cc.instantiate(Prefab[key]);\r\n                prefabMap.set(Prefab[key]._name, prefabNode);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * //TITLE:尋訪該node底下一層節點\r\n     * @param {cc.Node : 物件} node\r\n     */\r\n    static loadNodeOneChildren(node: cc.Node): Map<string, cc.Node> {\r\n\r\n        let allNode: Map<string, cc.Node> = new Map();\r\n        for (let i = 0; i < node.childrenCount; i++) {\r\n            let n = node.children[i];\r\n            for (let j = 0; j <= n.childrenCount; j++) {//尋訪node底下是否有子節點\r\n                allNode.set(node.children[i].name, n);//view[子節點位置,子節點屬性]\r\n            }\r\n        }\r\n        return allNode;\r\n\r\n    }\r\n\r\n    /**\r\n     * //TITLE:尋訪該node底下兩層子節點\r\n     * @param {node : 物件} node\r\n     * return : 回傳 object(key: 該子類node URL, value:該子類node物件)\r\n     */\r\n    static loadNodeTowChildren(node: cc.Node): Map<string, cc.Node> {\r\n\r\n        let allNode: Map<string, cc.Node> = new Map();\r\n\r\n        for (let i = 0; i < node.childrenCount; i++) {\r\n            let n = node.children[i];//將該父節點屬性儲存\r\n            let path = n.children[i].name;//將父節點位置儲存\r\n\r\n            for (let j = 0; j <= n.childrenCount; j++) {//尋訪node底下是否有子節點\r\n                // this.view[root.children[i].name] = n;\r\n\r\n                if (j == 0) {//沒有子節點\r\n                    allNode.set(n.children[i].name, n);//view[父節點位置,父節點屬性]\r\n                } else {//有子節點\r\n                    path += \"/\" + n.children[j - 1].name;\r\n                    allNode.set(path, n.children[j - 1]);//view[子節點位置,子節點屬性]\r\n                    path = n.children[i].name;\r\n                }\r\n            }\r\n        }\r\n        return allNode;\r\n    }\r\n\r\n}"]}