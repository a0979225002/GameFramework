{"version":3,"sources":["assets\\script\\Framework\\Scene\\SceneNotification\\SceneDirectionChangeNotification.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,sEAA4D;AAC5D,yDAAoD;AAIpD;;;;;GAKG;AACH;IAMI;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAgC,CAAC;IAC5D,CAAC;IAMD,sBAAkB,4CAAQ;QAJ1B;;;WAGG;aACH;YACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,gCAAgC,EAAE,CAAC;aAC3D;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED;;;;OAIG;IACH,oDAAS,GAAT,UAAU,QAAsC,EAAE,WAAoB;QAClE,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC7B,sBAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAAS,CAAC,OAAO,EAAK,QAAQ,wHAA2B,CAAC,CAAA;YAC7F,OAAO;SACV;QACD,QAAQ,CAAC,WAAW,GAAG,WAAW,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,sDAAW,GAAX,UAAY,QAAsC;QAC9C,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC7B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAClC;aAAK;YACF,sBAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAAS,CAAC,aAAa,EAAI,QAAQ,+GAAuB,CAAC,CAAC;SAClG;IACL,CAAC;IAED,iDAAM,GAAN,UAAO,IAAwB;;QAC3B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE;;gBACxB,KAAqB,IAAA,KAAA,SAAA,IAAI,CAAC,QAAQ,CAAA,gBAAA,4BAAE;oBAA/B,IAAI,QAAQ,WAAA;oBACb,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;wBACvB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;qBAC9B;iBACJ;;;;;;;;;SACJ;IACL,CAAC;IAED,4DAAiB,GAAjB;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED,0DAAe,GAAf;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACL,uCAAC;AAAD,CA7DA,AA6DC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import {ErrorType} from \"../../Error/Enum/ErrorManagerEnum\";\r\nimport ErrorManager from \"../../Error/ErrorManager\";\r\nimport {SceneDirectionType} from \"../Enum/SceneStyle\";\r\nimport SceneDirectionChangeObserver from \"../SceneObserver/SceneDirectionChangeObserver\";\r\n\r\n/**\r\n * @Author XIAO-LI-PIN\r\n * @Description 場景方向改變通知管理器\r\n * @Date 2021-05-19 下午 01:57\r\n * @Version 1.0\r\n */\r\nexport default class SceneDirectionChangeNotification implements INotificationManager {\r\n\r\n    private readonly observer: Set<SceneDirectionChangeObserver>;\r\n\r\n    private static _instance: SceneDirectionChangeNotification;\r\n\r\n    private constructor() {\r\n        this.observer = new Set<SceneDirectionChangeObserver>();\r\n    }\r\n\r\n    /**\r\n     * 懶漢加載,單例模式\r\n     * @returns {SceneDirectionChangeNotification}\r\n     */\r\n    public static get instance(): SceneDirectionChangeNotification {\r\n        if (!this._instance) {\r\n            this._instance = new SceneDirectionChangeNotification();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 添加scene,更換方向時,推播事件\r\n     * @param {SceneDirectionChangeObserver} observer : 推撥對象\r\n     * @param {boolean} isPermanent\r\n     */\r\n    subscribe(observer: SceneDirectionChangeObserver, isPermanent: boolean) {\r\n        if (this.observer.has(observer)) {\r\n            ErrorManager.instance.executeError(ErrorType.SceneFW, `${observer} 該類已註冊過該scene方向更改監聽事件,請檢察`)\r\n            return;\r\n        }\r\n        observer.isPermanent = isPermanent;\r\n        this.observer.add(observer);\r\n    }\r\n\r\n    unsubscribe(observer: SceneDirectionChangeObserver) {\r\n        if (this.observer.has(observer)) {\r\n            this.observer.delete(observer);\r\n        }else {\r\n            ErrorManager.instance.executeError(ErrorType.GameProcessFW,`${observer} : 該觀察類尚未綁定過,無須移除觀察對象`);\r\n        }\r\n    }\r\n\r\n    notify(type: SceneDirectionType) {\r\n        if (this.observer.size > 0) {\r\n            for (let observer of this.observer) {\r\n                observer.pushNotification(type);\r\n                if (!observer.isPermanent) {\r\n                    this.unsubscribe(observer);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getSubscribeCount(): number {\r\n        return this.observer.size;\r\n    }\r\n\r\n    getAllSubscribe(): Set<SceneDirectionChangeObserver> {\r\n        return this.observer;\r\n    }\r\n}"]}